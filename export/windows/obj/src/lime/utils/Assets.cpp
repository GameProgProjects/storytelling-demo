// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_app_Promise_lime_utils_AssetLibrary
#include <lime/app/Promise_lime_utils_AssetLibrary.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_media_AudioBuffer
#include <lime/media/AudioBuffer.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_utils_AssetBundle
#include <lime/utils/AssetBundle.h>
#endif
#ifndef INCLUDED_lime_utils_AssetCache
#include <lime/utils/AssetCache.h>
#endif
#ifndef INCLUDED_lime_utils_AssetLibrary
#include <lime/utils/AssetLibrary.h>
#endif
#ifndef INCLUDED_lime_utils_AssetManifest
#include <lime/utils/AssetManifest.h>
#endif
#ifndef INCLUDED_lime_utils_Assets
#include <lime/utils/Assets.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_lime_utils_Preloader
#include <lime/utils/Preloader.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_47_exists,"lime.utils.Assets","exists",0x1d422f71,"lime.utils.Assets.exists","lime/utils/Assets.hx",47,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_72_getAsset,"lime.utils.Assets","getAsset",0x8d49da4f,"lime.utils.Assets.getAsset","lime/utils/Assets.hx",72,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_158_getAudioBuffer,"lime.utils.Assets","getAudioBuffer",0x84c07015,"lime.utils.Assets.getAudioBuffer","lime/utils/Assets.hx",158,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_169_getBytes,"lime.utils.Assets","getBytes",0x24a878ca,"lime.utils.Assets.getBytes","lime/utils/Assets.hx",169,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_180_getFont,"lime.utils.Assets","getFont",0x6eb05e50,"lime.utils.Assets.getFont","lime/utils/Assets.hx",180,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_208_getImage,"lime.utils.Assets","getImage",0x24798fba,"lime.utils.Assets.getImage","lime/utils/Assets.hx",208,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_212_getLibrary,"lime.utils.Assets","getLibrary",0xdfc4ad1a,"lime.utils.Assets.getLibrary","lime/utils/Assets.hx",212,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_228_getPath,"lime.utils.Assets","getPath",0x7541e626,"lime.utils.Assets.getPath","lime/utils/Assets.hx",228,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_260_getText,"lime.utils.Assets","getText",0x77e9cd2e,"lime.utils.Assets.getText","lime/utils/Assets.hx",260,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_264_hasLibrary,"lime.utils.Assets","hasLibrary",0x1b170ed6,"lime.utils.Assets.hasLibrary","lime/utils/Assets.hx",264,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_274_isLocal,"lime.utils.Assets","isLocal",0x6de3bdec,"lime.utils.Assets.isLocal","lime/utils/Assets.hx",274,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_292_isValidAudio,"lime.utils.Assets","isValidAudio",0xfba1fa19,"lime.utils.Assets.isValidAudio","lime/utils/Assets.hx",292,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_299_isValidImage,"lime.utils.Assets","isValidImage",0x918aa09e,"lime.utils.Assets.isValidImage","lime/utils/Assets.hx",299,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_303_list,"lime.utils.Assets","list",0x96ec2eb3,"lime.utils.Assets.list","lime/utils/Assets.hx",303,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_320_loadAsset,"lime.utils.Assets","loadAsset",0x8c6c0f75,"lime.utils.Assets.loadAsset","lime/utils/Assets.hx",320,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_372_loadAsset,"lime.utils.Assets","loadAsset",0x8c6c0f75,"lime.utils.Assets.loadAsset","lime/utils/Assets.hx",372,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_393_loadAudioBuffer,"lime.utils.Assets","loadAudioBuffer",0xa72805bb,"lime.utils.Assets.loadAudioBuffer","lime/utils/Assets.hx",393,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_398_loadBytes,"lime.utils.Assets","loadBytes",0x23caadf0,"lime.utils.Assets.loadBytes","lime/utils/Assets.hx",398,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_403_loadFont,"lime.utils.Assets","loadFont",0xbb998fea,"lime.utils.Assets.loadFont","lime/utils/Assets.hx",403,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_408_loadImage,"lime.utils.Assets","loadImage",0x239bc4e0,"lime.utils.Assets.loadImage","lime/utils/Assets.hx",408,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_412_loadLibrary,"lime.utils.Assets","loadLibrary",0x93baf7c0,"lime.utils.Assets.loadLibrary","lime/utils/Assets.hx",412,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_429_loadLibrary,"lime.utils.Assets","loadLibrary",0x93baf7c0,"lime.utils.Assets.loadLibrary","lime/utils/Assets.hx",429,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_450_loadLibrary,"lime.utils.Assets","loadLibrary",0x93baf7c0,"lime.utils.Assets.loadLibrary","lime/utils/Assets.hx",450,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_475_loadLibrary,"lime.utils.Assets","loadLibrary",0x93baf7c0,"lime.utils.Assets.loadLibrary","lime/utils/Assets.hx",475,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_496_loadLibrary,"lime.utils.Assets","loadLibrary",0x93baf7c0,"lime.utils.Assets.loadLibrary","lime/utils/Assets.hx",496,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_506_loadText,"lime.utils.Assets","loadText",0xc4d2fec8,"lime.utils.Assets.loadText","lime/utils/Assets.hx",506,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_510_registerLibrary,"lime.utils.Assets","registerLibrary",0xb6301ea3,"lime.utils.Assets.registerLibrary","lime/utils/Assets.hx",510,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_538_unloadLibrary,"lime.utils.Assets","unloadLibrary",0xc816d6c7,"lime.utils.Assets.unloadLibrary","lime/utils/Assets.hx",538,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_542_removeLibrary,"lime.utils.Assets","removeLibrary",0xaef8fe22,"lime.utils.Assets.removeLibrary","lime/utils/Assets.hx",542,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_581___cacheBreak,"lime.utils.Assets","__cacheBreak",0xe7faf592,"lime.utils.Assets.__cacheBreak","lime/utils/Assets.hx",581,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_585___libraryNotFound,"lime.utils.Assets","__libraryNotFound",0x7dfa37b5,"lime.utils.Assets.__libraryNotFound","lime/utils/Assets.hx",585,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_603_library_onChange,"lime.utils.Assets","library_onChange",0x3a89dec8,"lime.utils.Assets.library_onChange","lime/utils/Assets.hx",603,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_39_boot,"lime.utils.Assets","boot",0x90549687,"lime.utils.Assets.boot","lime/utils/Assets.hx",39,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_40_boot,"lime.utils.Assets","boot",0x90549687,"lime.utils.Assets.boot","lime/utils/Assets.hx",40,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_42_boot,"lime.utils.Assets","boot",0x90549687,"lime.utils.Assets.boot","lime/utils/Assets.hx",42,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_43_boot,"lime.utils.Assets","boot",0x90549687,"lime.utils.Assets.boot","lime/utils/Assets.hx",43,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_44_boot,"lime.utils.Assets","boot",0x90549687,"lime.utils.Assets.boot","lime/utils/Assets.hx",44,0x95055f23)
namespace lime{
namespace utils{

void Assets_obj::__construct() { }

Dynamic Assets_obj::__CreateEmpty() { return new Assets_obj; }

void *Assets_obj::_hx_vtable = 0;

Dynamic Assets_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Assets_obj > _hx_result = new Assets_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Assets_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4d8112bb;
}

 ::lime::utils::AssetCache Assets_obj::cache;

 ::lime::app::_Event_Void_Void Assets_obj::onChange;

 ::haxe::ds::StringMap Assets_obj::bundlePaths;

 ::haxe::ds::StringMap Assets_obj::libraries;

 ::haxe::ds::StringMap Assets_obj::libraryPaths;

bool Assets_obj::exists(::String id,::String type){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_47_exists)
HXLINE(  49)		if (::hx::IsNull( type )) {
HXLINE(  51)			type = HX_("BINARY",01,68,8e,9f);
            		}
HXLINE(  54)		::String id1 = id;
HXDLIN(  54)		int colonIndex = id1.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN(  54)		::String symbol_libraryName = id1.substring(0,colonIndex);
HXDLIN(  54)		::String symbol_symbolName = id1.substring((colonIndex + 1),null());
HXDLIN(  54)		 ::lime::utils::AssetLibrary symbol_library = ::lime::utils::Assets_obj::getLibrary(symbol_libraryName);
HXLINE(  56)		if (::hx::IsNotNull( symbol_library )) {
HXLINE(  58)			return symbol_library->exists(symbol_symbolName,type);
            		}
HXLINE(  62)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,exists,return )

 ::Dynamic Assets_obj::getAsset(::String id,::String type,bool useCache){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_72_getAsset)
HXLINE(  74)		bool _hx_tmp;
HXDLIN(  74)		if (useCache) {
HXLINE(  74)			_hx_tmp = ::lime::utils::Assets_obj::cache->enabled;
            		}
            		else {
HXLINE(  74)			_hx_tmp = false;
            		}
HXDLIN(  74)		if (_hx_tmp) {
HXLINE(  76)			::String _hx_switch_0 = type;
            			if (  (_hx_switch_0==HX_("FONT",cf,25,81,2e)) ){
HXLINE(  83)				 ::Dynamic font = ::lime::utils::Assets_obj::cache->font->get(id);
HXLINE(  85)				if (::hx::IsNotNull( font )) {
HXLINE(  87)					return font;
            				}
HXLINE(  82)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("IMAGE",3b,57,57,3b)) ){
HXLINE(  91)				 ::lime::graphics::Image image = ( ( ::lime::graphics::Image)(::lime::utils::Assets_obj::cache->image->get(id)) );
HXLINE(  93)				if (::lime::utils::Assets_obj::isValidImage(image)) {
HXLINE(  95)					return image;
            				}
HXLINE(  90)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("MUSIC",85,08,49,8e)) ||  (_hx_switch_0==HX_("SOUND",af,c4,ba,fe)) ){
HXLINE(  99)				 ::lime::media::AudioBuffer audio = ( ( ::lime::media::AudioBuffer)(::lime::utils::Assets_obj::cache->audio->get(id)) );
HXLINE( 101)				if (::lime::utils::Assets_obj::isValidAudio(audio)) {
HXLINE( 103)					return audio;
            				}
HXLINE(  98)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("TEMPLATE",3a,78,cd,05)) ){
HXLINE( 107)				HX_STACK_DO_THROW((HX_("Not sure how to get template: ",a1,19,8c,ad) + id));
HXDLIN( 107)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("BINARY",01,68,8e,9f)) ||  (_hx_switch_0==HX_("TEXT",ad,94,ba,37)) ){
HXLINE(  80)				useCache = false;
HXDLIN(  80)				goto _hx_goto_1;
            			}
            			/* default */{
HXLINE( 110)				return null();
            			}
            			_hx_goto_1:;
            		}
HXLINE( 114)		::String id1 = id;
HXDLIN( 114)		int colonIndex = id1.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 114)		::String symbol_libraryName = id1.substring(0,colonIndex);
HXDLIN( 114)		::String symbol_symbolName = id1.substring((colonIndex + 1),null());
HXDLIN( 114)		 ::lime::utils::AssetLibrary symbol_library = ::lime::utils::Assets_obj::getLibrary(symbol_libraryName);
HXLINE( 116)		if (::hx::IsNotNull( symbol_library )) {
HXLINE( 118)			if (symbol_library->exists(symbol_symbolName,type)) {
HXLINE( 120)				if (symbol_library->isLocal(symbol_symbolName,type)) {
HXLINE( 122)					 ::Dynamic asset = symbol_library->getAsset(symbol_symbolName,type);
HXLINE( 124)					bool _hx_tmp1;
HXDLIN( 124)					if (useCache) {
HXLINE( 124)						_hx_tmp1 = ::lime::utils::Assets_obj::cache->enabled;
            					}
            					else {
HXLINE( 124)						_hx_tmp1 = false;
            					}
HXDLIN( 124)					if (_hx_tmp1) {
HXLINE( 126)						::lime::utils::Assets_obj::cache->set(id,type,asset);
            					}
HXLINE( 129)					return asset;
            				}
            				else {
HXLINE( 133)					::lime::utils::Log_obj::error((((type + HX_(" asset \"",d2,25,2a,5d)) + id) + HX_("\" exists, but only asynchronously",dc,ca,f2,dd)),::hx::SourceInfo(HX_("lime/utils/Assets.hx",23,5f,05,95),133,HX_("lime.utils.Assets",39,6e,7e,b0),HX_("getAsset",7a,79,10,86)));
            				}
            			}
            			else {
HXLINE( 138)				::lime::utils::Log_obj::error(((((HX_("There is no ",e5,bb,ab,c5) + type) + HX_(" asset with an ID of \"",95,f2,3a,0d)) + id) + HX_("\"",22,00,00,00)),::hx::SourceInfo(HX_("lime/utils/Assets.hx",23,5f,05,95),138,HX_("lime.utils.Assets",39,6e,7e,b0),HX_("getAsset",7a,79,10,86)));
            			}
            		}
            		else {
HXLINE( 143)			::String _hx_tmp2 = ::lime::utils::Assets_obj::_hx___libraryNotFound(symbol_libraryName);
HXDLIN( 143)			::lime::utils::Log_obj::error(_hx_tmp2,::hx::SourceInfo(HX_("lime/utils/Assets.hx",23,5f,05,95),143,HX_("lime.utils.Assets",39,6e,7e,b0),HX_("getAsset",7a,79,10,86)));
            		}
HXLINE( 147)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assets_obj,getAsset,return )

 ::lime::media::AudioBuffer Assets_obj::getAudioBuffer(::String id,::hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_158_getAudioBuffer)
HXDLIN( 158)		return ( ( ::lime::media::AudioBuffer)(::lime::utils::Assets_obj::getAsset(id,HX_("SOUND",af,c4,ba,fe),useCache)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getAudioBuffer,return )

 ::haxe::io::Bytes Assets_obj::getBytes(::String id){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_169_getBytes)
HXDLIN( 169)		return ( ( ::haxe::io::Bytes)(::lime::utils::Assets_obj::getAsset(id,HX_("BINARY",01,68,8e,9f),false)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getBytes,return )

 ::lime::text::Font Assets_obj::getFont(::String id,::hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_180_getFont)
HXDLIN( 180)		return ( ( ::lime::text::Font)(::lime::utils::Assets_obj::getAsset(id,HX_("FONT",cf,25,81,2e),useCache)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getFont,return )

 ::lime::graphics::Image Assets_obj::getImage(::String id,::hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_208_getImage)
HXDLIN( 208)		return ( ( ::lime::graphics::Image)(::lime::utils::Assets_obj::getAsset(id,HX_("IMAGE",3b,57,57,3b),useCache)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getImage,return )

 ::lime::utils::AssetLibrary Assets_obj::getLibrary(::String name){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_212_getLibrary)
HXLINE( 213)		bool _hx_tmp;
HXDLIN( 213)		if (::hx::IsNotNull( name )) {
HXLINE( 213)			_hx_tmp = (name == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 213)			_hx_tmp = true;
            		}
HXDLIN( 213)		if (_hx_tmp) {
HXLINE( 215)			name = HX_("default",c1,d8,c3,9b);
            		}
HXLINE( 218)		return ( ( ::lime::utils::AssetLibrary)(::lime::utils::Assets_obj::libraries->get(name)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getLibrary,return )

::String Assets_obj::getPath(::String id){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_228_getPath)
HXLINE( 230)		::String id1 = id;
HXDLIN( 230)		int colonIndex = id1.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 230)		::String symbol_libraryName = id1.substring(0,colonIndex);
HXDLIN( 230)		::String symbol_symbolName = id1.substring((colonIndex + 1),null());
HXDLIN( 230)		 ::lime::utils::AssetLibrary symbol_library = ::lime::utils::Assets_obj::getLibrary(symbol_libraryName);
HXLINE( 232)		if (::hx::IsNotNull( symbol_library )) {
HXLINE( 234)			::String type = null();
HXDLIN( 234)			if (symbol_library->exists(symbol_symbolName,type)) {
HXLINE( 236)				return symbol_library->getPath(symbol_symbolName);
            			}
            			else {
HXLINE( 240)				::lime::utils::Log_obj::error(((HX_("There is no asset with an ID of \"",b0,92,42,96) + id) + HX_("\"",22,00,00,00)),::hx::SourceInfo(HX_("lime/utils/Assets.hx",23,5f,05,95),240,HX_("lime.utils.Assets",39,6e,7e,b0),HX_("getPath",5b,95,d4,1c)));
            			}
            		}
            		else {
HXLINE( 245)			::String _hx_tmp = ::lime::utils::Assets_obj::_hx___libraryNotFound(symbol_libraryName);
HXDLIN( 245)			::lime::utils::Log_obj::error(_hx_tmp,::hx::SourceInfo(HX_("lime/utils/Assets.hx",23,5f,05,95),245,HX_("lime.utils.Assets",39,6e,7e,b0),HX_("getPath",5b,95,d4,1c)));
            		}
HXLINE( 249)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getPath,return )

::String Assets_obj::getText(::String id){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_260_getText)
HXDLIN( 260)		return ( (::String)(::lime::utils::Assets_obj::getAsset(id,HX_("TEXT",ad,94,ba,37),false)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getText,return )

bool Assets_obj::hasLibrary(::String name){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_264_hasLibrary)
HXLINE( 265)		bool _hx_tmp;
HXDLIN( 265)		if (::hx::IsNotNull( name )) {
HXLINE( 265)			_hx_tmp = (name == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 265)			_hx_tmp = true;
            		}
HXDLIN( 265)		if (_hx_tmp) {
HXLINE( 267)			name = HX_("default",c1,d8,c3,9b);
            		}
HXLINE( 270)		return ::lime::utils::Assets_obj::libraries->exists(name);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,hasLibrary,return )

bool Assets_obj::isLocal(::String id,::String type,::hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_274_isLocal)
HXLINE( 276)		bool _hx_tmp;
HXDLIN( 276)		if (useCache) {
HXLINE( 276)			_hx_tmp = ::lime::utils::Assets_obj::cache->enabled;
            		}
            		else {
HXLINE( 276)			_hx_tmp = false;
            		}
HXDLIN( 276)		if (_hx_tmp) {
HXLINE( 278)			if (::lime::utils::Assets_obj::cache->exists(id,type)) {
HXLINE( 278)				return true;
            			}
            		}
HXLINE( 281)		::String id1 = id;
HXDLIN( 281)		int colonIndex = id1.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 281)		::String symbol_libraryName = id1.substring(0,colonIndex);
HXDLIN( 281)		::String symbol_symbolName = id1.substring((colonIndex + 1),null());
HXDLIN( 281)		 ::lime::utils::AssetLibrary symbol_library = ::lime::utils::Assets_obj::getLibrary(symbol_libraryName);
HXLINE( 282)		if (::hx::IsNotNull( symbol_library )) {
HXLINE( 282)			return symbol_library->isLocal(symbol_symbolName,type);
            		}
            		else {
HXLINE( 282)			return false;
            		}
HXDLIN( 282)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assets_obj,isLocal,return )

bool Assets_obj::isValidAudio( ::lime::media::AudioBuffer buffer){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_292_isValidAudio)
HXDLIN( 292)		return ::hx::IsNotNull( buffer );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,isValidAudio,return )

bool Assets_obj::isValidImage( ::lime::graphics::Image image){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_299_isValidImage)
HXDLIN( 299)		if (::hx::IsNotNull( image )) {
HXDLIN( 299)			return ::hx::IsNotNull( image->buffer );
            		}
            		else {
HXDLIN( 299)			return false;
            		}
HXDLIN( 299)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,isValidImage,return )

::Array< ::String > Assets_obj::list(::String type){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_303_list)
HXLINE( 304)		::Array< ::String > items = ::Array_obj< ::String >::__new(0);
HXLINE( 306)		{
HXLINE( 306)			 ::Dynamic library = ::lime::utils::Assets_obj::libraries->iterator();
HXDLIN( 306)			while(( (bool)(library->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 306)				 ::lime::utils::AssetLibrary library1 = ( ( ::lime::utils::AssetLibrary)(library->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 308)				::Array< ::String > libraryItems = library1->list(type);
HXLINE( 310)				if (::hx::IsNotNull( libraryItems )) {
HXLINE( 312)					items = items->concat(libraryItems);
            				}
            			}
            		}
HXLINE( 316)		return items;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,list,return )

 ::lime::app::Future Assets_obj::loadAsset(::String id,::String type,bool useCache){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_320_loadAsset)
HXLINE( 322)		bool _hx_tmp;
HXDLIN( 322)		if (useCache) {
HXLINE( 322)			_hx_tmp = ::lime::utils::Assets_obj::cache->enabled;
            		}
            		else {
HXLINE( 322)			_hx_tmp = false;
            		}
HXDLIN( 322)		if (_hx_tmp) {
HXLINE( 324)			::String _hx_switch_0 = type;
            			if (  (_hx_switch_0==HX_("FONT",cf,25,81,2e)) ){
HXLINE( 331)				 ::Dynamic font = ::lime::utils::Assets_obj::cache->font->get(id);
HXLINE( 333)				if (::hx::IsNotNull( font )) {
HXLINE( 335)					return ::lime::app::Future_obj::withValue(font);
            				}
HXLINE( 330)				goto _hx_goto_16;
            			}
            			if (  (_hx_switch_0==HX_("IMAGE",3b,57,57,3b)) ){
HXLINE( 339)				 ::lime::graphics::Image image = ( ( ::lime::graphics::Image)(::lime::utils::Assets_obj::cache->image->get(id)) );
HXLINE( 341)				if (::lime::utils::Assets_obj::isValidImage(image)) {
HXLINE( 343)					return ::lime::app::Future_obj::withValue(image);
            				}
HXLINE( 338)				goto _hx_goto_16;
            			}
            			if (  (_hx_switch_0==HX_("MUSIC",85,08,49,8e)) ||  (_hx_switch_0==HX_("SOUND",af,c4,ba,fe)) ){
HXLINE( 347)				 ::lime::media::AudioBuffer audio = ( ( ::lime::media::AudioBuffer)(::lime::utils::Assets_obj::cache->audio->get(id)) );
HXLINE( 349)				if (::lime::utils::Assets_obj::isValidAudio(audio)) {
HXLINE( 351)					return ::lime::app::Future_obj::withValue(audio);
            				}
HXLINE( 346)				goto _hx_goto_16;
            			}
            			if (  (_hx_switch_0==HX_("TEMPLATE",3a,78,cd,05)) ){
HXLINE( 355)				HX_STACK_DO_THROW((HX_("Not sure how to get template: ",a1,19,8c,ad) + id));
HXDLIN( 355)				goto _hx_goto_16;
            			}
            			if (  (_hx_switch_0==HX_("BINARY",01,68,8e,9f)) ||  (_hx_switch_0==HX_("TEXT",ad,94,ba,37)) ){
HXLINE( 328)				useCache = false;
HXDLIN( 328)				goto _hx_goto_16;
            			}
            			/* default */{
HXLINE( 358)				return null();
            			}
            			_hx_goto_16:;
            		}
HXLINE( 362)		::String id1 = id;
HXDLIN( 362)		int colonIndex = id1.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 362)		::String symbol_libraryName = id1.substring(0,colonIndex);
HXDLIN( 362)		::String symbol_symbolName = id1.substring((colonIndex + 1),null());
HXDLIN( 362)		 ::lime::utils::AssetLibrary symbol_library = ::lime::utils::Assets_obj::getLibrary(symbol_libraryName);
HXLINE( 364)		if (::hx::IsNotNull( symbol_library )) {
HXLINE( 366)			if (symbol_library->exists(symbol_symbolName,type)) {
HXLINE( 368)				 ::lime::app::Future future = symbol_library->loadAsset(symbol_symbolName,type);
HXLINE( 370)				bool _hx_tmp1;
HXDLIN( 370)				if (useCache) {
HXLINE( 370)					_hx_tmp1 = ::lime::utils::Assets_obj::cache->enabled;
            				}
            				else {
HXLINE( 370)					_hx_tmp1 = false;
            				}
HXDLIN( 370)				if (_hx_tmp1) {
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,::String,id,::String,type) HXARGC(1)
            					void _hx_run( ::Dynamic asset){
            						HX_STACKFRAME(&_hx_pos_df5754140b017d9f_372_loadAsset)
HXLINE( 372)						::lime::utils::Assets_obj::cache->set(id,type,asset);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 372)					future->onComplete( ::Dynamic(new _hx_Closure_0(id,type)));
            				}
HXLINE( 375)				return future;
            			}
            			else {
HXLINE( 379)				return ::lime::app::Future_obj::withError(((((HX_("There is no ",e5,bb,ab,c5) + type) + HX_(" asset with an ID of \"",95,f2,3a,0d)) + id) + HX_("\"",22,00,00,00)));
            			}
            		}
            		else {
HXLINE( 384)			return ::lime::app::Future_obj::withError(::lime::utils::Assets_obj::_hx___libraryNotFound(symbol_libraryName));
            		}
HXLINE( 364)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assets_obj,loadAsset,return )

 ::lime::app::Future Assets_obj::loadAudioBuffer(::String id,::hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_393_loadAudioBuffer)
HXDLIN( 393)		return ::lime::utils::Assets_obj::loadAsset(id,HX_("SOUND",af,c4,ba,fe),useCache);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,loadAudioBuffer,return )

 ::lime::app::Future Assets_obj::loadBytes(::String id){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_398_loadBytes)
HXDLIN( 398)		return ::lime::utils::Assets_obj::loadAsset(id,HX_("BINARY",01,68,8e,9f),false);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,loadBytes,return )

 ::lime::app::Future Assets_obj::loadFont(::String id,::hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_403_loadFont)
HXDLIN( 403)		return ::lime::utils::Assets_obj::loadAsset(id,HX_("FONT",cf,25,81,2e),useCache);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,loadFont,return )

 ::lime::app::Future Assets_obj::loadImage(::String id,::hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_408_loadImage)
HXDLIN( 408)		return ::lime::utils::Assets_obj::loadAsset(id,HX_("IMAGE",3b,57,57,3b),useCache);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,loadImage,return )

 ::lime::app::Future Assets_obj::loadLibrary(::String id){
            	HX_GC_STACKFRAME(&_hx_pos_df5754140b017d9f_412_loadLibrary)
HXLINE( 413)		 ::lime::app::Promise_lime_utils_AssetLibrary promise =  ::lime::app::Promise_lime_utils_AssetLibrary_obj::__alloc( HX_CTX );
HXLINE( 416)		 ::lime::utils::AssetLibrary library = ::lime::utils::Assets_obj::getLibrary(id);
HXLINE( 418)		if (::hx::IsNotNull( library )) {
HXLINE( 420)			return library->load();
            		}
HXLINE( 423)		::String path = id;
HXLINE( 424)		::String rootPath = null();
HXLINE( 426)		if (::lime::utils::Assets_obj::bundlePaths->exists(id)) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,::String,id, ::lime::app::Promise_lime_utils_AssetLibrary,promise) HXARGC(1)
            			void _hx_run( ::lime::utils::AssetBundle bundle){
            				HX_GC_STACKFRAME(&_hx_pos_df5754140b017d9f_429_loadLibrary)
HXLINE( 430)				if (::hx::IsNull( bundle )) {
HXLINE( 432)					promise->error(((HX_("Cannot load bundle for library \"",c5,5d,78,0c) + id) + HX_("\"",22,00,00,00)));
HXLINE( 433)					return;
            				}
HXLINE( 436)				 ::lime::utils::AssetLibrary library = ::lime::utils::AssetLibrary_obj::fromBundle(bundle);
HXLINE( 438)				if (::hx::IsNull( library )) {
HXLINE( 440)					promise->error(((HX_("Cannot open library \"",44,cc,55,e7) + id) + HX_("\"",22,00,00,00)));
            				}
            				else {
HXLINE( 444)					::lime::utils::Assets_obj::libraries->set(id,library);
HXLINE( 445)					library->onChange->add(::lime::utils::Assets_obj::onChange->dispatch_dyn(),null(),null());
HXLINE( 446)					 ::lime::app::Promise_lime_utils_AssetLibrary promise1 = promise;
HXDLIN( 446)					promise1->completeWith(library->load());
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1,::String,id, ::lime::app::Promise_lime_utils_AssetLibrary,promise) HXARGC(1)
            			void _hx_run( ::Dynamic _){
            				HX_GC_STACKFRAME(&_hx_pos_df5754140b017d9f_450_loadLibrary)
HXLINE( 450)				promise->error(((HX_("There is no asset library with an ID of \"",8b,06,e2,9a) + id) + HX_("\"",22,00,00,00)));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 428)			::lime::utils::AssetBundle_obj::loadFromFile(::lime::utils::Assets_obj::bundlePaths->get_string(id))->onComplete( ::Dynamic(new _hx_Closure_0(id,promise)))->onError( ::Dynamic(new _hx_Closure_1(id,promise)));
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2,::String,id, ::lime::app::Promise_lime_utils_AssetLibrary,promise) HXARGC(1)
            			void _hx_run( ::lime::utils::AssetManifest manifest){
            				HX_GC_STACKFRAME(&_hx_pos_df5754140b017d9f_475_loadLibrary)
HXLINE( 476)				if (::hx::IsNull( manifest )) {
HXLINE( 478)					promise->error(((HX_("Cannot parse asset manifest for library \"",cf,1e,cc,48) + id) + HX_("\"",22,00,00,00)));
HXLINE( 479)					return;
            				}
HXLINE( 482)				 ::lime::utils::AssetLibrary library = ::lime::utils::AssetLibrary_obj::fromManifest(manifest);
HXLINE( 484)				if (::hx::IsNull( library )) {
HXLINE( 486)					promise->error(((HX_("Cannot open library \"",44,cc,55,e7) + id) + HX_("\"",22,00,00,00)));
            				}
            				else {
HXLINE( 490)					::lime::utils::Assets_obj::libraries->set(id,library);
HXLINE( 491)					library->onChange->add(::lime::utils::Assets_obj::onChange->dispatch_dyn(),null(),null());
HXLINE( 492)					 ::lime::app::Promise_lime_utils_AssetLibrary promise1 = promise;
HXDLIN( 492)					promise1->completeWith(library->load());
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3,::String,id, ::lime::app::Promise_lime_utils_AssetLibrary,promise) HXARGC(1)
            			void _hx_run( ::Dynamic _){
            				HX_GC_STACKFRAME(&_hx_pos_df5754140b017d9f_496_loadLibrary)
HXLINE( 496)				promise->error(((HX_("There is no asset library with an ID of \"",8b,06,e2,9a) + id) + HX_("\"",22,00,00,00)));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 455)			if (::lime::utils::Assets_obj::libraryPaths->exists(id)) {
HXLINE( 457)				path = ::lime::utils::Assets_obj::libraryPaths->get_string(id);
HXLINE( 458)				rootPath = ::haxe::io::Path_obj::directory(path);
            			}
            			else {
HXLINE( 462)				if (::StringTools_obj::endsWith(path,HX_(".bundle",30,4a,b8,4e))) {
HXLINE( 464)					rootPath = path;
HXLINE( 465)					path = (path + HX_("/library.json",2a,a7,07,47));
            				}
            				else {
HXLINE( 469)					rootPath = ::haxe::io::Path_obj::directory(path);
            				}
HXLINE( 471)				path = ::lime::utils::Assets_obj::_hx___cacheBreak(path);
            			}
HXLINE( 474)			::lime::utils::AssetManifest_obj::loadFromFile(path,rootPath)->onComplete( ::Dynamic(new _hx_Closure_2(id,promise)))->onError( ::Dynamic(new _hx_Closure_3(id,promise)));
            		}
HXLINE( 501)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,loadLibrary,return )

 ::lime::app::Future Assets_obj::loadText(::String id){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_506_loadText)
HXDLIN( 506)		return ::lime::utils::Assets_obj::loadAsset(id,HX_("TEXT",ad,94,ba,37),false);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,loadText,return )

void Assets_obj::registerLibrary(::String name, ::lime::utils::AssetLibrary library){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_510_registerLibrary)
HXLINE( 511)		bool _hx_tmp;
HXDLIN( 511)		if (::hx::IsNotNull( name )) {
HXLINE( 511)			_hx_tmp = (name == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 511)			_hx_tmp = true;
            		}
HXDLIN( 511)		if (_hx_tmp) {
HXLINE( 513)			name = HX_("default",c1,d8,c3,9b);
            		}
HXLINE( 516)		if (::lime::utils::Assets_obj::libraries->exists(name)) {
HXLINE( 518)			if (::hx::IsInstanceEq( ::lime::utils::Assets_obj::libraries->get(name),library )) {
HXLINE( 520)				return;
            			}
            			else {
HXLINE( 524)				::lime::utils::Assets_obj::unloadLibrary(name);
            			}
            		}
HXLINE( 528)		if (::hx::IsNotNull( library )) {
HXLINE( 530)			library->onChange->add(::lime::utils::Assets_obj::library_onChange_dyn(),null(),null());
            		}
HXLINE( 533)		::lime::utils::Assets_obj::libraries->set(name,library);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,registerLibrary,(void))

void Assets_obj::unloadLibrary(::String name){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_538_unloadLibrary)
HXDLIN( 538)		::lime::utils::Assets_obj::removeLibrary(name,true);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,unloadLibrary,(void))

void Assets_obj::removeLibrary(::String name,::hx::Null< bool >  __o_unload){
            		bool unload = __o_unload.Default(true);
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_542_removeLibrary)
HXLINE( 544)		bool _hx_tmp;
HXDLIN( 544)		if (::hx::IsNotNull( name )) {
HXLINE( 544)			_hx_tmp = (name == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 544)			_hx_tmp = true;
            		}
HXDLIN( 544)		if (_hx_tmp) {
HXLINE( 546)			name = HX_("default",c1,d8,c3,9b);
            		}
HXLINE( 549)		 ::lime::utils::AssetLibrary library = ( ( ::lime::utils::AssetLibrary)(::lime::utils::Assets_obj::libraries->get(name)) );
HXLINE( 551)		if (::hx::IsNotNull( library )) {
HXLINE( 553)			::lime::utils::Assets_obj::cache->clear((name + HX_(":",3a,00,00,00)));
HXLINE( 554)			library->onChange->remove(::lime::utils::Assets_obj::library_onChange_dyn());
HXLINE( 555)			if (unload) {
HXLINE( 557)				library->unload();
            			}
            		}
HXLINE( 561)		::lime::utils::Assets_obj::libraries->remove(name);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,removeLibrary,(void))

::String Assets_obj::_hx___cacheBreak(::String path){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_581___cacheBreak)
HXDLIN( 581)		return path;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,_hx___cacheBreak,return )

::String Assets_obj::_hx___libraryNotFound(::String name){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_585___libraryNotFound)
HXLINE( 586)		bool _hx_tmp;
HXDLIN( 586)		if (::hx::IsNotNull( name )) {
HXLINE( 586)			_hx_tmp = (name == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 586)			_hx_tmp = true;
            		}
HXDLIN( 586)		if (_hx_tmp) {
HXLINE( 588)			name = HX_("default",c1,d8,c3,9b);
            		}
HXLINE( 591)		bool _hx_tmp1;
HXDLIN( 591)		bool _hx_tmp2;
HXDLIN( 591)		if (::hx::IsNotNull( ::lime::app::Application_obj::current )) {
HXLINE( 591)			_hx_tmp2 = ::hx::IsNotNull( ::lime::app::Application_obj::current->_hx___preloader );
            		}
            		else {
HXLINE( 591)			_hx_tmp2 = false;
            		}
HXDLIN( 591)		if (_hx_tmp2) {
HXLINE( 591)			_hx_tmp1 = !(::lime::app::Application_obj::current->_hx___preloader->complete);
            		}
            		else {
HXLINE( 591)			_hx_tmp1 = false;
            		}
HXDLIN( 591)		if (_hx_tmp1) {
HXLINE( 593)			return ((HX_("There is no asset library named \"",a1,83,5f,51) + name) + HX_("\", or it is not yet preloaded",db,ac,d4,2f));
            		}
            		else {
HXLINE( 597)			return ((HX_("There is no asset library named \"",a1,83,5f,51) + name) + HX_("\"",22,00,00,00));
            		}
HXLINE( 591)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,_hx___libraryNotFound,return )

void Assets_obj::library_onChange(){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_603_library_onChange)
HXLINE( 604)		::lime::utils::Assets_obj::cache->clear(null());
HXLINE( 605)		::lime::utils::Assets_obj::onChange->dispatch();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Assets_obj,library_onChange,(void))


Assets_obj::Assets_obj()
{
}

bool Assets_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { outValue = list_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { outValue = ( cache ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { outValue = exists_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getFont") ) { outValue = getFont_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPath") ) { outValue = getPath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getText") ) { outValue = getText_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isLocal") ) { outValue = isLocal_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onChange") ) { outValue = ( onChange ); return true; }
		if (HX_FIELD_EQ(inName,"getAsset") ) { outValue = getAsset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBytes") ) { outValue = getBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getImage") ) { outValue = getImage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadFont") ) { outValue = loadFont_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadText") ) { outValue = loadText_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"libraries") ) { outValue = ( libraries ); return true; }
		if (HX_FIELD_EQ(inName,"loadAsset") ) { outValue = loadAsset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadBytes") ) { outValue = loadBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadImage") ) { outValue = loadImage_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getLibrary") ) { outValue = getLibrary_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hasLibrary") ) { outValue = hasLibrary_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bundlePaths") ) { outValue = ( bundlePaths ); return true; }
		if (HX_FIELD_EQ(inName,"loadLibrary") ) { outValue = loadLibrary_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"libraryPaths") ) { outValue = ( libraryPaths ); return true; }
		if (HX_FIELD_EQ(inName,"isValidAudio") ) { outValue = isValidAudio_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isValidImage") ) { outValue = isValidImage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__cacheBreak") ) { outValue = _hx___cacheBreak_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"unloadLibrary") ) { outValue = unloadLibrary_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeLibrary") ) { outValue = removeLibrary_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getAudioBuffer") ) { outValue = getAudioBuffer_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"loadAudioBuffer") ) { outValue = loadAudioBuffer_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"registerLibrary") ) { outValue = registerLibrary_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"library_onChange") ) { outValue = library_onChange_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__libraryNotFound") ) { outValue = _hx___libraryNotFound_dyn(); return true; }
	}
	return false;
}

bool Assets_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { cache=ioValue.Cast<  ::lime::utils::AssetCache >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onChange") ) { onChange=ioValue.Cast<  ::lime::app::_Event_Void_Void >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"libraries") ) { libraries=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bundlePaths") ) { bundlePaths=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"libraryPaths") ) { libraryPaths=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Assets_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Assets_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::lime::utils::AssetCache */ ,(void *) &Assets_obj::cache,HX_("cache",42,9a,14,41)},
	{::hx::fsObject /*  ::lime::app::_Event_Void_Void */ ,(void *) &Assets_obj::onChange,HX_("onChange",ef,87,1f,97)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Assets_obj::bundlePaths,HX_("bundlePaths",4c,90,3b,70)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Assets_obj::libraries,HX_("libraries",19,50,f8,18)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Assets_obj::libraryPaths,HX_("libraryPaths",33,26,5e,06)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Assets_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Assets_obj::cache,"cache");
	HX_MARK_MEMBER_NAME(Assets_obj::onChange,"onChange");
	HX_MARK_MEMBER_NAME(Assets_obj::bundlePaths,"bundlePaths");
	HX_MARK_MEMBER_NAME(Assets_obj::libraries,"libraries");
	HX_MARK_MEMBER_NAME(Assets_obj::libraryPaths,"libraryPaths");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Assets_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Assets_obj::cache,"cache");
	HX_VISIT_MEMBER_NAME(Assets_obj::onChange,"onChange");
	HX_VISIT_MEMBER_NAME(Assets_obj::bundlePaths,"bundlePaths");
	HX_VISIT_MEMBER_NAME(Assets_obj::libraries,"libraries");
	HX_VISIT_MEMBER_NAME(Assets_obj::libraryPaths,"libraryPaths");
};

#endif

::hx::Class Assets_obj::__mClass;

static ::String Assets_obj_sStaticFields[] = {
	HX_("cache",42,9a,14,41),
	HX_("onChange",ef,87,1f,97),
	HX_("bundlePaths",4c,90,3b,70),
	HX_("libraries",19,50,f8,18),
	HX_("libraryPaths",33,26,5e,06),
	HX_("exists",dc,1d,e0,bf),
	HX_("getAsset",7a,79,10,86),
	HX_("getAudioBuffer",80,41,e3,26),
	HX_("getBytes",f5,17,6f,1d),
	HX_("getFont",85,0d,43,16),
	HX_("getImage",e5,2e,40,1d),
	HX_("getLibrary",05,ad,d1,8e),
	HX_("getPath",5b,95,d4,1c),
	HX_("getText",63,7c,7c,1f),
	HX_("hasLibrary",c1,0e,24,ca),
	HX_("isLocal",21,6d,76,15),
	HX_("isValidAudio",c4,0a,df,47),
	HX_("isValidImage",49,b1,c7,dd),
	HX_("list",5e,1c,b3,47),
	HX_("loadAsset",ea,b5,70,41),
	HX_("loadAudioBuffer",f0,71,7c,e3),
	HX_("loadBytes",65,54,cf,d8),
	HX_("loadFont",15,2f,60,b4),
	HX_("loadImage",55,6b,a0,d8),
	HX_("loadLibrary",75,e5,0d,10),
	HX_("loadText",f3,9d,99,bd),
	HX_("registerLibrary",d8,8a,84,f2),
	HX_("unloadLibrary",bc,5b,48,31),
	HX_("removeLibrary",17,83,2a,18),
	HX_("__cacheBreak",3d,06,38,34),
	HX_("__libraryNotFound",2a,db,69,c9),
	HX_("library_onChange",f3,20,14,c8),
	::String(null())
};

void Assets_obj::__register()
{
	Assets_obj _hx_dummy;
	Assets_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("lime.utils.Assets",39,6e,7e,b0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Assets_obj::__GetStatic;
	__mClass->mSetStaticField = &Assets_obj::__SetStatic;
	__mClass->mMarkFunc = Assets_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Assets_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Assets_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Assets_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Assets_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Assets_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Assets_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_df5754140b017d9f_39_boot)
HXDLIN(  39)		cache =  ::lime::utils::AssetCache_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_df5754140b017d9f_40_boot)
HXDLIN(  40)		onChange =  ::lime::app::_Event_Void_Void_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_df5754140b017d9f_42_boot)
HXDLIN(  42)		bundlePaths =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_df5754140b017d9f_43_boot)
HXDLIN(  43)		libraries =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_df5754140b017d9f_44_boot)
HXDLIN(  44)		libraryPaths =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace lime
} // end namespace utils
