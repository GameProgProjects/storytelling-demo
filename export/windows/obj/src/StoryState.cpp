// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_StoryState
#include <StoryState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_NumTween
#include <flixel/tweens/misc/NumTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f914537fa912d0db_13_new,"StoryState","new",0x3a06acee,"StoryState.new","StoryState.hx",13,0xd6eeca42)
HX_LOCAL_STACK_FRAME(_hx_pos_f914537fa912d0db_50_create,"StoryState","create",0xa66a572e,"StoryState.create","StoryState.hx",50,0xd6eeca42)
HX_LOCAL_STACK_FRAME(_hx_pos_f914537fa912d0db_21_create,"StoryState","create",0xa66a572e,"StoryState.create","StoryState.hx",21,0xd6eeca42)
HX_LOCAL_STACK_FRAME(_hx_pos_f914537fa912d0db_54_nextPage,"StoryState","nextPage",0xa13b6194,"StoryState.nextPage","StoryState.hx",54,0xd6eeca42)
HX_LOCAL_STACK_FRAME(_hx_pos_f914537fa912d0db_64_nextPage,"StoryState","nextPage",0xa13b6194,"StoryState.nextPage","StoryState.hx",64,0xd6eeca42)
HX_LOCAL_STACK_FRAME(_hx_pos_f914537fa912d0db_70_nextPage,"StoryState","nextPage",0xa13b6194,"StoryState.nextPage","StoryState.hx",70,0xd6eeca42)
HX_LOCAL_STACK_FRAME(_hx_pos_f914537fa912d0db_76_update,"StoryState","update",0xb160763b,"StoryState.update","StoryState.hx",76,0xd6eeca42)

void StoryState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_f914537fa912d0db_13_new)
HXLINE(  16)		this->current = 0;
HXLINE(  13)		super::__construct();
            	}

Dynamic StoryState_obj::__CreateEmpty() { return new StoryState_obj; }

void *StoryState_obj::_hx_vtable = 0;

Dynamic StoryState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< StoryState_obj > _hx_result = new StoryState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool StoryState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x563293a6) {
			if (inClassId<=(int)0x0e528720) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0e528720;
			} else {
				return inClassId==(int)0x563293a6;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void StoryState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::StoryState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer _){
            			HX_GC_STACKFRAME(&_hx_pos_f914537fa912d0db_50_create)
HXLINE(  50)			_gthis->nextPage();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_f914537fa912d0db_21_create)
HXDLIN(  21)		 ::StoryState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  22)		this->super::create();
HXLINE(  25)		this->pages = ::Array_obj< ::Dynamic>::__new(3)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("img",03,0c,50,00),HX_("assets/story/scene1.webp",df,e4,bd,6e))
            			->setFixed(1,HX_("text",ad,cc,f9,4c),HX_("Year 2089. The world stands on the edge of ruin.",42,11,40,4d))))->init(1, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("img",03,0c,50,00),HX_("assets/story/scene2.webp",3e,41,19,d5))
            			->setFixed(1,HX_("text",ad,cc,f9,4c),HX_("An unknown enemy has invaded every city.",aa,67,1d,a0))))->init(2, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("img",03,0c,50,00),HX_("assets/story/scene3.webp",9d,9d,74,3b))
            			->setFixed(1,HX_("text",ad,cc,f9,4c),HX_W(u"You are the last defender. Humanity\u2019s hope rests on your aim.",7916,1833))));
HXLINE(  32)		this->bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null())->loadGraphic( ::Dynamic(this->pages->__get(0)->__Field(HX_("img",03,0c,50,00),::hx::paccDynamic)),null(),null(),null(),null(),null());
HXLINE(  33)		{
HXLINE(  33)			 ::flixel::math::FlxBasePoint this1 = this->bg->scale;
HXDLIN(  33)			int x = ::flixel::FlxG_obj::width;
HXDLIN(  33)			Float x1 = (( (Float)(x) ) / this->bg->get_width());
HXDLIN(  33)			int y = ::flixel::FlxG_obj::height;
HXDLIN(  33)			Float y1 = (( (Float)(y) ) / this->bg->get_height());
HXDLIN(  33)			this1->set_x(x1);
HXDLIN(  33)			this1->set_y(y1);
            		}
HXLINE(  34)		this->add(this->bg);
HXLINE(  37)		this->caption =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,(::flixel::FlxG_obj::height - 60),::flixel::FlxG_obj::width,( (::String)(this->pages->__get(0)->__Field(HX_("text",ad,cc,f9,4c),::hx::paccDynamic)) ),null(),null());
HXLINE(  38)		this->caption->set_size(16);
HXLINE(  39)		this->caption->set_alignment(HX_("center",d5,25,db,05));
HXLINE(  40)		{
HXLINE(  40)			 ::flixel::text::FlxText _this = this->caption;
HXDLIN(  40)			_this->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::SHADOW_dyn());
HXDLIN(  40)			_this->set_borderColor(-16777216);
HXDLIN(  40)			_this->set_borderSize(( (Float)(2) ));
HXDLIN(  40)			_this->set_borderQuality(( (Float)(1) ));
            		}
HXLINE(  41)		this->add(this->caption);
HXLINE(  44)		::flixel::FlxG_obj::sound->playMusic(HX_("assets/music/intro_theme.mp3",42,05,3b,00),((Float)0.8),true,null());
HXLINE(  47)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE(  50)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(4, ::Dynamic(new _hx_Closure_0(_gthis)),0);
            	}


void StoryState_obj::nextPage(){
            	HX_GC_STACKFRAME(&_hx_pos_f914537fa912d0db_54_nextPage)
HXDLIN(  54)		 ::StoryState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  55)		this->current++;
HXLINE(  57)		if ((this->current < this->pages->length)) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::StoryState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer _){
            				HX_GC_STACKFRAME(&_hx_pos_f914537fa912d0db_64_nextPage)
HXLINE(  64)				_gthis->nextPage();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  59)			this->bg->loadGraphic( ::Dynamic(this->pages->__get(this->current)->__Field(HX_("img",03,0c,50,00),::hx::paccDynamic)),null(),null(),null(),null(),null());
HXLINE(  60)			{
HXLINE(  60)				 ::flixel::math::FlxBasePoint this1 = this->bg->scale;
HXDLIN(  60)				int x = ::flixel::FlxG_obj::width;
HXDLIN(  60)				Float x1 = (( (Float)(x) ) / this->bg->get_width());
HXDLIN(  60)				int y = ::flixel::FlxG_obj::height;
HXDLIN(  60)				Float y1 = (( (Float)(y) ) / this->bg->get_height());
HXDLIN(  60)				this1->set_x(x1);
HXDLIN(  60)				this1->set_y(y1);
            			}
HXLINE(  61)			this->caption->set_text(( (::String)(this->pages->__get(this->current)->__Field(HX_("text",ad,cc,f9,4c),::hx::paccDynamic)) ));
HXLINE(  64)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(4, ::Dynamic(new _hx_Closure_0(_gthis)),0);
            		}
            		else {
HXLINE(  69)			{
HXLINE(  69)				 ::flixel::sound::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(  69)				 ::Dynamic onComplete = null();
HXDLIN(  69)				if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE(  69)					_this->fadeTween->cancel();
            				}
HXDLIN(  69)				_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(_this->_volume,( (Float)(0) ),1, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            			}
HXLINE(  70)			{
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(0)
            				 ::flixel::FlxState _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_f914537fa912d0db_70_nextPage)
HXLINE(  70)					return  ::PlayState_obj::__alloc( HX_CTX );
            				}
            				HX_END_LOCAL_FUNC0(return)

            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_f914537fa912d0db_70_nextPage)
HXLINE(  70)					if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE(  70)						::flixel::FlxG_obj::game->_nextState = nextState;
            					}
            					else {
HXLINE(  70)						::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/FlxG.hx",36,68,17,8e),385,HX_("flixel.FlxG",07,ab,3b,0e),HX_("switchState",7d,07,8b,77)));
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE(  70)				 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_1()));
HXDLIN(  70)				 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN(  70)				::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_2(nextState,stateOnCall)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(StoryState_obj,nextPage,(void))

void StoryState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_f914537fa912d0db_76_update)
HXLINE(  77)		this->super::update(elapsed);
HXLINE(  80)		bool _hx_tmp;
HXDLIN(  80)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  80)		if (!(_this->keyManager->checkStatusUnsafe(32,_this->status))) {
HXLINE(  80)			_hx_tmp = (::flixel::FlxG_obj::mouse->_leftButton->current == 2);
            		}
            		else {
HXLINE(  80)			_hx_tmp = true;
            		}
HXDLIN(  80)		if (_hx_tmp) {
HXLINE(  82)			this->nextPage();
            		}
            	}



::hx::ObjectPtr< StoryState_obj > StoryState_obj::__new() {
	::hx::ObjectPtr< StoryState_obj > __this = new StoryState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< StoryState_obj > StoryState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	StoryState_obj *__this = (StoryState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(StoryState_obj), true, "StoryState"));
	*(void **)__this = StoryState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

StoryState_obj::StoryState_obj()
{
}

void StoryState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StoryState);
	HX_MARK_MEMBER_NAME(pages,"pages");
	HX_MARK_MEMBER_NAME(current,"current");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(caption,"caption");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void StoryState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pages,"pages");
	HX_VISIT_MEMBER_NAME(current,"current");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(caption,"caption");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val StoryState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pages") ) { return ::hx::Val( pages ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"current") ) { return ::hx::Val( current ); }
		if (HX_FIELD_EQ(inName,"caption") ) { return ::hx::Val( caption ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"nextPage") ) { return ::hx::Val( nextPage_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val StoryState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pages") ) { pages=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"current") ) { current=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"caption") ) { caption=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void StoryState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("pages",44,2b,4d,bd));
	outFields->push(HX_("current",39,9c,e3,cb));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("caption",e6,b2,48,a7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo StoryState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(StoryState_obj,pages),HX_("pages",44,2b,4d,bd)},
	{::hx::fsInt,(int)offsetof(StoryState_obj,current),HX_("current",39,9c,e3,cb)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(StoryState_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(StoryState_obj,caption),HX_("caption",e6,b2,48,a7)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *StoryState_obj_sStaticStorageInfo = 0;
#endif

static ::String StoryState_obj_sMemberFields[] = {
	HX_("pages",44,2b,4d,bd),
	HX_("current",39,9c,e3,cb),
	HX_("bg",c5,55,00,00),
	HX_("caption",e6,b2,48,a7),
	HX_("create",fc,66,0f,7c),
	HX_("nextPage",e2,80,1e,f6),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class StoryState_obj::__mClass;

void StoryState_obj::__register()
{
	StoryState_obj _hx_dummy;
	StoryState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("StoryState",fc,5d,5e,b7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(StoryState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< StoryState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StoryState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StoryState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

