// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeWindow
#include <lime/_internal/backend/native/NativeWindow.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app__Event_String_Void
#include <lime/app/_Event_String_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void
#include <lime/app/_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_system_Clipboard
#include <lime/system/Clipboard.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_ui__KeyModifier_KeyModifier_Impl_
#include <lime/ui/_KeyModifier/KeyModifier_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_RangeError
#include <openfl/errors/RangeError.h>
#endif
#ifndef INCLUDED_openfl_errors_TypeError
#include <openfl/errors/TypeError.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_FocusEvent
#include <openfl/events/FocusEvent.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_text_StyleSheet
#include <openfl/text/StyleSheet.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_text_TextLineMetrics
#include <openfl/text/TextLineMetrics.h>
#endif
#ifndef INCLUDED_openfl_text__internal_GlyphPosition
#include <openfl/text/_internal/GlyphPosition.h>
#endif
#ifndef INCLUDED_openfl_text__internal_HTMLParser
#include <openfl/text/_internal/HTMLParser.h>
#endif
#ifndef INCLUDED_openfl_text__internal_TextEngine
#include <openfl/text/_internal/TextEngine.h>
#endif
#ifndef INCLUDED_openfl_text__internal_TextFormatRange
#include <openfl/text/_internal/TextFormatRange.h>
#endif
#ifndef INCLUDED_openfl_text__internal_TextLayoutGroup
#include <openfl/text/_internal/TextLayoutGroup.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_135_new,"openfl.text.TextField","new",0xbd7676bc,"openfl.text.TextField.new","openfl/text/TextField.hx",135,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_893_appendText,"openfl.text.TextField","appendText",0xaa44eccb,"openfl.text.TextField.appendText","openfl/text/TextField.hx",893,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_919_getCharBoundaries,"openfl.text.TextField","getCharBoundaries",0xf44814d0,"openfl.text.TextField.getCharBoundaries","openfl/text/TextField.hx",919,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_945_getCharIndexAtPoint,"openfl.text.TextField","getCharIndexAtPoint",0x758b0c73,"openfl.text.TextField.getCharIndexAtPoint","openfl/text/TextField.hx",945,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_995_getFirstCharInParagraph,"openfl.text.TextField","getFirstCharInParagraph",0xe06fd955,"openfl.text.TextField.getFirstCharInParagraph","openfl/text/TextField.hx",995,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1044_getLineIndexAtPoint,"openfl.text.TextField","getLineIndexAtPoint",0x633efa91,"openfl.text.TextField.getLineIndexAtPoint","openfl/text/TextField.hx",1044,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1076_getLineIndexOfChar,"openfl.text.TextField","getLineIndexOfChar",0xcab049d9,"openfl.text.TextField.getLineIndexOfChar","openfl/text/TextField.hx",1076,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1100_getLineLength,"openfl.text.TextField","getLineLength",0x953e9d8c,"openfl.text.TextField.getLineLength","openfl/text/TextField.hx",1100,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1133_getLineMetrics,"openfl.text.TextField","getLineMetrics",0xa6c52add,"openfl.text.TextField.getLineMetrics","openfl/text/TextField.hx",1133,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1164_getLineOffset,"openfl.text.TextField","getLineOffset",0x5676a039,"openfl.text.TextField.getLineOffset","openfl/text/TextField.hx",1164,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1190_getLineText,"openfl.text.TextField","getLineText",0xb8113fd3,"openfl.text.TextField.getLineText","openfl/text/TextField.hx",1190,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1229_getParagraphLength,"openfl.text.TextField","getParagraphLength",0xed64f022,"openfl.text.TextField.getParagraphLength","openfl/text/TextField.hx",1229,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1268_getTextFormat,"openfl.text.TextField","getTextFormat",0x560e1d56,"openfl.text.TextField.getTextFormat","openfl/text/TextField.hx",1268,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1364_replaceSelectedText,"openfl.text.TextField","replaceSelectedText",0x86221d58,"openfl.text.TextField.replaceSelectedText","openfl/text/TextField.hx",1364,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1385_replaceText,"openfl.text.TextField","replaceText",0x698fcd5d,"openfl.text.TextField.replaceText","openfl/text/TextField.hx",1385,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1404_setSelection,"openfl.text.TextField","setSelection",0xa586666e,"openfl.text.TextField.setSelection","openfl/text/TextField.hx",1404,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1470_setTextFormat,"openfl.text.TextField","setTextFormat",0x9b13ff62,"openfl.text.TextField.setTextFormat","openfl/text/TextField.hx",1470,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1642___setStageReference,"openfl.text.TextField","__setStageReference",0xbfd403ab,"openfl.text.TextField.__setStageReference","openfl/text/TextField.hx",1642,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1653___allowMouseFocus,"openfl.text.TextField","__allowMouseFocus",0x70182198,"openfl.text.TextField.__allowMouseFocus","openfl/text/TextField.hx",1653,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1658___caretBeginningOfLine,"openfl.text.TextField","__caretBeginningOfLine",0x4c500c69,"openfl.text.TextField.__caretBeginningOfLine","openfl/text/TextField.hx",1658,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1662___caretBeginningOfNextLine,"openfl.text.TextField","__caretBeginningOfNextLine",0x9988917c,"openfl.text.TextField.__caretBeginningOfNextLine","openfl/text/TextField.hx",1662,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1676___caretBeginningOfPreviousLine,"openfl.text.TextField","__caretBeginningOfPreviousLine",0x6f5ad940,"openfl.text.TextField.__caretBeginningOfPreviousLine","openfl/text/TextField.hx",1676,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1695___caretEndOfLine,"openfl.text.TextField","__caretEndOfLine",0xeca90427,"openfl.text.TextField.__caretEndOfLine","openfl/text/TextField.hx",1695,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1710___caretNextCharacter,"openfl.text.TextField","__caretNextCharacter",0xafbbedf7,"openfl.text.TextField.__caretNextCharacter","openfl/text/TextField.hx",1710,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1717___caretNextLine,"openfl.text.TextField","__caretNextLine",0xd85e2866,"openfl.text.TextField.__caretNextLine","openfl/text/TextField.hx",1717,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1728___caretPreviousCharacter,"openfl.text.TextField","__caretPreviousCharacter",0x656722b3,"openfl.text.TextField.__caretPreviousCharacter","openfl/text/TextField.hx",1728,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1735___caretPreviousLine,"openfl.text.TextField","__caretPreviousLine",0x13772d2a,"openfl.text.TextField.__caretPreviousLine","openfl/text/TextField.hx",1735,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1746___disableInput,"openfl.text.TextField","__disableInput",0xd160e346,"openfl.text.TextField.__disableInput","openfl/text/TextField.hx",1746,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1760___dispatch,"openfl.text.TextField","__dispatch",0x10db5efe,"openfl.text.TextField.__dispatch","openfl/text/TextField.hx",1760,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1790___enableInput,"openfl.text.TextField","__enableInput",0x9681fcc3,"openfl.text.TextField.__enableInput","openfl/text/TextField.hx",1790,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1842___getAdvance,"openfl.text.TextField","__getAdvance",0x6a1cb7d0,"openfl.text.TextField.__getAdvance","openfl/text/TextField.hx",1842,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1847___getBounds,"openfl.text.TextField","__getBounds",0x189abae7,"openfl.text.TextField.__getBounds","openfl/text/TextField.hx",1847,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1861___getCharBoundaries,"openfl.text.TextField","__getCharBoundaries",0x097fccb0,"openfl.text.TextField.__getCharBoundaries","openfl/text/TextField.hx",1861,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1893___getCharIndexOnDifferentLine,"openfl.text.TextField","__getCharIndexOnDifferentLine",0x6afd9f64,"openfl.text.TextField.__getCharIndexOnDifferentLine","openfl/text/TextField.hx",1893,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1930___getCursor,"openfl.text.TextField","__getCursor",0xf165c348,"openfl.text.TextField.__getCursor","openfl/text/TextField.hx",1930,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1946___getGroup,"openfl.text.TextField","__getGroup",0xec43530d,"openfl.text.TextField.__getGroup","openfl/text/TextField.hx",1946,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1996___getPosition,"openfl.text.TextField","__getPosition",0xfe83559b,"openfl.text.TextField.__getPosition","openfl/text/TextField.hx",1996,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2027___getPositionByIdentifier,"openfl.text.TextField","__getPositionByIdentifier",0xfd93935b,"openfl.text.TextField.__getPositionByIdentifier","openfl/text/TextField.hx",2027,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2055___getOppositeIdentifierBound,"openfl.text.TextField","__getOppositeIdentifierBound",0xdbd4313c,"openfl.text.TextField.__getOppositeIdentifierBound","openfl/text/TextField.hx",2055,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2086___hitTest,"openfl.text.TextField","__hitTest",0x83278481,"openfl.text.TextField.__hitTest","openfl/text/TextField.hx",2086,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2110___hitTestMask,"openfl.text.TextField","__hitTestMask",0x0119c60d,"openfl.text.TextField.__hitTestMask","openfl/text/TextField.hx",2110,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2126___replaceSelectedText,"openfl.text.TextField","__replaceSelectedText",0x229f8d38,"openfl.text.TextField.__replaceSelectedText","openfl/text/TextField.hx",2126,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2149___replaceText,"openfl.text.TextField","__replaceText",0x6f2a5d3d,"openfl.text.TextField.__replaceText","openfl/text/TextField.hx",2149,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2280___startCursorTimer,"openfl.text.TextField","__startCursorTimer",0xacba2811,"openfl.text.TextField.__startCursorTimer","openfl/text/TextField.hx",2280,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2298___startTextInput,"openfl.text.TextField","__startTextInput",0x3a7d3e9f,"openfl.text.TextField.__startTextInput","openfl/text/TextField.hx",2298,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2314___stopCursorTimer,"openfl.text.TextField","__stopCursorTimer",0x8f135c69,"openfl.text.TextField.__stopCursorTimer","openfl/text/TextField.hx",2314,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2330___stopTextInput,"openfl.text.TextField","__stopTextInput",0x6c7c2cf7,"openfl.text.TextField.__stopTextInput","openfl/text/TextField.hx",2330,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2341___updateLayout,"openfl.text.TextField","__updateLayout",0x2d3b57d7,"openfl.text.TextField.__updateLayout","openfl/text/TextField.hx",2341,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2372___updateMouseDrag,"openfl.text.TextField","__updateMouseDrag",0x2a5075ac,"openfl.text.TextField.__updateMouseDrag","openfl/text/TextField.hx",2372,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2404___updateScrollH,"openfl.text.TextField","__updateScrollH",0x4ea991ce,"openfl.text.TextField.__updateScrollH","openfl/text/TextField.hx",2404,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2478___updateScrollV,"openfl.text.TextField","__updateScrollV",0x4ea991dc,"openfl.text.TextField.__updateScrollV","openfl/text/TextField.hx",2478,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2540___updateText,"openfl.text.TextField","__updateText",0x315de09a,"openfl.text.TextField.__updateText","openfl/text/TextField.hx",2540,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2600___updateTransforms,"openfl.text.TextField","__updateTransforms",0x79c7d534,"openfl.text.TextField.__updateTransforms","openfl/text/TextField.hx",2600,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2608_get_antiAliasType,"openfl.text.TextField","get_antiAliasType",0x57115f1b,"openfl.text.TextField.get_antiAliasType","openfl/text/TextField.hx",2608,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2612_set_antiAliasType,"openfl.text.TextField","set_antiAliasType",0x7a7f3727,"openfl.text.TextField.set_antiAliasType","openfl/text/TextField.hx",2612,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2623_get_autoSize,"openfl.text.TextField","get_autoSize",0xd7aef1fd,"openfl.text.TextField.get_autoSize","openfl/text/TextField.hx",2623,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2627_set_autoSize,"openfl.text.TextField","set_autoSize",0xeca81571,"openfl.text.TextField.set_autoSize","openfl/text/TextField.hx",2627,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2640_get_background,"openfl.text.TextField","get_background",0x50119b5b,"openfl.text.TextField.get_background","openfl/text/TextField.hx",2640,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2644_set_background,"openfl.text.TextField","set_background",0x703183cf,"openfl.text.TextField.set_background","openfl/text/TextField.hx",2644,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2656_get_backgroundColor,"openfl.text.TextField","get_backgroundColor",0x63403c08,"openfl.text.TextField.get_backgroundColor","openfl/text/TextField.hx",2656,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2660_set_backgroundColor,"openfl.text.TextField","set_backgroundColor",0x9fdd2f14,"openfl.text.TextField.set_backgroundColor","openfl/text/TextField.hx",2660,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2672_get_border,"openfl.text.TextField","get_border",0xa3e0d9d9,"openfl.text.TextField.get_border","openfl/text/TextField.hx",2672,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2676_set_border,"openfl.text.TextField","set_border",0xa75e784d,"openfl.text.TextField.set_border","openfl/text/TextField.hx",2676,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2688_get_borderColor,"openfl.text.TextField","get_borderColor",0x6267b4ca,"openfl.text.TextField.get_borderColor","openfl/text/TextField.hx",2688,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2692_set_borderColor,"openfl.text.TextField","set_borderColor",0x5e3331d6,"openfl.text.TextField.set_borderColor","openfl/text/TextField.hx",2692,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2703_get_bottomScrollV,"openfl.text.TextField","get_bottomScrollV",0xfa9e92b1,"openfl.text.TextField.get_bottomScrollV","openfl/text/TextField.hx",2703,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2711_get_caretIndex,"openfl.text.TextField","get_caretIndex",0x074fbdfc,"openfl.text.TextField.get_caretIndex","openfl/text/TextField.hx",2711,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2716_get_defaultTextFormat,"openfl.text.TextField","get_defaultTextFormat",0x83063818,"openfl.text.TextField.get_defaultTextFormat","openfl/text/TextField.hx",2716,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2720_set_defaultTextFormat,"openfl.text.TextField","set_defaultTextFormat",0xd70f0624,"openfl.text.TextField.set_defaultTextFormat","openfl/text/TextField.hx",2720,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2732_get_displayAsPassword,"openfl.text.TextField","get_displayAsPassword",0x62bc3b42,"openfl.text.TextField.get_displayAsPassword","openfl/text/TextField.hx",2732,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2736_set_displayAsPassword,"openfl.text.TextField","set_displayAsPassword",0xb6c5094e,"openfl.text.TextField.set_displayAsPassword","openfl/text/TextField.hx",2736,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2752_get_embedFonts,"openfl.text.TextField","get_embedFonts",0xb8d5ce98,"openfl.text.TextField.get_embedFonts","openfl/text/TextField.hx",2752,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2764_set_embedFonts,"openfl.text.TextField","set_embedFonts",0xd8f5b70c,"openfl.text.TextField.set_embedFonts","openfl/text/TextField.hx",2764,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2769_get_gridFitType,"openfl.text.TextField","get_gridFitType",0x3fa66af8,"openfl.text.TextField.get_gridFitType","openfl/text/TextField.hx",2769,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2781_set_gridFitType,"openfl.text.TextField","set_gridFitType",0x3b71e804,"openfl.text.TextField.set_gridFitType","openfl/text/TextField.hx",2781,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2785_get_height,"openfl.text.TextField","get_height",0x421294d4,"openfl.text.TextField.get_height","openfl/text/TextField.hx",2785,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2791_set_height,"openfl.text.TextField","set_height",0x45903348,"openfl.text.TextField.set_height","openfl/text/TextField.hx",2791,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2808_get_htmlText,"openfl.text.TextField","get_htmlText",0xb86d81e5,"openfl.text.TextField.get_htmlText","openfl/text/TextField.hx",2808,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2815_set_htmlText,"openfl.text.TextField","set_htmlText",0xcd66a559,"openfl.text.TextField.set_htmlText","openfl/text/TextField.hx",2815,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2880_get_length,"openfl.text.TextField","get_length",0xdece21d3,"openfl.text.TextField.get_length","openfl/text/TextField.hx",2880,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2891_get_maxChars,"openfl.text.TextField","get_maxChars",0x980651c6,"openfl.text.TextField.get_maxChars","openfl/text/TextField.hx",2891,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2895_set_maxChars,"openfl.text.TextField","set_maxChars",0xacff753a,"openfl.text.TextField.set_maxChars","openfl/text/TextField.hx",2895,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2909_get_maxScrollH,"openfl.text.TextField","get_maxScrollH",0xc4f0b4c4,"openfl.text.TextField.get_maxScrollH","openfl/text/TextField.hx",2909,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2916_get_maxScrollV,"openfl.text.TextField","get_maxScrollV",0xc4f0b4d2,"openfl.text.TextField.get_maxScrollV","openfl/text/TextField.hx",2916,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2924_get_mouseWheelEnabled,"openfl.text.TextField","get_mouseWheelEnabled",0xdd79871e,"openfl.text.TextField.get_mouseWheelEnabled","openfl/text/TextField.hx",2924,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2929_set_mouseWheelEnabled,"openfl.text.TextField","set_mouseWheelEnabled",0x3182552a,"openfl.text.TextField.set_mouseWheelEnabled","openfl/text/TextField.hx",2929,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2934_get_multiline,"openfl.text.TextField","get_multiline",0x24925820,"openfl.text.TextField.get_multiline","openfl/text/TextField.hx",2934,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2939_set_multiline,"openfl.text.TextField","set_multiline",0x69983a2c,"openfl.text.TextField.set_multiline","openfl/text/TextField.hx",2939,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2943_get_numLines,"openfl.text.TextField","get_numLines",0xda475406,"openfl.text.TextField.get_numLines","openfl/text/TextField.hx",2943,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2951_get_restrict,"openfl.text.TextField","get_restrict",0x99d42d69,"openfl.text.TextField.get_restrict","openfl/text/TextField.hx",2951,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2955_set_restrict,"openfl.text.TextField","set_restrict",0xaecd50dd,"openfl.text.TextField.set_restrict","openfl/text/TextField.hx",2955,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2967_get_scrollH,"openfl.text.TextField","get_scrollH",0xbeccf60e,"openfl.text.TextField.get_scrollH","openfl/text/TextField.hx",2967,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2971_set_scrollH,"openfl.text.TextField","set_scrollH",0xc939fd1a,"openfl.text.TextField.set_scrollH","openfl/text/TextField.hx",2971,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2990_get_scrollV,"openfl.text.TextField","get_scrollV",0xbeccf61c,"openfl.text.TextField.get_scrollV","openfl/text/TextField.hx",2990,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2994_set_scrollV,"openfl.text.TextField","set_scrollV",0xc939fd28,"openfl.text.TextField.set_scrollV","openfl/text/TextField.hx",2994,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3013_get_selectable,"openfl.text.TextField","get_selectable",0xee1ebe03,"openfl.text.TextField.get_selectable","openfl/text/TextField.hx",3013,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3017_set_selectable,"openfl.text.TextField","set_selectable",0x0e3ea677,"openfl.text.TextField.set_selectable","openfl/text/TextField.hx",3017,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3035_get_selectionBeginIndex,"openfl.text.TextField","get_selectionBeginIndex",0xb79fa288,"openfl.text.TextField.get_selectionBeginIndex","openfl/text/TextField.hx",3035,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3040_get_selectionEndIndex,"openfl.text.TextField","get_selectionEndIndex",0xc3677dd6,"openfl.text.TextField.get_selectionEndIndex","openfl/text/TextField.hx",3040,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3045_get_sharpness,"openfl.text.TextField","get_sharpness",0xa1a5a7b4,"openfl.text.TextField.get_sharpness","openfl/text/TextField.hx",3045,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3049_set_sharpness,"openfl.text.TextField","set_sharpness",0xe6ab89c0,"openfl.text.TextField.set_sharpness","openfl/text/TextField.hx",3049,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3061_get_styleSheet,"openfl.text.TextField","get_styleSheet",0x260a431b,"openfl.text.TextField.get_styleSheet","openfl/text/TextField.hx",3061,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3065_set_styleSheet,"openfl.text.TextField","set_styleSheet",0x462a2b8f,"openfl.text.TextField.set_styleSheet","openfl/text/TextField.hx",3065,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3091_get_tabEnabled,"openfl.text.TextField","get_tabEnabled",0x69fcfe19,"openfl.text.TextField.get_tabEnabled","openfl/text/TextField.hx",3091,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3096_get_text,"openfl.text.TextField","get_text",0x3b0d545a,"openfl.text.TextField.get_text","openfl/text/TextField.hx",3096,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3100_set_text,"openfl.text.TextField","set_text",0xe96aadce,"openfl.text.TextField.set_text","openfl/text/TextField.hx",3100,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3144_get_textColor,"openfl.text.TextField","get_textColor",0x69ca86a9,"openfl.text.TextField.get_textColor","openfl/text/TextField.hx",3144,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3148_set_textColor,"openfl.text.TextField","set_textColor",0xaed068b5,"openfl.text.TextField.set_textColor","openfl/text/TextField.hx",3148,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3164_get_textWidth,"openfl.text.TextField","get_textWidth",0xe9d0cb4c,"openfl.text.TextField.get_textWidth","openfl/text/TextField.hx",3164,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3170_get_textHeight,"openfl.text.TextField","get_textHeight",0x63308fe1,"openfl.text.TextField.get_textHeight","openfl/text/TextField.hx",3170,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3177_get_type,"openfl.text.TextField","get_type",0x3b1c7a67,"openfl.text.TextField.get_type","openfl/text/TextField.hx",3177,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3181_set_type,"openfl.text.TextField","set_type",0xe979d3db,"openfl.text.TextField.set_type","openfl/text/TextField.hx",3181,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3218_get_width,"openfl.text.TextField","get_width",0x2d65e5b9,"openfl.text.TextField.get_width","openfl/text/TextField.hx",3218,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3224_set_width,"openfl.text.TextField","set_width",0x10b6d1c5,"openfl.text.TextField.set_width","openfl/text/TextField.hx",3224,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3240_get_wordWrap,"openfl.text.TextField","get_wordWrap",0xa91076e1,"openfl.text.TextField.get_wordWrap","openfl/text/TextField.hx",3240,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3244_set_wordWrap,"openfl.text.TextField","set_wordWrap",0xbe099a55,"openfl.text.TextField.set_wordWrap","openfl/text/TextField.hx",3244,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3257_get_x,"openfl.text.TextField","get_x",0xd93e9aab,"openfl.text.TextField.get_x","openfl/text/TextField.hx",3257,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3261_set_x,"openfl.text.TextField","set_x",0xc20d90b7,"openfl.text.TextField.set_x","openfl/text/TextField.hx",3261,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3269_get_y,"openfl.text.TextField","get_y",0xd93e9aac,"openfl.text.TextField.get_y","openfl/text/TextField.hx",3269,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3273_set_y,"openfl.text.TextField","set_y",0xc20d90b8,"openfl.text.TextField.set_y","openfl/text/TextField.hx",3273,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3281_stage_onMouseMove,"openfl.text.TextField","stage_onMouseMove",0x47084bd2,"openfl.text.TextField.stage_onMouseMove","openfl/text/TextField.hx",3281,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3323_stage_onMouseUp,"openfl.text.TextField","stage_onMouseUp",0x9bb86cdc,"openfl.text.TextField.stage_onMouseUp","openfl/text/TextField.hx",3323,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3369_this_onAddedToStage,"openfl.text.TextField","this_onAddedToStage",0x3dbcbc7f,"openfl.text.TextField.this_onAddedToStage","openfl/text/TextField.hx",3369,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3374_this_onEnterFrame,"openfl.text.TextField","this_onEnterFrame",0xf6c59f11,"openfl.text.TextField.this_onEnterFrame","openfl/text/TextField.hx",3374,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3380_this_onFocusIn,"openfl.text.TextField","this_onFocusIn",0x90f9e141,"openfl.text.TextField.this_onFocusIn","openfl/text/TextField.hx",3380,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3391_this_onFocusOut,"openfl.text.TextField","this_onFocusOut",0x49afcbb2,"openfl.text.TextField.this_onFocusOut","openfl/text/TextField.hx",3391,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3409_this_onKeyDown,"openfl.text.TextField","this_onKeyDown",0xebbe0505,"openfl.text.TextField.this_onKeyDown","openfl/text/TextField.hx",3409,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3420_this_onMouseDown,"openfl.text.TextField","this_onMouseDown",0xfda1ed8b,"openfl.text.TextField.this_onMouseDown","openfl/text/TextField.hx",3420,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3472_this_onMouseWheel,"openfl.text.TextField","this_onMouseWheel",0xdbfcc352,"openfl.text.TextField.this_onMouseWheel","openfl/text/TextField.hx",3472,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3484_window_onKeyDown,"openfl.text.TextField","window_onKeyDown",0x61330e17,"openfl.text.TextField.window_onKeyDown","openfl/text/TextField.hx",3484,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3710_window_onTextInput,"openfl.text.TextField","window_onTextInput",0xe9818213,"openfl.text.TextField.window_onTextInput","openfl/text/TextField.hx",3710,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_138_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",138,0xccf02094)
namespace openfl{
namespace text{

void TextField_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_135_new)
HXLINE( 713)		this->_hx___mouseScrollVCounter = 0;
HXLINE( 278)		this->condenseWhite = false;
HXLINE( 849)		super::__construct();
HXLINE( 851)		this->_hx___wordSelection = false;
HXLINE( 852)		this->_hx___drawableType = 7;
HXLINE( 853)		this->_hx___caretIndex = -1;
HXLINE( 854)		this->_hx___selectionIndex = -1;
HXLINE( 855)		this->_hx___displayAsPassword = false;
HXLINE( 856)		this->_hx___graphics =  ::openfl::display::Graphics_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE( 857)		this->_hx___textEngine =  ::openfl::text::_internal::TextEngine_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE( 858)		this->_hx___layoutDirty = true;
HXLINE( 859)		this->_hx___offsetX = ( (Float)(0) );
HXLINE( 860)		this->_hx___offsetY = ( (Float)(0) );
HXLINE( 861)		this->_hx___mouseWheelEnabled = true;
HXLINE( 862)		this->_hx___text = HX_("",00,00,00,00);
HXLINE( 864)		if (::hx::IsNull( ::openfl::text::TextField_obj::_hx___defaultTextFormat )) {
HXLINE( 866)			::openfl::text::TextField_obj::_hx___defaultTextFormat =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,HX_("Times New Roman",03,86,44,c3),12,0,false,false,false,HX_("",00,00,00,00),HX_("",00,00,00,00),3,0,0,0,0);
HXLINE( 867)			::openfl::text::TextField_obj::_hx___defaultTextFormat->blockIndent = 0;
HXLINE( 868)			::openfl::text::TextField_obj::_hx___defaultTextFormat->bullet = false;
HXLINE( 869)			::openfl::text::TextField_obj::_hx___defaultTextFormat->letterSpacing = 0;
HXLINE( 870)			::openfl::text::TextField_obj::_hx___defaultTextFormat->kerning = false;
            		}
HXLINE( 873)		this->_hx___textFormat = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 874)		{
HXLINE( 874)			::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 874)			( ( ::openfl::_Vector::ObjectVector)(this1) )->push( ::openfl::text::_internal::TextFormatRange_obj::__alloc( HX_CTX ,this->_hx___textFormat,0,0));
            		}
HXLINE( 876)		this->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->this_onMouseDown_dyn(),null(),null(),null());
HXLINE( 877)		this->addEventListener(HX_("focusIn",dd,45,83,41),this->this_onFocusIn_dyn(),null(),null(),null());
HXLINE( 878)		this->addEventListener(HX_("focusOut",96,6f,5e,11),this->this_onFocusOut_dyn(),null(),null(),null());
HXLINE( 879)		this->addEventListener(HX_("keyDown",a1,69,47,9c),this->this_onKeyDown_dyn(),null(),null(),null());
HXLINE( 880)		this->addEventListener(HX_("mouseWheel",36,28,87,e7),this->this_onMouseWheel_dyn(),null(),null(),null());
            	}

Dynamic TextField_obj::__CreateEmpty() { return new TextField_obj; }

void *TextField_obj::_hx_vtable = 0;

Dynamic TextField_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TextField_obj > _hx_result = new TextField_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TextField_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		if (inClassId<=(int)0x0330636f) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
		} else {
			return inClassId==(int)0x0c89e854;
		}
	} else {
		return inClassId==(int)0x6b353933 || inClassId==(int)0x7f0de750;
	}
}

void TextField_obj::appendText(::String text){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_893_appendText)
HXLINE( 894)		bool _hx_tmp;
HXDLIN( 894)		if (::hx::IsNotNull( text )) {
HXLINE( 894)			_hx_tmp = (text == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 894)			_hx_tmp = true;
            		}
HXDLIN( 894)		if (_hx_tmp) {
HXLINE( 894)			return;
            		}
HXLINE( 896)		this->_hx___dirty = true;
HXLINE( 897)		this->_hx___layoutDirty = true;
HXLINE( 898)		if (!(this->_hx___renderDirty)) {
HXLINE( 898)			this->_hx___renderDirty = true;
HXDLIN( 898)			this->_hx___setParentRenderDirty();
            		}
HXLINE( 900)		this->_hx___updateText((this->_hx___text + text));
HXLINE( 902)		::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 902)		( ( ::openfl::_Vector::ObjectVector)(this1) )->get((this->_hx___textEngine->textFormatRanges->get_length() - 1)).StaticCast<  ::openfl::text::_internal::TextFormatRange >()->end = this->_hx___text.length;
HXLINE( 904)		this->_hx___selectionIndex = (this->_hx___caretIndex = this->_hx___text.length);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,appendText,(void))

 ::openfl::geom::Rectangle TextField_obj::getCharBoundaries(int charIndex){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_919_getCharBoundaries)
HXLINE( 920)		bool _hx_tmp;
HXDLIN( 920)		if ((charIndex >= 0)) {
HXLINE( 920)			_hx_tmp = (charIndex > (this->_hx___text.length - 1));
            		}
            		else {
HXLINE( 920)			_hx_tmp = true;
            		}
HXDLIN( 920)		if (_hx_tmp) {
HXLINE( 920)			return null();
            		}
HXLINE( 922)		 ::openfl::geom::Rectangle rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 924)		if (this->_hx___getCharBoundaries(charIndex,rect)) {
HXLINE( 926)			return rect;
            		}
            		else {
HXLINE( 930)			return null();
            		}
HXLINE( 924)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getCharBoundaries,return )

int TextField_obj::getCharIndexAtPoint(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_945_getCharIndexAtPoint)
HXLINE( 946)		bool _hx_tmp;
HXDLIN( 946)		bool _hx_tmp1;
HXDLIN( 946)		bool _hx_tmp2;
HXDLIN( 946)		if (!((x <= 2))) {
HXLINE( 946)			_hx_tmp2 = (x > (this->get_width() + 4));
            		}
            		else {
HXLINE( 946)			_hx_tmp2 = true;
            		}
HXDLIN( 946)		if (!(_hx_tmp2)) {
HXLINE( 946)			_hx_tmp1 = (y <= 0);
            		}
            		else {
HXLINE( 946)			_hx_tmp1 = true;
            		}
HXDLIN( 946)		if (!(_hx_tmp1)) {
HXLINE( 946)			_hx_tmp = (y > (this->get_height() + 4));
            		}
            		else {
HXLINE( 946)			_hx_tmp = true;
            		}
HXDLIN( 946)		if (_hx_tmp) {
HXLINE( 946)			return -1;
            		}
HXLINE( 948)		this->_hx___updateLayout();
HXLINE( 950)		x = (x + this->get_scrollH());
HXLINE( 952)		{
HXLINE( 952)			int _g = 0;
HXDLIN( 952)			int _g1 = (this->get_scrollV() - 1);
HXDLIN( 952)			while((_g < _g1)){
HXLINE( 952)				_g = (_g + 1);
HXDLIN( 952)				int i = (_g - 1);
HXLINE( 954)				y = (y + this->_hx___textEngine->lineHeights->get(i));
            			}
            		}
HXLINE( 957)		{
HXLINE( 957)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN( 957)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 957)				 ::openfl::text::_internal::TextLayoutGroup group1 = ( ( ::openfl::text::_internal::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 959)				bool _hx_tmp3;
HXDLIN( 959)				if ((y >= group1->offsetY)) {
HXLINE( 959)					_hx_tmp3 = (y <= (group1->offsetY + group1->height));
            				}
            				else {
HXLINE( 959)					_hx_tmp3 = false;
            				}
HXDLIN( 959)				if (_hx_tmp3) {
HXLINE( 961)					bool _hx_tmp4;
HXDLIN( 961)					if ((x >= group1->offsetX)) {
HXLINE( 961)						_hx_tmp4 = (x <= (group1->offsetX + group1->width));
            					}
            					else {
HXLINE( 961)						_hx_tmp4 = false;
            					}
HXDLIN( 961)					if (_hx_tmp4) {
HXLINE( 963)						Float advance = ((Float)0.0);
HXLINE( 965)						{
HXLINE( 965)							int _g2 = 0;
HXDLIN( 965)							int _g3 = group1->positions->length;
HXDLIN( 965)							while((_g2 < _g3)){
HXLINE( 965)								_g2 = (_g2 + 1);
HXDLIN( 965)								int i1 = (_g2 - 1);
HXLINE( 967)								Float advance1;
HXDLIN( 967)								bool advance2;
HXDLIN( 967)								if ((i1 >= 0)) {
HXLINE( 967)									advance2 = (i1 < group1->positions->length);
            								}
            								else {
HXLINE( 967)									advance2 = false;
            								}
HXDLIN( 967)								if (advance2) {
HXLINE( 967)									advance1 = group1->positions->__get(i1).StaticCast<  ::openfl::text::_internal::GlyphPosition >()->advance->x;
            								}
            								else {
HXLINE( 967)									advance1 = ( (Float)(0) );
            								}
HXDLIN( 967)								advance = (advance + advance1);
HXLINE( 969)								if ((x <= (group1->offsetX + advance))) {
HXLINE( 971)									return (group1->startIndex + i1);
            								}
            							}
            						}
HXLINE( 975)						return group1->endIndex;
            					}
            				}
            			}
            		}
HXLINE( 980)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getCharIndexAtPoint,return )

int TextField_obj::getFirstCharInParagraph(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_995_getFirstCharInParagraph)
HXLINE( 996)		bool _hx_tmp;
HXDLIN( 996)		if ((charIndex >= 0)) {
HXLINE( 996)			_hx_tmp = (charIndex > this->get_text().length);
            		}
            		else {
HXLINE( 996)			_hx_tmp = true;
            		}
HXDLIN( 996)		if (_hx_tmp) {
HXLINE( 996)			return -1;
            		}
HXLINE( 997)		if ((this->_hx___textEngine->lineBreaks->get_length() == 0)) {
HXLINE( 997)			return 0;
            		}
HXLINE( 999)		{
HXLINE( 999)			int _g = 0;
HXDLIN( 999)			int _g1 = this->_hx___textEngine->lineBreaks->get_length();
HXDLIN( 999)			while((_g < _g1)){
HXLINE( 999)				_g = (_g + 1);
HXDLIN( 999)				int i = (_g - 1);
HXLINE(1001)				if ((charIndex <= this->_hx___textEngine->lineBreaks->get(i))) {
HXLINE(1003)					if ((i == 0)) {
HXLINE(1003)						return 0;
            					}
            					else {
HXLINE(1003)						return (this->_hx___textEngine->lineBreaks->get((i - 1)) + 1);
            					}
            				}
            			}
            		}
HXLINE(1007)		::Dynamic this1 = this->_hx___textEngine->lineBreaks;
HXDLIN(1007)		return (( ( ::openfl::_Vector::IntVector)(this1) )->get((this->_hx___textEngine->lineBreaks->get_length() - 1)) + 1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getFirstCharInParagraph,return )

int TextField_obj::getLineIndexAtPoint(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1044_getLineIndexAtPoint)
HXLINE(1045)		this->_hx___updateLayout();
HXLINE(1047)		bool _hx_tmp;
HXDLIN(1047)		bool _hx_tmp1;
HXDLIN(1047)		bool _hx_tmp2;
HXDLIN(1047)		if (!((x <= 2))) {
HXLINE(1047)			_hx_tmp2 = (x > (this->get_width() + 4));
            		}
            		else {
HXLINE(1047)			_hx_tmp2 = true;
            		}
HXDLIN(1047)		if (!(_hx_tmp2)) {
HXLINE(1047)			_hx_tmp1 = (y <= 0);
            		}
            		else {
HXLINE(1047)			_hx_tmp1 = true;
            		}
HXDLIN(1047)		if (!(_hx_tmp1)) {
HXLINE(1047)			_hx_tmp = (y > (this->get_height() + 4));
            		}
            		else {
HXLINE(1047)			_hx_tmp = true;
            		}
HXDLIN(1047)		if (_hx_tmp) {
HXLINE(1047)			return -1;
            		}
HXLINE(1049)		{
HXLINE(1049)			int _g = 0;
HXDLIN(1049)			int _g1 = (this->get_scrollV() - 1);
HXDLIN(1049)			while((_g < _g1)){
HXLINE(1049)				_g = (_g + 1);
HXDLIN(1049)				int i = (_g - 1);
HXLINE(1051)				y = (y + this->_hx___textEngine->lineHeights->get(i));
            			}
            		}
HXLINE(1054)		{
HXLINE(1054)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1054)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1054)				 ::openfl::text::_internal::TextLayoutGroup group1 = ( ( ::openfl::text::_internal::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1056)				bool _hx_tmp3;
HXDLIN(1056)				if ((y >= group1->offsetY)) {
HXLINE(1056)					_hx_tmp3 = (y <= (group1->offsetY + group1->height));
            				}
            				else {
HXLINE(1056)					_hx_tmp3 = false;
            				}
HXDLIN(1056)				if (_hx_tmp3) {
HXLINE(1058)					return group1->lineIndex;
            				}
            			}
            		}
HXLINE(1062)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getLineIndexAtPoint,return )

int TextField_obj::getLineIndexOfChar(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1076_getLineIndexOfChar)
HXLINE(1077)		bool _hx_tmp;
HXDLIN(1077)		if ((charIndex >= 0)) {
HXLINE(1077)			_hx_tmp = (charIndex > this->_hx___text.length);
            		}
            		else {
HXLINE(1077)			_hx_tmp = true;
            		}
HXDLIN(1077)		if (_hx_tmp) {
HXLINE(1077)			return -1;
            		}
HXLINE(1079)		this->_hx___updateLayout();
HXLINE(1081)		{
HXLINE(1081)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1081)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1081)				 ::openfl::text::_internal::TextLayoutGroup group1 = ( ( ::openfl::text::_internal::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1083)				bool _hx_tmp1;
HXDLIN(1083)				if ((group1->startIndex <= charIndex)) {
HXLINE(1083)					_hx_tmp1 = (group1->endIndex >= charIndex);
            				}
            				else {
HXLINE(1083)					_hx_tmp1 = false;
            				}
HXDLIN(1083)				if (_hx_tmp1) {
HXLINE(1085)					return group1->lineIndex;
            				}
            			}
            		}
HXLINE(1089)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineIndexOfChar,return )

int TextField_obj::getLineLength(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1100_getLineLength)
HXLINE(1101)		this->_hx___updateLayout();
HXLINE(1103)		bool _hx_tmp;
HXDLIN(1103)		if ((lineIndex >= 0)) {
HXLINE(1103)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - 1));
            		}
            		else {
HXLINE(1103)			_hx_tmp = true;
            		}
HXDLIN(1103)		if (_hx_tmp) {
HXLINE(1103)			return 0;
            		}
HXLINE(1105)		int startIndex = -1;
HXLINE(1106)		int endIndex = -1;
HXLINE(1108)		{
HXLINE(1108)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1108)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1108)				 ::openfl::text::_internal::TextLayoutGroup group1 = ( ( ::openfl::text::_internal::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1110)				if ((group1->lineIndex == lineIndex)) {
HXLINE(1112)					if ((startIndex == -1)) {
HXLINE(1112)						startIndex = group1->startIndex;
            					}
            				}
            				else {
HXLINE(1114)					if ((group1->lineIndex == (lineIndex + 1))) {
HXLINE(1116)						endIndex = group1->startIndex;
HXLINE(1117)						goto _hx_goto_14;
            					}
            				}
            			}
            			_hx_goto_14:;
            		}
HXLINE(1121)		if ((endIndex == -1)) {
HXLINE(1121)			endIndex = this->_hx___text.length;
            		}
HXLINE(1122)		return (endIndex - startIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineLength,return )

 ::openfl::text::TextLineMetrics TextField_obj::getLineMetrics(int lineIndex){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1133_getLineMetrics)
HXLINE(1134)		this->_hx___updateLayout();
HXLINE(1136)		Float ascender = this->_hx___textEngine->lineAscents->get(lineIndex);
HXLINE(1137)		Float descender = this->_hx___textEngine->lineDescents->get(lineIndex);
HXLINE(1138)		Float leading = this->_hx___textEngine->lineLeadings->get(lineIndex);
HXLINE(1139)		Float lineHeight = this->_hx___textEngine->lineHeights->get(lineIndex);
HXLINE(1140)		Float lineWidth = this->_hx___textEngine->lineWidths->get(lineIndex);
HXLINE(1144)		Float margin;
HXDLIN(1144)		 ::Dynamic _hx_switch_0 = this->_hx___textFormat->align;
            		if (  (_hx_switch_0==0) ){
HXLINE(1144)			margin = ((this->_hx___textEngine->width - lineWidth) / ( (Float)(2) ));
HXDLIN(1144)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==1) ||  (_hx_switch_0==4) ){
HXLINE(1144)			margin = ((this->_hx___textEngine->width - lineWidth) - ( (Float)(2) ));
HXDLIN(1144)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==2) ||  (_hx_switch_0==3) ||  (_hx_switch_0==5) ){
HXLINE(1144)			margin = ( (Float)(2) );
HXDLIN(1144)			goto _hx_goto_16;
            		}
            		_hx_goto_16:;
HXLINE(1151)		return  ::openfl::text::TextLineMetrics_obj::__alloc( HX_CTX ,margin,lineWidth,lineHeight,ascender,descender,leading);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineMetrics,return )

int TextField_obj::getLineOffset(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1164_getLineOffset)
HXLINE(1165)		this->_hx___updateLayout();
HXLINE(1167)		bool _hx_tmp;
HXDLIN(1167)		if ((lineIndex >= 0)) {
HXLINE(1167)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - 1));
            		}
            		else {
HXLINE(1167)			_hx_tmp = true;
            		}
HXDLIN(1167)		if (_hx_tmp) {
HXLINE(1167)			return -1;
            		}
HXLINE(1169)		{
HXLINE(1169)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1169)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1169)				 ::openfl::text::_internal::TextLayoutGroup group1 = ( ( ::openfl::text::_internal::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1171)				if ((group1->lineIndex == lineIndex)) {
HXLINE(1173)					return group1->startIndex;
            				}
            			}
            		}
HXLINE(1177)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineOffset,return )

::String TextField_obj::getLineText(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1190_getLineText)
HXLINE(1191)		this->_hx___updateLayout();
HXLINE(1193)		bool _hx_tmp;
HXDLIN(1193)		if ((lineIndex >= 0)) {
HXLINE(1193)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - 1));
            		}
            		else {
HXLINE(1193)			_hx_tmp = true;
            		}
HXDLIN(1193)		if (_hx_tmp) {
HXLINE(1193)			return null();
            		}
HXLINE(1195)		int startIndex = -1;
HXLINE(1196)		int endIndex = -1;
HXLINE(1198)		{
HXLINE(1198)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1198)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1198)				 ::openfl::text::_internal::TextLayoutGroup group1 = ( ( ::openfl::text::_internal::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1200)				if ((group1->lineIndex == lineIndex)) {
HXLINE(1202)					if ((startIndex == -1)) {
HXLINE(1202)						startIndex = group1->startIndex;
            					}
            				}
            				else {
HXLINE(1204)					if ((group1->lineIndex == (lineIndex + 1))) {
HXLINE(1206)						endIndex = group1->startIndex;
HXLINE(1207)						goto _hx_goto_20;
            					}
            				}
            			}
            			_hx_goto_20:;
            		}
HXLINE(1211)		if ((endIndex == -1)) {
HXLINE(1211)			endIndex = this->_hx___text.length;
            		}
HXLINE(1213)		return this->_hx___textEngine->text.substring(startIndex,endIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineText,return )

int TextField_obj::getParagraphLength(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1229_getParagraphLength)
HXLINE(1230)		bool _hx_tmp;
HXDLIN(1230)		if ((charIndex >= 0)) {
HXLINE(1230)			_hx_tmp = (charIndex > this->get_text().length);
            		}
            		else {
HXLINE(1230)			_hx_tmp = true;
            		}
HXDLIN(1230)		if (_hx_tmp) {
HXLINE(1230)			return -1;
            		}
HXLINE(1232)		int startIndex = this->getFirstCharInParagraph(charIndex);
HXLINE(1234)		if ((charIndex >= this->get_text().length)) {
HXLINE(1234)			return ((this->get_text().length - startIndex) + 1);
            		}
HXLINE(1236)		int endIndex = (this->_hx___textEngine->getLineBreakIndex(charIndex) + 1);
HXLINE(1238)		if ((endIndex == 0)) {
HXLINE(1238)			endIndex = this->_hx___text.length;
            		}
HXLINE(1239)		return (endIndex - startIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getParagraphLength,return )

 ::openfl::text::TextFormat TextField_obj::getTextFormat(::hx::Null< int >  __o_beginIndex,::hx::Null< int >  __o_endIndex){
            		int beginIndex = __o_beginIndex.Default(-1);
            		int endIndex = __o_endIndex.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1268_getTextFormat)
HXLINE(1269)		 ::openfl::text::TextFormat format = null();
HXLINE(1271)		bool _hx_tmp;
HXDLIN(1271)		bool _hx_tmp1;
HXDLIN(1271)		bool _hx_tmp2;
HXDLIN(1271)		if ((beginIndex < this->get_text().length)) {
HXLINE(1271)			_hx_tmp2 = (beginIndex < -1);
            		}
            		else {
HXLINE(1271)			_hx_tmp2 = true;
            		}
HXDLIN(1271)		if (!(_hx_tmp2)) {
HXLINE(1271)			_hx_tmp1 = (endIndex > this->get_text().length);
            		}
            		else {
HXLINE(1271)			_hx_tmp1 = true;
            		}
HXDLIN(1271)		if (!(_hx_tmp1)) {
HXLINE(1271)			_hx_tmp = (endIndex < -1);
            		}
            		else {
HXLINE(1271)			_hx_tmp = true;
            		}
HXDLIN(1271)		if (_hx_tmp) {
HXLINE(1272)			HX_STACK_DO_THROW( ::openfl::errors::RangeError_obj::__alloc( HX_CTX ,HX_("The supplied index is out of bounds",37,5a,d3,87)));
            		}
HXLINE(1274)		if ((beginIndex == -1)) {
HXLINE(1274)			beginIndex = 0;
            		}
HXLINE(1275)		if ((endIndex == -1)) {
HXLINE(1275)			endIndex = this->get_text().length;
            		}
HXLINE(1277)		if ((beginIndex >= endIndex)) {
HXLINE(1277)			return  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE(1279)		{
HXLINE(1279)			 ::Dynamic group = this->_hx___textEngine->textFormatRanges->iterator();
HXDLIN(1279)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1279)				 ::openfl::text::_internal::TextFormatRange group1 = ( ( ::openfl::text::_internal::TextFormatRange)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1281)				bool _hx_tmp3;
HXDLIN(1281)				bool _hx_tmp4;
HXDLIN(1281)				if ((group1->start <= beginIndex)) {
HXLINE(1281)					_hx_tmp4 = (group1->end > beginIndex);
            				}
            				else {
HXLINE(1281)					_hx_tmp4 = false;
            				}
HXDLIN(1281)				if (!(_hx_tmp4)) {
HXLINE(1281)					if ((group1->start < endIndex)) {
HXLINE(1281)						_hx_tmp3 = (group1->end >= endIndex);
            					}
            					else {
HXLINE(1281)						_hx_tmp3 = false;
            					}
            				}
            				else {
HXLINE(1281)					_hx_tmp3 = true;
            				}
HXDLIN(1281)				if (_hx_tmp3) {
HXLINE(1283)					if (::hx::IsNull( format )) {
HXLINE(1285)						format = group1->format->clone();
            					}
            					else {
HXLINE(1289)						if ((group1->format->font != format->font)) {
HXLINE(1289)							format->set_font(null());
            						}
HXLINE(1290)						if (::hx::IsNotEq( group1->format->size,format->size )) {
HXLINE(1290)							format->set_size(null());
            						}
HXLINE(1291)						if (::hx::IsNotEq( group1->format->color,format->color )) {
HXLINE(1291)							format->color = null();
            						}
HXLINE(1292)						if (::hx::IsNotEq( group1->format->bold,format->bold )) {
HXLINE(1292)							format->set_bold(null());
            						}
HXLINE(1293)						if (::hx::IsNotEq( group1->format->italic,format->italic )) {
HXLINE(1293)							format->set_italic(null());
            						}
HXLINE(1294)						if (::hx::IsNotEq( group1->format->underline,format->underline )) {
HXLINE(1294)							format->underline = null();
            						}
HXLINE(1295)						if ((group1->format->url != format->url)) {
HXLINE(1295)							format->url = null();
            						}
HXLINE(1296)						if ((group1->format->target != format->target)) {
HXLINE(1296)							format->target = null();
            						}
HXLINE(1297)						if (::hx::IsNotEq( group1->format->align,format->align )) {
HXLINE(1297)							format->align = null();
            						}
HXLINE(1298)						if (::hx::IsNotEq( group1->format->leftMargin,format->leftMargin )) {
HXLINE(1298)							format->leftMargin = null();
            						}
HXLINE(1299)						if (::hx::IsNotEq( group1->format->rightMargin,format->rightMargin )) {
HXLINE(1299)							format->rightMargin = null();
            						}
HXLINE(1300)						if (::hx::IsNotEq( group1->format->indent,format->indent )) {
HXLINE(1300)							format->indent = null();
            						}
HXLINE(1301)						if (::hx::IsNotEq( group1->format->leading,format->leading )) {
HXLINE(1301)							format->leading = null();
            						}
HXLINE(1302)						if (::hx::IsNotEq( group1->format->blockIndent,format->blockIndent )) {
HXLINE(1302)							format->blockIndent = null();
            						}
HXLINE(1303)						if (::hx::IsNotEq( group1->format->bullet,format->bullet )) {
HXLINE(1303)							format->bullet = null();
            						}
HXLINE(1304)						if (::hx::IsNotEq( group1->format->kerning,format->kerning )) {
HXLINE(1304)							format->kerning = null();
            						}
HXLINE(1305)						if (::hx::IsNotEq( group1->format->letterSpacing,format->letterSpacing )) {
HXLINE(1305)							format->letterSpacing = null();
            						}
HXLINE(1306)						if (::hx::IsPointerNotEq( group1->format->tabStops,format->tabStops )) {
HXLINE(1306)							format->tabStops = null();
            						}
            					}
            				}
            			}
            		}
HXLINE(1311)		if (::hx::IsNull( format )) {
HXLINE(1311)			format =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE(1312)		return format;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getTextFormat,return )

void TextField_obj::replaceSelectedText(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1364_replaceSelectedText)
HXDLIN(1364)		this->_hx___replaceSelectedText(value,false);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,replaceSelectedText,(void))

void TextField_obj::replaceText(int beginIndex,int endIndex,::String newText){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1385_replaceText)
HXDLIN(1385)		this->_hx___replaceText(beginIndex,endIndex,newText,false);
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,replaceText,(void))

void TextField_obj::setSelection(int beginIndex,int endIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1404_setSelection)
HXLINE(1405)		this->_hx___selectionIndex = beginIndex;
HXLINE(1406)		this->_hx___caretIndex = endIndex;
HXLINE(1408)		this->_hx___updateScrollV();
HXLINE(1409)		this->_hx___updateScrollH();
HXLINE(1411)		bool _hx_tmp;
HXDLIN(1411)		if (::hx::IsNotNull( this->stage )) {
HXLINE(1411)			_hx_tmp = ::hx::IsInstanceEq( this->stage->get_focus(),::hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE(1411)			_hx_tmp = false;
            		}
HXDLIN(1411)		if (_hx_tmp) {
HXLINE(1413)			this->_hx___stopCursorTimer();
HXLINE(1418)			this->_hx___startCursorTimer();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,setSelection,(void))

void TextField_obj::setTextFormat( ::openfl::text::TextFormat format,::hx::Null< int >  __o_beginIndex,::hx::Null< int >  __o_endIndex){
            		int beginIndex = __o_beginIndex.Default(-1);
            		int endIndex = __o_endIndex.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1470_setTextFormat)
HXLINE(1471)		int max = this->get_text().length;
HXLINE(1472)		 ::openfl::text::_internal::TextFormatRange range;
HXLINE(1474)		if ((beginIndex == -1)) {
HXLINE(1476)			if ((endIndex == -1)) {
HXLINE(1476)				endIndex = max;
            			}
HXLINE(1477)			beginIndex = 0;
            		}
            		else {
HXLINE(1479)			if ((endIndex == -1)) {
HXLINE(1481)				endIndex = (beginIndex + 1);
            			}
            		}
HXLINE(1484)		if ((beginIndex == endIndex)) {
HXLINE(1484)			return;
            		}
HXLINE(1485)		bool _hx_tmp;
HXDLIN(1485)		bool _hx_tmp1;
HXDLIN(1485)		bool _hx_tmp2;
HXDLIN(1485)		bool _hx_tmp3;
HXDLIN(1485)		if ((beginIndex >= 0)) {
HXLINE(1485)			_hx_tmp3 = (endIndex <= 0);
            		}
            		else {
HXLINE(1485)			_hx_tmp3 = true;
            		}
HXDLIN(1485)		if (!(_hx_tmp3)) {
HXLINE(1485)			_hx_tmp2 = (endIndex < beginIndex);
            		}
            		else {
HXLINE(1485)			_hx_tmp2 = true;
            		}
HXDLIN(1485)		if (!(_hx_tmp2)) {
HXLINE(1485)			_hx_tmp1 = (beginIndex >= max);
            		}
            		else {
HXLINE(1485)			_hx_tmp1 = true;
            		}
HXDLIN(1485)		if (!(_hx_tmp1)) {
HXLINE(1485)			_hx_tmp = (endIndex > max);
            		}
            		else {
HXLINE(1485)			_hx_tmp = true;
            		}
HXDLIN(1485)		if (_hx_tmp) {
HXLINE(1485)			HX_STACK_DO_THROW( ::openfl::errors::RangeError_obj::__alloc( HX_CTX ,null()));
            		}
HXLINE(1503)		bool _hx_tmp4;
HXDLIN(1503)		if ((beginIndex == 0)) {
HXLINE(1503)			_hx_tmp4 = (endIndex == max);
            		}
            		else {
HXLINE(1503)			_hx_tmp4 = false;
            		}
HXDLIN(1503)		if (_hx_tmp4) {
HXLINE(1506)			this->_hx___textEngine->textFormatRanges->set_length(1);
HXLINE(1508)			range = this->_hx___textEngine->textFormatRanges->get(0).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXLINE(1509)			range->start = 0;
HXLINE(1510)			range->end = max;
HXLINE(1511)			range->format->_hx___merge(format);
            		}
            		else {
HXLINE(1515)			int index = 0;
HXLINE(1516)			 ::openfl::text::_internal::TextFormatRange newRange;
HXLINE(1518)			while((index < this->_hx___textEngine->textFormatRanges->get_length())){
HXLINE(1520)				range = this->_hx___textEngine->textFormatRanges->get(index).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXLINE(1522)				if ((range->end <= beginIndex)) {
HXLINE(1525)					index = (index + 1);
            				}
            				else {
HXLINE(1527)					if ((range->start >= endIndex)) {
HXLINE(1530)						goto _hx_goto_28;
            					}
            					else {
HXLINE(1532)						bool _hx_tmp5;
HXDLIN(1532)						if ((range->start <= beginIndex)) {
HXLINE(1532)							_hx_tmp5 = (range->end >= endIndex);
            						}
            						else {
HXLINE(1532)							_hx_tmp5 = false;
            						}
HXDLIN(1532)						if (_hx_tmp5) {
HXLINE(1534)							bool _hx_tmp6;
HXDLIN(1534)							if ((range->start == beginIndex)) {
HXLINE(1534)								_hx_tmp6 = (range->end == endIndex);
            							}
            							else {
HXLINE(1534)								_hx_tmp6 = false;
            							}
HXDLIN(1534)							if (_hx_tmp6) {
HXLINE(1537)								range->format = range->format->clone();
HXLINE(1538)								range->format->_hx___merge(format);
HXLINE(1539)								goto _hx_goto_28;
            							}
            							else {
HXLINE(1541)								if ((range->start == beginIndex)) {
HXLINE(1544)									newRange =  ::openfl::text::_internal::TextFormatRange_obj::__alloc( HX_CTX ,range->format->clone(),beginIndex,endIndex);
HXLINE(1545)									newRange->format->_hx___merge(format);
HXLINE(1546)									this->_hx___textEngine->textFormatRanges->insertAt(index,newRange);
HXLINE(1547)									range->start = endIndex;
HXLINE(1548)									index = (index + 2);
            								}
            								else {
HXLINE(1550)									if ((range->end == endIndex)) {
HXLINE(1553)										newRange =  ::openfl::text::_internal::TextFormatRange_obj::__alloc( HX_CTX ,range->format->clone(),beginIndex,endIndex);
HXLINE(1554)										newRange->format->_hx___merge(format);
HXLINE(1555)										this->_hx___textEngine->textFormatRanges->insertAt((index + 1),newRange);
HXLINE(1557)										range->end = beginIndex;
HXLINE(1558)										goto _hx_goto_28;
            									}
            									else {
HXLINE(1563)										newRange =  ::openfl::text::_internal::TextFormatRange_obj::__alloc( HX_CTX ,range->format->clone(),beginIndex,endIndex);
HXLINE(1564)										newRange->format->_hx___merge(format);
HXLINE(1565)										this->_hx___textEngine->textFormatRanges->insertAt((index + 1),newRange);
HXLINE(1567)										 ::openfl::text::TextFormat newRange1 = range->format->clone();
HXDLIN(1567)										newRange =  ::openfl::text::_internal::TextFormatRange_obj::__alloc( HX_CTX ,newRange1,endIndex,range->end);
HXLINE(1568)										this->_hx___textEngine->textFormatRanges->insertAt((index + 2),newRange);
HXLINE(1570)										range->end = beginIndex;
HXLINE(1571)										goto _hx_goto_28;
            									}
            								}
            							}
            						}
            						else {
HXLINE(1574)							bool _hx_tmp7;
HXDLIN(1574)							if ((range->start >= beginIndex)) {
HXLINE(1574)								_hx_tmp7 = (range->end <= endIndex);
            							}
            							else {
HXLINE(1574)								_hx_tmp7 = false;
            							}
HXDLIN(1574)							if (_hx_tmp7) {
HXLINE(1577)								if ((range->start == beginIndex)) {
HXLINE(1580)									range->format = range->format->clone();
HXLINE(1581)									range->format->_hx___merge(format);
HXLINE(1582)									range->end = endIndex;
            								}
            								else {
HXLINE(1587)									this->_hx___textEngine->textFormatRanges->removeAt(index).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
            								}
            							}
            							else {
HXLINE(1590)								bool _hx_tmp8;
HXDLIN(1590)								if ((range->start > beginIndex)) {
HXLINE(1590)									_hx_tmp8 = (range->end > beginIndex);
            								}
            								else {
HXLINE(1590)									_hx_tmp8 = false;
            								}
HXDLIN(1590)								if (_hx_tmp8) {
HXLINE(1593)									range->start = endIndex;
HXLINE(1594)									goto _hx_goto_28;
            								}
            								else {
HXLINE(1596)									bool _hx_tmp9;
HXDLIN(1596)									if ((range->start < beginIndex)) {
HXLINE(1596)										_hx_tmp9 = (range->end <= endIndex);
            									}
            									else {
HXLINE(1596)										_hx_tmp9 = false;
            									}
HXDLIN(1596)									if (_hx_tmp9) {
HXLINE(1599)										newRange =  ::openfl::text::_internal::TextFormatRange_obj::__alloc( HX_CTX ,range->format->clone(),beginIndex,endIndex);
HXLINE(1600)										newRange->format->_hx___merge(format);
HXLINE(1601)										this->_hx___textEngine->textFormatRanges->insertAt((index + 1),newRange);
HXLINE(1602)										range->end = beginIndex;
HXLINE(1603)										index = (index + 2);
            									}
            									else {
HXLINE(1608)										index = (index + 1);
HXLINE(1609)										::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",8e,c1,17,2f),::hx::SourceInfo(HX_("openfl/text/TextField.hx",94,20,f0,cc),1609,HX_("openfl.text.TextField",ca,a8,d5,ef),HX_("setTextFormat",06,4e,f7,d5)));
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            			_hx_goto_28:;
            		}
HXLINE(1636)		this->_hx___dirty = true;
HXLINE(1637)		this->_hx___layoutDirty = true;
HXLINE(1638)		if (!(this->_hx___renderDirty)) {
HXLINE(1638)			this->_hx___renderDirty = true;
HXDLIN(1638)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,setTextFormat,(void))

void TextField_obj::_hx___setStageReference( ::openfl::display::Stage stage){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1642___setStageReference)
HXLINE(1645)		this->_hx___stopTextInput();
HXLINE(1646)		this->super::_hx___setStageReference(stage);
            	}


bool TextField_obj::_hx___allowMouseFocus(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1653___allowMouseFocus)
HXDLIN(1653)		return this->mouseEnabled;
            	}


void TextField_obj::_hx___caretBeginningOfLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1658___caretBeginningOfLine)
HXDLIN(1658)		this->_hx___caretIndex = this->getLineOffset(this->getLineIndexOfChar(this->_hx___caretIndex));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretBeginningOfLine,(void))

void TextField_obj::_hx___caretBeginningOfNextLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1662___caretBeginningOfNextLine)
HXLINE(1663)		int lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
HXLINE(1665)		if ((lineIndex < (this->_hx___textEngine->numLines - 1))) {
HXLINE(1667)			this->_hx___caretIndex = this->getLineOffset((lineIndex + 1));
            		}
            		else {
HXLINE(1671)			this->_hx___caretIndex = this->_hx___text.length;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretBeginningOfNextLine,(void))

void TextField_obj::_hx___caretBeginningOfPreviousLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1676___caretBeginningOfPreviousLine)
HXLINE(1677)		int lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
HXLINE(1679)		if ((lineIndex > 0)) {
HXLINE(1681)			int index = this->getLineOffset(this->getLineIndexOfChar(this->_hx___caretIndex));
HXLINE(1683)			if ((this->_hx___caretIndex == index)) {
HXLINE(1685)				this->_hx___caretIndex = this->getLineOffset((lineIndex - 1));
            			}
            			else {
HXLINE(1689)				this->_hx___caretIndex = index;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretBeginningOfPreviousLine,(void))

void TextField_obj::_hx___caretEndOfLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1695___caretEndOfLine)
HXLINE(1696)		int lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
HXLINE(1698)		if ((lineIndex < (this->_hx___textEngine->numLines - 1))) {
HXLINE(1700)			this->_hx___caretIndex = (this->getLineOffset((lineIndex + 1)) - 1);
            		}
            		else {
HXLINE(1704)			this->_hx___caretIndex = this->_hx___text.length;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretEndOfLine,(void))

void TextField_obj::_hx___caretNextCharacter(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1710___caretNextCharacter)
HXDLIN(1710)		if ((this->_hx___caretIndex < this->_hx___text.length)) {
HXLINE(1712)			this->_hx___caretIndex++;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretNextCharacter,(void))

void TextField_obj::_hx___caretNextLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1717___caretNextLine)
HXLINE(1718)		int lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
HXLINE(1720)		if ((lineIndex < (this->_hx___textEngine->numLines - 1))) {
HXLINE(1722)			this->_hx___caretIndex = this->_hx___getCharIndexOnDifferentLine(this->get_caretIndex(),(lineIndex + 1));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretNextLine,(void))

void TextField_obj::_hx___caretPreviousCharacter(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1728___caretPreviousCharacter)
HXDLIN(1728)		if ((this->_hx___caretIndex > 0)) {
HXLINE(1730)			this->_hx___caretIndex--;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretPreviousCharacter,(void))

void TextField_obj::_hx___caretPreviousLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1735___caretPreviousLine)
HXLINE(1736)		int lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
HXLINE(1738)		if ((lineIndex > 0)) {
HXLINE(1740)			this->_hx___caretIndex = this->_hx___getCharIndexOnDifferentLine(this->get_caretIndex(),(lineIndex - 1));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretPreviousLine,(void))

void TextField_obj::_hx___disableInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1746___disableInput)
HXDLIN(1746)		bool _hx_tmp;
HXDLIN(1746)		if (this->_hx___inputEnabled) {
HXDLIN(1746)			_hx_tmp = ::hx::IsNotNull( this->stage );
            		}
            		else {
HXDLIN(1746)			_hx_tmp = false;
            		}
HXDLIN(1746)		if (_hx_tmp) {
HXLINE(1749)			this->stage->window->_hx___backend->setTextInputEnabled(false);
HXLINE(1750)			this->stage->window->onTextInput->remove(this->window_onTextInput_dyn());
HXLINE(1751)			this->stage->window->onKeyDown->remove(this->window_onKeyDown_dyn());
HXLINE(1754)			this->_hx___inputEnabled = false;
HXLINE(1755)			this->_hx___stopCursorTimer();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___disableInput,(void))

bool TextField_obj::_hx___dispatch( ::openfl::events::Event event){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1760___dispatch)
HXLINE(1761)		bool _hx_tmp;
HXDLIN(1761)		if ((event->eventPhase == 2)) {
HXLINE(1761)			_hx_tmp = (event->type == HX_("mouseUp",e0,f3,72,c0));
            		}
            		else {
HXLINE(1761)			_hx_tmp = false;
            		}
HXDLIN(1761)		if (_hx_tmp) {
HXLINE(1763)			 ::openfl::events::MouseEvent event1 = ( ( ::openfl::events::MouseEvent)(event) );
HXLINE(1764)			Float group = this->get_mouseX();
HXDLIN(1764)			 ::openfl::text::_internal::TextLayoutGroup group1 = this->_hx___getGroup(group,this->get_mouseY(),true);
HXLINE(1766)			if (::hx::IsNotNull( group1 )) {
HXLINE(1768)				::String url = group1->format->url;
HXLINE(1770)				bool _hx_tmp1;
HXDLIN(1770)				if (::hx::IsNotNull( url )) {
HXLINE(1770)					_hx_tmp1 = (url != HX_("",00,00,00,00));
            				}
            				else {
HXLINE(1770)					_hx_tmp1 = false;
            				}
HXDLIN(1770)				if (_hx_tmp1) {
HXLINE(1772)					if (::StringTools_obj::startsWith(url,HX_("event:",e0,4e,6a,96))) {
HXLINE(1774)						this->dispatchEvent( ::openfl::events::TextEvent_obj::__alloc( HX_CTX ,HX_("link",fa,17,b3,47),true,false,url.substr(6,null())));
            					}
            					else {
HXLINE(1778)						::openfl::Lib_obj::getURL( ::openfl::net::URLRequest_obj::__alloc( HX_CTX ,url),null());
            					}
            				}
            			}
            		}
HXLINE(1784)		return this->super::_hx___dispatch(event);
            	}


void TextField_obj::_hx___enableInput(){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1790___enableInput)
HXDLIN(1790)		if (::hx::IsNotNull( this->stage )) {
HXLINE(1792)			this->stage->window->_hx___backend->setTextInputEnabled(true);
HXLINE(1796)			 ::openfl::geom::Rectangle bounds = this->getBounds(this->stage);
HXLINE(1797)			 ::lime::math::Rectangle limeRect =  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,bounds->x,bounds->y,bounds->width,bounds->height);
HXLINE(1813)			this->stage->window->setTextInputRect(limeRect);
HXLINE(1816)			if (!(this->_hx___inputEnabled)) {
HXLINE(1818)				this->stage->window->_hx___backend->setTextInputEnabled(true);
HXLINE(1820)				if (!(this->stage->window->onTextInput->has(this->window_onTextInput_dyn()))) {
HXLINE(1822)					this->stage->window->onTextInput->add(this->window_onTextInput_dyn(),null(),null());
HXLINE(1823)					this->stage->window->onKeyDown->add(this->window_onKeyDown_dyn(),null(),null());
            				}
HXLINE(1826)				this->_hx___inputEnabled = true;
HXLINE(1830)				this->_hx___stopCursorTimer();
HXLINE(1831)				this->_hx___startCursorTimer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___enableInput,(void))

Float TextField_obj::_hx___getAdvance( ::Dynamic position){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1842___getAdvance)
HXDLIN(1842)		return ( (Float)( ::Dynamic(position->__Field(HX_("advance",82,08,0c,ef),::hx::paccDynamic))->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,_hx___getAdvance,return )

void TextField_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1847___getBounds)
HXLINE(1848)		this->_hx___updateLayout();
HXLINE(1850)		 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(1851)		bounds->copyFrom(this->_hx___textEngine->bounds);
HXLINE(1852)		bounds->offset(this->_hx___offsetX,this->_hx___offsetY);
HXLINE(1853)		bounds->_hx___transform(bounds,matrix);
HXLINE(1855)		rect->_hx___expand(bounds->x,bounds->y,bounds->width,bounds->height);
HXLINE(1857)		::openfl::geom::Rectangle_obj::_hx___pool->release(bounds);
            	}


bool TextField_obj::_hx___getCharBoundaries(int charIndex, ::openfl::geom::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1861___getCharBoundaries)
HXLINE(1862)		bool _hx_tmp;
HXDLIN(1862)		if ((charIndex >= 0)) {
HXLINE(1862)			_hx_tmp = (charIndex > (this->_hx___text.length - 1));
            		}
            		else {
HXLINE(1862)			_hx_tmp = true;
            		}
HXDLIN(1862)		if (_hx_tmp) {
HXLINE(1862)			return false;
            		}
HXLINE(1864)		this->_hx___updateLayout();
HXLINE(1866)		{
HXLINE(1866)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1866)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1866)				 ::openfl::text::_internal::TextLayoutGroup group1 = ( ( ::openfl::text::_internal::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1868)				bool _hx_tmp1;
HXDLIN(1868)				if ((charIndex >= group1->startIndex)) {
HXLINE(1868)					_hx_tmp1 = (charIndex < group1->endIndex);
            				}
            				else {
HXLINE(1868)					_hx_tmp1 = false;
            				}
HXDLIN(1868)				if (_hx_tmp1) {
HXLINE(1870)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1872)						Float x = group1->offsetX;
HXLINE(1874)						{
HXLINE(1874)							int _g = 0;
HXDLIN(1874)							int _g1 = (charIndex - group1->startIndex);
HXDLIN(1874)							while((_g < _g1)){
HXLINE(1874)								_g = (_g + 1);
HXDLIN(1874)								int i = (_g - 1);
HXLINE(1876)								Float x1;
HXDLIN(1876)								bool x2;
HXDLIN(1876)								if ((i >= 0)) {
HXLINE(1876)									x2 = (i < group1->positions->length);
            								}
            								else {
HXLINE(1876)									x2 = false;
            								}
HXDLIN(1876)								if (x2) {
HXLINE(1876)									x1 = group1->positions->__get(i).StaticCast<  ::openfl::text::_internal::GlyphPosition >()->advance->x;
            								}
            								else {
HXLINE(1876)									x1 = ( (Float)(0) );
            								}
HXDLIN(1876)								x = (x + x1);
            							}
            						}
HXLINE(1880)						int index = (charIndex - group1->startIndex);
HXDLIN(1880)						Float lastPosition;
HXDLIN(1880)						bool lastPosition1;
HXDLIN(1880)						if ((index >= 0)) {
HXLINE(1880)							lastPosition1 = (index < group1->positions->length);
            						}
            						else {
HXLINE(1880)							lastPosition1 = false;
            						}
HXDLIN(1880)						if (lastPosition1) {
HXLINE(1880)							lastPosition = group1->positions->__get(index).StaticCast<  ::openfl::text::_internal::GlyphPosition >()->advance->x;
            						}
            						else {
HXLINE(1880)							lastPosition = ( (Float)(0) );
            						}
HXLINE(1882)						rect->setTo(x,group1->offsetY,lastPosition,(group1->ascent + group1->descent));
HXLINE(1883)						return true;
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic _g2 = _hx_e;
HXLINE(1885)							{
HXLINE(1885)								null();
            							}
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            			}
            		}
HXLINE(1889)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getCharBoundaries,return )

int TextField_obj::_hx___getCharIndexOnDifferentLine(int charIndex,int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1893___getCharIndexOnDifferentLine)
HXLINE(1894)		bool _hx_tmp;
HXDLIN(1894)		if ((charIndex >= 0)) {
HXLINE(1894)			_hx_tmp = (charIndex > this->_hx___text.length);
            		}
            		else {
HXLINE(1894)			_hx_tmp = true;
            		}
HXDLIN(1894)		if (_hx_tmp) {
HXLINE(1894)			return -1;
            		}
HXLINE(1895)		bool _hx_tmp1;
HXDLIN(1895)		if ((lineIndex >= 0)) {
HXLINE(1895)			_hx_tmp1 = (lineIndex > (this->_hx___textEngine->numLines - 1));
            		}
            		else {
HXLINE(1895)			_hx_tmp1 = true;
            		}
HXDLIN(1895)		if (_hx_tmp1) {
HXLINE(1895)			return -1;
            		}
HXLINE(1897)		 ::Dynamic x = null();
HXDLIN(1897)		 ::Dynamic y = null();
HXLINE(1899)		{
HXLINE(1899)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1899)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1899)				 ::openfl::text::_internal::TextLayoutGroup group1 = ( ( ::openfl::text::_internal::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1901)				bool _hx_tmp2;
HXDLIN(1901)				if ((charIndex >= group1->startIndex)) {
HXLINE(1901)					_hx_tmp2 = (charIndex <= group1->endIndex);
            				}
            				else {
HXLINE(1901)					_hx_tmp2 = false;
            				}
HXDLIN(1901)				if (_hx_tmp2) {
HXLINE(1903)					x = group1->offsetX;
HXLINE(1905)					{
HXLINE(1905)						int _g = 0;
HXDLIN(1905)						int _g1 = (charIndex - group1->startIndex);
HXDLIN(1905)						while((_g < _g1)){
HXLINE(1905)							_g = (_g + 1);
HXDLIN(1905)							int i = (_g - 1);
HXLINE(1907)							Float x1;
HXDLIN(1907)							bool x2;
HXDLIN(1907)							if ((i >= 0)) {
HXLINE(1907)								x2 = (i < group1->positions->length);
            							}
            							else {
HXLINE(1907)								x2 = false;
            							}
HXDLIN(1907)							if (x2) {
HXLINE(1907)								x1 = group1->positions->__get(i).StaticCast<  ::openfl::text::_internal::GlyphPosition >()->advance->x;
            							}
            							else {
HXLINE(1907)								x1 = ( (Float)(0) );
            							}
HXDLIN(1907)							x = (x + x1);
            						}
            					}
HXLINE(1910)					if (::hx::IsNotNull( y )) {
HXLINE(1910)						return this->_hx___getPosition(( (Float)(x) ),( (Float)(y) ));
            					}
            				}
HXLINE(1913)				if ((group1->lineIndex == lineIndex)) {
HXLINE(1915)					y = (group1->offsetY + (group1->height / ( (Float)(2) )));
HXLINE(1917)					{
HXLINE(1917)						int _g2 = 0;
HXDLIN(1917)						int _g3 = (this->get_scrollV() - 1);
HXDLIN(1917)						while((_g2 < _g3)){
HXLINE(1917)							_g2 = (_g2 + 1);
HXDLIN(1917)							int i1 = (_g2 - 1);
HXLINE(1919)							y = (y - this->_hx___textEngine->lineHeights->get(i1));
            						}
            					}
HXLINE(1922)					if (::hx::IsNotNull( x )) {
HXLINE(1922)						return this->_hx___getPosition(( (Float)(x) ),( (Float)(y) ));
            					}
            				}
            			}
            		}
HXLINE(1926)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getCharIndexOnDifferentLine,return )

::String TextField_obj::_hx___getCursor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1930___getCursor)
HXLINE(1931)		Float group = this->get_mouseX();
HXDLIN(1931)		 ::openfl::text::_internal::TextLayoutGroup group1 = this->_hx___getGroup(group,this->get_mouseY(),true);
HXLINE(1933)		bool _hx_tmp;
HXDLIN(1933)		if (::hx::IsNotNull( group1 )) {
HXLINE(1933)			_hx_tmp = (group1->format->url != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(1933)			_hx_tmp = false;
            		}
HXDLIN(1933)		if (_hx_tmp) {
HXLINE(1935)			return HX_("button",f2,61,e0,d9);
            		}
            		else {
HXLINE(1937)			if (this->_hx___textEngine->selectable) {
HXLINE(1939)				return HX_("ibeam",58,ca,26,b6);
            			}
            		}
HXLINE(1942)		return null();
            	}


 ::openfl::text::_internal::TextLayoutGroup TextField_obj::_hx___getGroup(Float x,Float y,::hx::Null< bool >  __o_precise){
            		bool precise = __o_precise.Default(false);
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1946___getGroup)
HXLINE(1947)		this->_hx___updateLayout();
HXLINE(1949)		x = (x + this->get_scrollH());
HXLINE(1951)		{
HXLINE(1951)			int _g = 0;
HXDLIN(1951)			int _g1 = (this->get_scrollV() - 1);
HXDLIN(1951)			while((_g < _g1)){
HXLINE(1951)				_g = (_g + 1);
HXDLIN(1951)				int i = (_g - 1);
HXLINE(1953)				y = (y + this->_hx___textEngine->lineHeights->get(i));
            			}
            		}
HXLINE(1956)		bool _hx_tmp;
HXDLIN(1956)		if (!(precise)) {
HXLINE(1956)			_hx_tmp = (y > this->_hx___textEngine->textHeight);
            		}
            		else {
HXLINE(1956)			_hx_tmp = false;
            		}
HXDLIN(1956)		if (_hx_tmp) {
HXLINE(1956)			y = this->_hx___textEngine->textHeight;
            		}
HXLINE(1958)		bool firstGroup = true;
HXLINE(1959)		 ::openfl::text::_internal::TextLayoutGroup group;
HXLINE(1960)		 ::openfl::text::_internal::TextLayoutGroup nextGroup;
HXLINE(1962)		{
HXLINE(1962)			int _g2 = 0;
HXDLIN(1962)			int _g3 = this->_hx___textEngine->layoutGroups->get_length();
HXDLIN(1962)			while((_g2 < _g3)){
HXLINE(1962)				_g2 = (_g2 + 1);
HXDLIN(1962)				int i1 = (_g2 - 1);
HXLINE(1964)				group = this->_hx___textEngine->layoutGroups->get(i1).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXLINE(1966)				if ((i1 < (this->_hx___textEngine->layoutGroups->get_length() - 1))) {
HXLINE(1968)					nextGroup = this->_hx___textEngine->layoutGroups->get((i1 + 1)).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
            				}
            				else {
HXLINE(1972)					nextGroup = null();
            				}
HXLINE(1975)				if (firstGroup) {
HXLINE(1977)					if ((y < group->offsetY)) {
HXLINE(1977)						y = group->offsetY;
            					}
HXLINE(1978)					if ((x < group->offsetX)) {
HXLINE(1978)						x = group->offsetX;
            					}
HXLINE(1979)					firstGroup = false;
            				}
HXLINE(1982)				bool _hx_tmp1;
HXDLIN(1982)				bool _hx_tmp2;
HXDLIN(1982)				if ((y >= group->offsetY)) {
HXLINE(1982)					_hx_tmp2 = (y <= (group->offsetY + group->height));
            				}
            				else {
HXLINE(1982)					_hx_tmp2 = false;
            				}
HXDLIN(1982)				if (!(_hx_tmp2)) {
HXLINE(1982)					if (!(precise)) {
HXLINE(1982)						_hx_tmp1 = ::hx::IsNull( nextGroup );
            					}
            					else {
HXLINE(1982)						_hx_tmp1 = false;
            					}
            				}
            				else {
HXLINE(1982)					_hx_tmp1 = true;
            				}
HXDLIN(1982)				if (_hx_tmp1) {
HXLINE(1984)					bool _hx_tmp3;
HXDLIN(1984)					bool _hx_tmp4;
HXDLIN(1984)					if ((x >= group->offsetX)) {
HXLINE(1984)						_hx_tmp4 = (x <= (group->offsetX + group->width));
            					}
            					else {
HXLINE(1984)						_hx_tmp4 = false;
            					}
HXDLIN(1984)					if (!(_hx_tmp4)) {
HXLINE(1985)						if (!(precise)) {
HXLINE(1985)							if (::hx::IsNotNull( nextGroup )) {
HXLINE(1984)								_hx_tmp3 = (nextGroup->lineIndex != group->lineIndex);
            							}
            							else {
HXLINE(1984)								_hx_tmp3 = true;
            							}
            						}
            						else {
HXLINE(1984)							_hx_tmp3 = false;
            						}
            					}
            					else {
HXLINE(1984)						_hx_tmp3 = true;
            					}
HXDLIN(1984)					if (_hx_tmp3) {
HXLINE(1987)						return group;
            					}
            				}
            			}
            		}
HXLINE(1992)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,_hx___getGroup,return )

int TextField_obj::_hx___getPosition(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1996___getPosition)
HXLINE(1997)		 ::openfl::text::_internal::TextLayoutGroup group = this->_hx___getGroup(x,y,null());
HXLINE(1999)		if (::hx::IsNull( group )) {
HXLINE(2001)			return this->_hx___text.length;
            		}
HXLINE(2004)		Float advance = ((Float)0.0);
HXLINE(2006)		{
HXLINE(2006)			int _g = 0;
HXDLIN(2006)			int _g1 = group->positions->length;
HXDLIN(2006)			while((_g < _g1)){
HXLINE(2006)				_g = (_g + 1);
HXDLIN(2006)				int i = (_g - 1);
HXLINE(2008)				Float advance1;
HXDLIN(2008)				bool advance2;
HXDLIN(2008)				if ((i >= 0)) {
HXLINE(2008)					advance2 = (i < group->positions->length);
            				}
            				else {
HXLINE(2008)					advance2 = false;
            				}
HXDLIN(2008)				if (advance2) {
HXLINE(2008)					advance1 = group->positions->__get(i).StaticCast<  ::openfl::text::_internal::GlyphPosition >()->advance->x;
            				}
            				else {
HXLINE(2008)					advance1 = ( (Float)(0) );
            				}
HXDLIN(2008)				advance = (advance + advance1);
HXLINE(2010)				if ((x <= (group->offsetX + advance))) {
HXLINE(2012)					Float _hx_tmp;
HXDLIN(2012)					bool _hx_tmp1;
HXDLIN(2012)					if ((i >= 0)) {
HXLINE(2012)						_hx_tmp1 = (i < group->positions->length);
            					}
            					else {
HXLINE(2012)						_hx_tmp1 = false;
            					}
HXDLIN(2012)					if (_hx_tmp1) {
HXLINE(2012)						_hx_tmp = group->positions->__get(i).StaticCast<  ::openfl::text::_internal::GlyphPosition >()->advance->x;
            					}
            					else {
HXLINE(2012)						_hx_tmp = ( (Float)(0) );
            					}
HXDLIN(2012)					Float _hx_tmp2;
HXDLIN(2012)					bool _hx_tmp3;
HXDLIN(2012)					if ((i >= 0)) {
HXLINE(2012)						_hx_tmp3 = (i < group->positions->length);
            					}
            					else {
HXLINE(2012)						_hx_tmp3 = false;
            					}
HXDLIN(2012)					if (_hx_tmp3) {
HXLINE(2012)						_hx_tmp2 = group->positions->__get(i).StaticCast<  ::openfl::text::_internal::GlyphPosition >()->advance->x;
            					}
            					else {
HXLINE(2012)						_hx_tmp2 = ( (Float)(0) );
            					}
HXDLIN(2012)					if ((x <= ((group->offsetX + (advance - _hx_tmp)) + (_hx_tmp2 / ( (Float)(2) ))))) {
HXLINE(2014)						return (group->startIndex + i);
            					}
            					else {
HXLINE(2018)						if (((group->startIndex + i) < group->endIndex)) {
HXLINE(2018)							return ((group->startIndex + i) + 1);
            						}
            						else {
HXLINE(2018)							return group->endIndex;
            						}
            					}
            				}
            			}
            		}
HXLINE(2023)		return group->endIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getPosition,return )

int TextField_obj::_hx___getPositionByIdentifier(Float x,Float y,bool line){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2027___getPositionByIdentifier)
HXLINE(2028)		int position = this->_hx___getPosition(x,y);
HXLINE(2029)		::String delimiters;
HXDLIN(2029)		if (line) {
HXLINE(2029)			delimiters = HX_("\n",0a,00,00,00);
            		}
            		else {
HXLINE(2029)			delimiters = HX_(" .,;:!?()[]{}<>/\\|-=+*&^%$#@~`'\"\n",bd,6f,97,b8);
            		}
HXLINE(2030)		::String _hx_char = this->_hx___text.charAt(position);
HXLINE(2031)		if ((this->_hx___specialSelectionInitialIndex <= position)) {
HXLINE(2033)			while(true){
HXLINE(2033)				bool _hx_tmp;
HXDLIN(2033)				if ((delimiters.indexOf(_hx_char,null()) == -1)) {
HXLINE(2033)					_hx_tmp = (position < this->_hx___text.length);
            				}
            				else {
HXLINE(2033)					_hx_tmp = false;
            				}
HXDLIN(2033)				if (!(_hx_tmp)) {
HXLINE(2033)					goto _hx_goto_58;
            				}
HXLINE(2035)				position = (position + 1);
HXLINE(2036)				_hx_char = this->_hx___text.charAt(position);
            			}
            			_hx_goto_58:;
            		}
            		else {
HXLINE(2041)			while(true){
HXLINE(2041)				bool _hx_tmp1;
HXDLIN(2041)				if ((delimiters.indexOf(_hx_char,null()) == -1)) {
HXLINE(2041)					_hx_tmp1 = (position > 0);
            				}
            				else {
HXLINE(2041)					_hx_tmp1 = false;
            				}
HXDLIN(2041)				if (!(_hx_tmp1)) {
HXLINE(2041)					goto _hx_goto_59;
            				}
HXLINE(2043)				position = (position - 1);
HXLINE(2044)				_hx_char = this->_hx___text.charAt(position);
            			}
            			_hx_goto_59:;
HXLINE(2047)			if ((position == 0)) {
HXLINE(2047)				return position;
            			}
HXLINE(2048)			position = (position + 1);
            		}
HXLINE(2051)		return position;
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,_hx___getPositionByIdentifier,return )

int TextField_obj::_hx___getOppositeIdentifierBound(int charIndex,bool line){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2055___getOppositeIdentifierBound)
HXLINE(2056)		int position = charIndex;
HXLINE(2057)		::String delimiters;
HXDLIN(2057)		if (line) {
HXLINE(2057)			delimiters = HX_("\n",0a,00,00,00);
            		}
            		else {
HXLINE(2057)			delimiters = HX_(" .,;:!?()[]{}<>/\\|-=+*&^%$#@~`'\"\n",bd,6f,97,b8);
            		}
HXLINE(2058)		::String _hx_char = this->_hx___text.charAt(position);
HXLINE(2060)		if ((position <= this->_hx___caretIndex)) {
HXLINE(2062)			if ((position == 0)) {
HXLINE(2062)				return position;
            			}
HXLINE(2063)			while(true){
HXLINE(2065)				position = (position - 1);
HXLINE(2066)				_hx_char = this->_hx___text.charAt(position);
HXLINE(2068)				bool _hx_tmp;
HXDLIN(2068)				if ((delimiters.indexOf(_hx_char,null()) == -1)) {
HXLINE(2068)					_hx_tmp = (position > 0);
            				}
            				else {
HXLINE(2068)					_hx_tmp = false;
            				}
HXLINE(2063)				if (!(_hx_tmp)) {
HXLINE(2063)					goto _hx_goto_61;
            				}
            			}
            			_hx_goto_61:;
HXLINE(2069)			if ((position == 0)) {
HXLINE(2069)				return position;
            			}
HXLINE(2070)			position = (position + 1);
            		}
            		else {
HXLINE(2074)			while(true){
HXLINE(2074)				bool _hx_tmp1;
HXDLIN(2074)				if ((delimiters.indexOf(_hx_char,null()) == -1)) {
HXLINE(2074)					_hx_tmp1 = (position < this->_hx___text.length);
            				}
            				else {
HXLINE(2074)					_hx_tmp1 = false;
            				}
HXDLIN(2074)				if (!(_hx_tmp1)) {
HXLINE(2074)					goto _hx_goto_62;
            				}
HXLINE(2076)				position = (position + 1);
HXLINE(2077)				_hx_char = this->_hx___text.charAt(position);
            			}
            			_hx_goto_62:;
            		}
HXLINE(2081)		return position;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getOppositeIdentifierBound,return )

bool TextField_obj::_hx___hitTest(Float x,Float y,bool shapeFlag,::Array< ::Dynamic> stack,bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2086___hitTest)
HXLINE(2087)		bool _hx_tmp;
HXDLIN(2087)		bool _hx_tmp1;
HXDLIN(2087)		if (hitObject->get_visible()) {
HXLINE(2087)			_hx_tmp1 = this->_hx___isMask;
            		}
            		else {
HXLINE(2087)			_hx_tmp1 = true;
            		}
HXDLIN(2087)		if (!(_hx_tmp1)) {
HXLINE(2087)			if (interactiveOnly) {
HXLINE(2087)				_hx_tmp = !(this->mouseEnabled);
            			}
            			else {
HXLINE(2087)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(2087)			_hx_tmp = true;
            		}
HXDLIN(2087)		if (_hx_tmp) {
HXLINE(2087)			return false;
            		}
HXLINE(2088)		bool _hx_tmp2;
HXDLIN(2088)		if (::hx::IsNotNull( this->get_mask() )) {
HXLINE(2088)			_hx_tmp2 = !(this->get_mask()->_hx___hitTestMask(x,y));
            		}
            		else {
HXLINE(2088)			_hx_tmp2 = false;
            		}
HXDLIN(2088)		if (_hx_tmp2) {
HXLINE(2088)			return false;
            		}
HXLINE(2090)		this->_hx___getRenderTransform();
HXLINE(2091)		this->_hx___updateLayout();
HXLINE(2093)		 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(2093)		Float norm = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN(2093)		Float px;
HXDLIN(2093)		if ((norm == 0)) {
HXLINE(2093)			px = -(_this->tx);
            		}
            		else {
HXLINE(2093)			px = ((((Float)1.0) / norm) * ((_this->c * (_this->ty - y)) + (_this->d * (x - _this->tx))));
            		}
HXLINE(2094)		 ::openfl::geom::Matrix _this1 = this->_hx___renderTransform;
HXDLIN(2094)		Float norm1 = ((_this1->a * _this1->d) - (_this1->b * _this1->c));
HXDLIN(2094)		Float py;
HXDLIN(2094)		if ((norm1 == 0)) {
HXLINE(2094)			py = -(_this1->ty);
            		}
            		else {
HXLINE(2094)			py = ((((Float)1.0) / norm1) * ((_this1->a * (y - _this1->ty)) + (_this1->b * (_this1->tx - x))));
            		}
HXLINE(2096)		if (this->_hx___textEngine->bounds->contains(px,py)) {
HXLINE(2098)			if (::hx::IsNotNull( stack )) {
HXLINE(2100)				stack->push(hitObject);
            			}
HXLINE(2103)			return true;
            		}
HXLINE(2106)		return false;
            	}


bool TextField_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2110___hitTestMask)
HXLINE(2111)		this->_hx___getRenderTransform();
HXLINE(2112)		this->_hx___updateLayout();
HXLINE(2114)		 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(2114)		Float norm = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN(2114)		Float px;
HXDLIN(2114)		if ((norm == 0)) {
HXLINE(2114)			px = -(_this->tx);
            		}
            		else {
HXLINE(2114)			px = ((((Float)1.0) / norm) * ((_this->c * (_this->ty - y)) + (_this->d * (x - _this->tx))));
            		}
HXLINE(2115)		 ::openfl::geom::Matrix _this1 = this->_hx___renderTransform;
HXDLIN(2115)		Float norm1 = ((_this1->a * _this1->d) - (_this1->b * _this1->c));
HXDLIN(2115)		Float py;
HXDLIN(2115)		if ((norm1 == 0)) {
HXLINE(2115)			py = -(_this1->ty);
            		}
            		else {
HXLINE(2115)			py = ((((Float)1.0) / norm1) * ((_this1->a * (y - _this1->ty)) + (_this1->b * (_this1->tx - x))));
            		}
HXLINE(2117)		if (this->_hx___textEngine->bounds->contains(px,py)) {
HXLINE(2119)			return true;
            		}
HXLINE(2122)		return false;
            	}


void TextField_obj::_hx___replaceSelectedText(::String value,::hx::Null< bool >  __o_restrict){
            		bool restrict = __o_restrict.Default(true);
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2126___replaceSelectedText)
HXLINE(2127)		if (::hx::IsNull( value )) {
HXLINE(2127)			value = HX_("",00,00,00,00);
            		}
HXLINE(2128)		bool _hx_tmp;
HXDLIN(2128)		if ((value == HX_("",00,00,00,00))) {
HXLINE(2128)			_hx_tmp = (this->_hx___selectionIndex == this->_hx___caretIndex);
            		}
            		else {
HXLINE(2128)			_hx_tmp = false;
            		}
HXDLIN(2128)		if (_hx_tmp) {
HXLINE(2128)			return;
            		}
HXLINE(2130)		int startIndex;
HXDLIN(2130)		if ((this->_hx___caretIndex < this->_hx___selectionIndex)) {
HXLINE(2130)			startIndex = this->_hx___caretIndex;
            		}
            		else {
HXLINE(2130)			startIndex = this->_hx___selectionIndex;
            		}
HXLINE(2131)		int endIndex;
HXDLIN(2131)		if ((this->_hx___caretIndex > this->_hx___selectionIndex)) {
HXLINE(2131)			endIndex = this->_hx___caretIndex;
            		}
            		else {
HXLINE(2131)			endIndex = this->_hx___selectionIndex;
            		}
HXLINE(2133)		bool _hx_tmp1;
HXDLIN(2133)		bool _hx_tmp2;
HXDLIN(2133)		if ((startIndex == endIndex)) {
HXLINE(2133)			_hx_tmp2 = (this->_hx___textEngine->maxChars > 0);
            		}
            		else {
HXLINE(2133)			_hx_tmp2 = false;
            		}
HXDLIN(2133)		if (_hx_tmp2) {
HXLINE(2133)			_hx_tmp1 = (this->_hx___text.length == this->_hx___textEngine->maxChars);
            		}
            		else {
HXLINE(2133)			_hx_tmp1 = false;
            		}
HXDLIN(2133)		if (_hx_tmp1) {
HXLINE(2133)			return;
            		}
HXLINE(2135)		if ((startIndex > this->_hx___text.length)) {
HXLINE(2135)			startIndex = this->_hx___text.length;
            		}
HXLINE(2136)		if ((endIndex > this->_hx___text.length)) {
HXLINE(2136)			endIndex = this->_hx___text.length;
            		}
HXLINE(2137)		if ((endIndex < startIndex)) {
HXLINE(2139)			int cache = endIndex;
HXLINE(2140)			endIndex = startIndex;
HXLINE(2141)			startIndex = cache;
            		}
HXLINE(2143)		if ((startIndex < 0)) {
HXLINE(2143)			startIndex = 0;
            		}
HXLINE(2145)		this->_hx___replaceText(startIndex,endIndex,value,restrict);
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___replaceSelectedText,(void))

void TextField_obj::_hx___replaceText(int beginIndex,int endIndex,::String newText,bool restrict){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2149___replaceText)
HXLINE(2150)		bool _hx_tmp;
HXDLIN(2150)		bool _hx_tmp1;
HXDLIN(2150)		bool _hx_tmp2;
HXDLIN(2150)		if ((endIndex >= beginIndex)) {
HXLINE(2150)			_hx_tmp2 = (beginIndex < 0);
            		}
            		else {
HXLINE(2150)			_hx_tmp2 = true;
            		}
HXDLIN(2150)		if (!(_hx_tmp2)) {
HXLINE(2150)			_hx_tmp1 = (endIndex > this->_hx___text.length);
            		}
            		else {
HXLINE(2150)			_hx_tmp1 = true;
            		}
HXDLIN(2150)		if (!(_hx_tmp1)) {
HXLINE(2150)			_hx_tmp = ::hx::IsNull( newText );
            		}
            		else {
HXLINE(2150)			_hx_tmp = true;
            		}
HXDLIN(2150)		if (_hx_tmp) {
HXLINE(2150)			return;
            		}
HXLINE(2152)		if (restrict) {
HXLINE(2154)			newText = this->_hx___textEngine->restrictText(newText);
HXLINE(2156)			if ((this->_hx___textEngine->maxChars > 0)) {
HXLINE(2158)				int removeLength = (endIndex - beginIndex);
HXLINE(2159)				int maxLength = ((this->_hx___textEngine->maxChars - this->_hx___text.length) + removeLength);
HXLINE(2161)				if ((maxLength <= 0)) {
HXLINE(2163)					newText = HX_("",00,00,00,00);
            				}
            				else {
HXLINE(2165)					if ((maxLength < newText.length)) {
HXLINE(2167)						newText = newText.substr(0,maxLength);
            					}
            				}
            			}
            		}
HXLINE(2172)		::String _hx_tmp3 = (this->_hx___text.substring(0,beginIndex) + newText);
HXDLIN(2172)		this->_hx___updateText((_hx_tmp3 + this->_hx___text.substring(endIndex,null())));
HXLINE(2174)		int offset = (newText.length - (endIndex - beginIndex));
HXLINE(2176)		int i = 0;
HXLINE(2177)		 ::openfl::text::_internal::TextFormatRange range;
HXLINE(2179)		while((i < this->_hx___textEngine->textFormatRanges->get_length())){
HXLINE(2181)			range = this->_hx___textEngine->textFormatRanges->get(i).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXLINE(2183)			if ((beginIndex == endIndex)) {
HXLINE(2185)				if ((range->start == range->end)) {
HXLINE(2188)					if ((range->start != 0)) {
HXLINE(2190)						::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",8e,c1,17,2f),::hx::SourceInfo(HX_("openfl/text/TextField.hx",94,20,f0,cc),2190,HX_("openfl.text.TextField",ca,a8,d5,ef),HX_("__replaceText",e1,ab,0d,aa)));
            					}
            					else {
HXLINE(2194)						 ::openfl::text::_internal::TextFormatRange range1 = range;
HXDLIN(2194)						range1->end = (range1->end + offset);
            					}
            				}
            				else {
HXLINE(2197)					if ((range->end >= beginIndex)) {
HXLINE(2201)						if ((range->start >= beginIndex)) {
HXLINE(2204)							 ::openfl::text::_internal::TextFormatRange range2 = range;
HXDLIN(2204)							range2->start = (range2->start + offset);
HXLINE(2205)							 ::openfl::text::_internal::TextFormatRange range3 = range;
HXDLIN(2205)							range3->end = (range3->end + offset);
            						}
            						else {
HXLINE(2207)							bool _hx_tmp4;
HXDLIN(2207)							if ((range->start < beginIndex)) {
HXLINE(2207)								_hx_tmp4 = (range->end >= endIndex);
            							}
            							else {
HXLINE(2207)								_hx_tmp4 = false;
            							}
HXDLIN(2207)							if (_hx_tmp4) {
HXLINE(2211)								 ::openfl::text::_internal::TextFormatRange range4 = range;
HXDLIN(2211)								range4->end = (range4->end + offset);
            							}
            						}
            					}
            				}
            			}
            			else {
HXLINE(2216)				if ((range->end > beginIndex)) {
HXLINE(2220)					if ((range->start > endIndex)) {
HXLINE(2223)						 ::openfl::text::_internal::TextFormatRange range5 = range;
HXDLIN(2223)						range5->start = (range5->start + offset);
HXLINE(2224)						 ::openfl::text::_internal::TextFormatRange range6 = range;
HXDLIN(2224)						range6->end = (range6->end + offset);
            					}
            					else {
HXLINE(2226)						bool _hx_tmp5;
HXDLIN(2226)						if ((range->start <= beginIndex)) {
HXLINE(2226)							_hx_tmp5 = (range->end > endIndex);
            						}
            						else {
HXLINE(2226)							_hx_tmp5 = false;
            						}
HXDLIN(2226)						if (_hx_tmp5) {
HXLINE(2229)							 ::openfl::text::_internal::TextFormatRange range7 = range;
HXDLIN(2229)							range7->end = (range7->end + offset);
            						}
            						else {
HXLINE(2231)							bool _hx_tmp6;
HXDLIN(2231)							if ((range->start >= beginIndex)) {
HXLINE(2231)								_hx_tmp6 = (range->end <= endIndex);
            							}
            							else {
HXLINE(2231)								_hx_tmp6 = false;
            							}
HXDLIN(2231)							if (_hx_tmp6) {
HXLINE(2234)								::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2234)								i = (i - 1);
HXDLIN(2234)								this1->__SetField(HX_("__tempIndex",3e,e8,54,22),(i + 1),::hx::paccDynamic);
HXDLIN(2234)								{
HXLINE(2234)									int _g_current = 0;
HXDLIN(2234)									::cpp::VirtualArray _g_args = ::cpp::VirtualArray_obj::__new(0);
HXDLIN(2234)									while((_g_current < _g_args->get_length())){
HXLINE(2234)										_g_current = (_g_current + 1);
HXDLIN(2234)										 ::Dynamic item = _g_args->__get((_g_current - 1));
HXDLIN(2234)										( ( ::openfl::_Vector::ObjectVector)(this1) )->insertAt(( (int)(this1->__Field(HX_("__tempIndex",3e,e8,54,22),::hx::paccDynamic)) ),( ( ::openfl::text::_internal::TextFormatRange)(item) ));
HXDLIN(2234)										::hx::FieldRef((this1).mPtr,HX_("__tempIndex",3e,e8,54,22))++;
            									}
            								}
HXDLIN(2234)								( ( ::openfl::_Vector::ObjectVector)(this1) )->splice(( (int)(this1->__Field(HX_("__tempIndex",3e,e8,54,22),::hx::paccDynamic)) ),1);
            							}
            							else {
HXLINE(2236)								bool _hx_tmp7;
HXDLIN(2236)								bool _hx_tmp8;
HXDLIN(2236)								if ((range->end > endIndex)) {
HXLINE(2236)									_hx_tmp8 = (range->start > beginIndex);
            								}
            								else {
HXLINE(2236)									_hx_tmp8 = false;
            								}
HXDLIN(2236)								if (_hx_tmp8) {
HXLINE(2236)									_hx_tmp7 = (range->start <= endIndex);
            								}
            								else {
HXLINE(2236)									_hx_tmp7 = false;
            								}
HXDLIN(2236)								if (_hx_tmp7) {
HXLINE(2240)									range->start = beginIndex;
HXLINE(2241)									 ::openfl::text::_internal::TextFormatRange range8 = range;
HXDLIN(2241)									range8->end = (range8->end + offset);
            								}
            								else {
HXLINE(2243)									bool _hx_tmp9;
HXDLIN(2243)									bool _hx_tmp10;
HXDLIN(2243)									if ((range->start < beginIndex)) {
HXLINE(2243)										_hx_tmp10 = (range->end > beginIndex);
            									}
            									else {
HXLINE(2243)										_hx_tmp10 = false;
            									}
HXDLIN(2243)									if (_hx_tmp10) {
HXLINE(2243)										_hx_tmp9 = (range->end <= endIndex);
            									}
            									else {
HXLINE(2243)										_hx_tmp9 = false;
            									}
HXDLIN(2243)									if (_hx_tmp9) {
HXLINE(2246)										range->end = beginIndex;
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE(2250)			i = (i + 1);
            		}
HXLINE(2254)		if ((this->_hx___textEngine->textFormatRanges->get_length() == 0)) {
HXLINE(2257)			::Dynamic this2 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2257)			 ::openfl::text::TextFormat value = this->get_defaultTextFormat()->clone();
HXDLIN(2257)			( ( ::openfl::_Vector::ObjectVector)(this2) )->push( ::openfl::text::_internal::TextFormatRange_obj::__alloc( HX_CTX ,value,0,newText.length));
            		}
            		else {
HXLINE(2259)			bool _hx_tmp11;
HXDLIN(2259)			if ((beginIndex == endIndex)) {
HXLINE(2259)				_hx_tmp11 = (this->_hx___textEngine->textFormatRanges->get(0).StaticCast<  ::openfl::text::_internal::TextFormatRange >()->start > 0);
            			}
            			else {
HXLINE(2259)				_hx_tmp11 = false;
            			}
HXDLIN(2259)			if (_hx_tmp11) {
HXLINE(2262)				::Dynamic this3 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2262)				 ::openfl::text::TextFormat value1 = this->get_defaultTextFormat()->clone();
HXDLIN(2262)				( ( ::openfl::_Vector::ObjectVector)(this3) )->unshift( ::openfl::text::_internal::TextFormatRange_obj::__alloc( HX_CTX ,value1,0,this->_hx___textEngine->textFormatRanges->get(0).StaticCast<  ::openfl::text::_internal::TextFormatRange >()->start));
            			}
            			else {
HXLINE(2264)				bool _hx_tmp12;
HXDLIN(2264)				if ((beginIndex != endIndex)) {
HXLINE(2264)					::Dynamic this4 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2264)					 ::openfl::text::_internal::TextFormatRange _hx_tmp13 = ( ( ::openfl::_Vector::ObjectVector)(this4) )->get((this->_hx___textEngine->textFormatRanges->get_length() - 1)).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(2264)					_hx_tmp12 = (_hx_tmp13->end < this->_hx___text.length);
            				}
            				else {
HXLINE(2264)					_hx_tmp12 = false;
            				}
HXDLIN(2264)				if (_hx_tmp12) {
HXLINE(2267)					::Dynamic this5 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2267)					 ::openfl::text::TextFormat value2 = this->get_defaultTextFormat()->clone();
HXLINE(2268)					::Dynamic this6 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2268)					 ::openfl::text::_internal::TextFormatRange value3 = ( ( ::openfl::_Vector::ObjectVector)(this6) )->get((this->_hx___textEngine->textFormatRanges->get_length() - 1)).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXLINE(2267)					( ( ::openfl::_Vector::ObjectVector)(this5) )->push( ::openfl::text::_internal::TextFormatRange_obj::__alloc( HX_CTX ,value2,value3->end,this->_hx___text.length));
            				}
            			}
            		}
HXLINE(2271)		this->_hx___selectionIndex = (this->_hx___caretIndex = (beginIndex + newText.length));
HXLINE(2273)		this->_hx___dirty = true;
HXLINE(2274)		this->_hx___layoutDirty = true;
HXLINE(2275)		if (!(this->_hx___renderDirty)) {
HXLINE(2275)			this->_hx___renderDirty = true;
HXDLIN(2275)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(TextField_obj,_hx___replaceText,(void))

void TextField_obj::_hx___startCursorTimer(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2280___startCursorTimer)
HXDLIN(2280)		if (::hx::IsEq( this->get_type(),1 )) {
HXLINE(2282)			if (this->_hx___inputEnabled) {
HXLINE(2284)				this->_hx___cursorTimer = ::haxe::Timer_obj::delay(this->_hx___startCursorTimer_dyn(),600);
HXLINE(2285)				this->_hx___showCursor = !(this->_hx___showCursor);
            			}
HXLINE(2287)			this->_hx___dirty = true;
HXLINE(2288)			if (!(this->_hx___renderDirty)) {
HXLINE(2288)				this->_hx___renderDirty = true;
HXDLIN(2288)				this->_hx___setParentRenderDirty();
            			}
            		}
            		else {
HXLINE(2290)			if (this->get_selectable()) {
HXLINE(2292)				this->_hx___dirty = true;
HXLINE(2293)				if (!(this->_hx___renderDirty)) {
HXLINE(2293)					this->_hx___renderDirty = true;
HXDLIN(2293)					this->_hx___setParentRenderDirty();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___startCursorTimer,(void))

void TextField_obj::_hx___startTextInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2298___startTextInput)
HXLINE(2299)		if ((this->_hx___caretIndex < 0)) {
HXLINE(2301)			this->_hx___caretIndex = this->_hx___text.length;
HXLINE(2302)			this->_hx___selectionIndex = this->_hx___caretIndex;
            		}
HXLINE(2305)		bool enableInput = true;
HXLINE(2307)		if (enableInput) {
HXLINE(2309)			this->_hx___enableInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___startTextInput,(void))

void TextField_obj::_hx___stopCursorTimer(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2314___stopCursorTimer)
HXLINE(2315)		if (::hx::IsNotNull( this->_hx___cursorTimer )) {
HXLINE(2317)			this->_hx___cursorTimer->stop();
HXLINE(2318)			this->_hx___cursorTimer = null();
            		}
HXLINE(2321)		if (this->_hx___showCursor) {
HXLINE(2323)			this->_hx___showCursor = false;
HXLINE(2324)			this->_hx___dirty = true;
HXLINE(2325)			if (!(this->_hx___renderDirty)) {
HXLINE(2325)				this->_hx___renderDirty = true;
HXDLIN(2325)				this->_hx___setParentRenderDirty();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___stopCursorTimer,(void))

void TextField_obj::_hx___stopTextInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2330___stopTextInput)
HXLINE(2331)		bool disableInput = true;
HXLINE(2333)		if (disableInput) {
HXLINE(2335)			this->_hx___disableInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___stopTextInput,(void))

void TextField_obj::_hx___updateLayout(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2341___updateLayout)
HXDLIN(2341)		if (this->_hx___layoutDirty) {
HXLINE(2343)			Float cacheWidth = this->_hx___textEngine->width;
HXLINE(2344)			this->_hx___textEngine->update();
HXLINE(2346)			if (::hx::IsNotEq( this->_hx___textEngine->autoSize,2 )) {
HXLINE(2348)				if ((this->_hx___textEngine->width != cacheWidth)) {
HXLINE(2350)					 ::Dynamic _hx_switch_0 = this->_hx___textEngine->autoSize;
            					if (  (_hx_switch_0==0) ){
HXLINE(2356)						Float _hx_tmp = this->get_x();
HXDLIN(2356)						this->set_x((_hx_tmp + ((cacheWidth - this->_hx___textEngine->width) / ( (Float)(2) ))));
HXDLIN(2356)						goto _hx_goto_74;
            					}
            					if (  (_hx_switch_0==3) ){
HXLINE(2353)						Float _hx_tmp1 = this->get_x();
HXDLIN(2353)						this->set_x((_hx_tmp1 + (cacheWidth - this->_hx___textEngine->width)));
HXDLIN(2353)						goto _hx_goto_74;
            					}
            					/* default */{
            					}
            					_hx_goto_74:;
            				}
HXLINE(2362)				this->_hx___textEngine->getBounds();
            			}
HXLINE(2365)			this->_hx___layoutDirty = false;
HXLINE(2367)			this->setSelection(this->_hx___selectionIndex,this->_hx___caretIndex);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___updateLayout,(void))

void TextField_obj::_hx___updateMouseDrag(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2372___updateMouseDrag)
HXLINE(2373)		if (::hx::IsNull( this->stage )) {
HXLINE(2373)			return;
            		}
HXLINE(2375)		 ::openfl::geom::Rectangle bounds = this->getBounds(::hx::ObjectPtr<OBJ_>(this));
HXLINE(2377)		Float _hx_tmp = this->get_mouseX();
HXDLIN(2377)		if ((_hx_tmp > (bounds->width - ( (Float)(1) )))) {
HXLINE(2379)			int _hx_tmp1 = this->get_scrollH();
HXDLIN(2379)			Float _hx_tmp2 = this->get_mouseX();
HXDLIN(2379)			this->set_scrollH((_hx_tmp1 + ::Std_obj::_hx_int(::Math_obj::max(::Math_obj::min(((_hx_tmp2 - bounds->width) * ((Float).1)),( (Float)(10) )),( (Float)(1) )))));
            		}
            		else {
HXLINE(2381)			if ((this->get_mouseX() < 1)) {
HXLINE(2383)				int _hx_tmp3 = this->get_scrollH();
HXDLIN(2383)				this->set_scrollH((_hx_tmp3 - ::Std_obj::_hx_int(::Math_obj::max(::Math_obj::min((this->get_mouseX() * ((Float)-.1)),( (Float)(10) )),( (Float)(1) )))));
            			}
            		}
HXLINE(2386)		this->_hx___mouseScrollVCounter++;
HXLINE(2388)		int _hx_tmp4 = this->_hx___mouseScrollVCounter;
HXDLIN(2388)		if ((_hx_tmp4 > (this->stage->get_frameRate() / ( (Float)(10) )))) {
HXLINE(2390)			Float _hx_tmp5 = this->get_mouseY();
HXDLIN(2390)			if ((_hx_tmp5 > (bounds->height - ( (Float)(2) )))) {
HXLINE(2392)				int _hx_tmp6 = this->get_scrollV();
HXDLIN(2392)				Float _hx_tmp7 = this->get_mouseY();
HXDLIN(2392)				Float _hx_tmp8 = (_hx_tmp6 + ::Math_obj::max(::Math_obj::min(((_hx_tmp7 - bounds->height) * ((Float).03)),( (Float)(5) )),( (Float)(1) )));
HXDLIN(2392)				this->set_scrollV(::Std_obj::_hx_int(::Math_obj::min(_hx_tmp8,( (Float)(this->get_maxScrollV()) ))));
            			}
            			else {
HXLINE(2394)				if ((this->get_mouseY() < 2)) {
HXLINE(2396)					int _hx_tmp9 = this->get_scrollV();
HXDLIN(2396)					this->set_scrollV((_hx_tmp9 - ::Std_obj::_hx_int(::Math_obj::max(::Math_obj::min((this->get_mouseY() * ((Float)-.03)),( (Float)(5) )),( (Float)(1) )))));
            				}
            			}
HXLINE(2398)			this->_hx___mouseScrollVCounter = 0;
            		}
HXLINE(2400)		this->stage_onMouseMove(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___updateMouseDrag,(void))

void TextField_obj::_hx___updateScrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2404___updateScrollH)
HXLINE(2405)		this->_hx___updateLayout();
HXLINE(2407)		 ::openfl::geom::Rectangle bounds = this->getBounds(::hx::ObjectPtr<OBJ_>(this));
HXLINE(2409)		Float _hx_tmp = this->get_textWidth();
HXDLIN(2409)		if ((_hx_tmp <= (bounds->width - ( (Float)(4) )))) {
HXLINE(2411)			this->set_scrollH(0);
HXLINE(2412)			return;
            		}
HXLINE(2415)		int tempScrollH = this->get_scrollH();
HXLINE(2419)		bool _hx_tmp1;
HXDLIN(2419)		if ((this->_hx___caretIndex != 0)) {
HXLINE(2419)			int _hx_tmp2 = this->getLineOffset(this->getLineIndexOfChar(this->_hx___caretIndex));
HXDLIN(2419)			_hx_tmp1 = (_hx_tmp2 == this->_hx___caretIndex);
            		}
            		else {
HXLINE(2419)			_hx_tmp1 = true;
            		}
HXDLIN(2419)		if (_hx_tmp1) {
HXLINE(2422)			tempScrollH = 0;
            		}
            		else {
HXLINE(2426)			 ::openfl::geom::Rectangle caret = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(2427)			bool written = false;
HXLINE(2429)			if ((this->_hx___caretIndex < this->_hx___text.length)) {
HXLINE(2431)				written = this->_hx___getCharBoundaries(this->_hx___caretIndex,caret);
            			}
HXLINE(2433)			if (!(written)) {
HXLINE(2437)				this->_hx___getCharBoundaries((this->_hx___caretIndex - 1),caret);
HXLINE(2438)				 ::openfl::geom::Rectangle caret1 = caret;
HXDLIN(2438)				caret1->x = (caret1->x + caret->width);
            			}
HXLINE(2441)			while(true){
HXLINE(2441)				bool _hx_tmp3;
HXDLIN(2441)				if ((caret->x < tempScrollH)) {
HXLINE(2441)					_hx_tmp3 = (tempScrollH > 0);
            				}
            				else {
HXLINE(2441)					_hx_tmp3 = false;
            				}
HXDLIN(2441)				if (!(_hx_tmp3)) {
HXLINE(2441)					goto _hx_goto_77;
            				}
HXLINE(2443)				tempScrollH = (tempScrollH - 24);
            			}
            			_hx_goto_77:;
HXLINE(2445)			while((caret->x > ((tempScrollH + bounds->width) - ( (Float)(4) )))){
HXLINE(2447)				tempScrollH = (tempScrollH + 24);
            			}
HXLINE(2450)			::openfl::geom::Rectangle_obj::_hx___pool->release(caret);
            		}
HXLINE(2453)		bool _hx_tmp4;
HXDLIN(2453)		if ((tempScrollH > 0)) {
HXLINE(2453)			_hx_tmp4 = ::hx::IsNotEq( this->get_type(),1 );
            		}
            		else {
HXLINE(2453)			_hx_tmp4 = false;
            		}
HXDLIN(2453)		if (_hx_tmp4) {
HXLINE(2456)			int lineLength = this->getLineLength(this->getLineIndexOfChar(this->_hx___caretIndex));
HXLINE(2457)			int _hx_tmp5 = this->get_scrollH();
HXDLIN(2457)			if ((((_hx_tmp5 + bounds->width) - ( (Float)(4) )) > lineLength)) {
HXLINE(2459)				this->set_scrollH(::Math_obj::ceil(((( (Float)(lineLength) ) - bounds->width) + 4)));
            			}
            		}
HXLINE(2463)		if ((tempScrollH < 0)) {
HXLINE(2465)			this->set_scrollH(0);
            		}
            		else {
HXLINE(2467)			if ((tempScrollH > this->get_maxScrollH())) {
HXLINE(2469)				this->set_scrollH(this->get_maxScrollH());
            			}
            			else {
HXLINE(2473)				this->set_scrollH(tempScrollH);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___updateScrollH,(void))

void TextField_obj::_hx___updateScrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2478___updateScrollV)
HXLINE(2479)		this->_hx___updateLayout();
HXLINE(2481)		Float _hx_tmp = this->get_textHeight();
HXDLIN(2481)		if ((_hx_tmp <= (this->get_height() - ( (Float)(4) )))) {
HXLINE(2483)			this->set_scrollV(1);
HXLINE(2484)			return;
            		}
HXLINE(2487)		int lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
HXLINE(2489)		bool _hx_tmp1;
HXDLIN(2489)		if ((lineIndex == -1)) {
HXLINE(2489)			_hx_tmp1 = (this->_hx___caretIndex > 0);
            		}
            		else {
HXLINE(2489)			_hx_tmp1 = false;
            		}
HXDLIN(2489)		if (_hx_tmp1) {
HXLINE(2492)			lineIndex = (this->getLineIndexOfChar((this->_hx___caretIndex - 1)) + 1);
            		}
HXLINE(2495)		if (((lineIndex + 1) < this->get_scrollV())) {
HXLINE(2497)			this->set_scrollV((lineIndex + 1));
            		}
            		else {
HXLINE(2499)			if (((lineIndex + 1) > this->get_bottomScrollV())) {
HXLINE(2501)				int i = lineIndex;
HXDLIN(2501)				Float tempHeight = ((Float)0.0);
HXLINE(2503)				if ((i >= this->_hx___textEngine->lineHeights->get_length())) {
HXLINE(2505)					i = (this->_hx___textEngine->lineHeights->get_length() - 1);
            				}
HXLINE(2508)				while((i >= 0)){
HXLINE(2510)					tempHeight = (tempHeight + this->_hx___textEngine->lineHeights->get(i));
HXLINE(2512)					if ((tempHeight > (this->get_height() - ( (Float)(4) )))) {
HXLINE(2514)						int i1;
HXDLIN(2514)						if (((tempHeight - this->get_height()) < 0)) {
HXLINE(2514)							i1 = 1;
            						}
            						else {
HXLINE(2514)							i1 = 2;
            						}
HXDLIN(2514)						i = (i + i1);
HXLINE(2515)						goto _hx_goto_80;
            					}
HXLINE(2517)					i = (i - 1);
            				}
            				_hx_goto_80:;
HXLINE(2529)				this->set_scrollV(i);
            			}
            			else {
HXLINE(2535)				this->set_scrollV(this->get_scrollV());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___updateScrollV,(void))

void TextField_obj::_hx___updateText(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2540___updateText)
HXLINE(2550)		this->_hx___textEngine->set_text(value);
HXLINE(2551)		this->_hx___text = this->_hx___textEngine->text;
HXLINE(2553)		bool _hx_tmp;
HXDLIN(2553)		if (::hx::IsNotNull( this->stage )) {
HXLINE(2553)			_hx_tmp = ::hx::IsInstanceEq( this->stage->get_focus(),::hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE(2553)			_hx_tmp = false;
            		}
HXDLIN(2553)		if (_hx_tmp) {
HXLINE(2557)			if ((this->_hx___text.length < this->_hx___selectionIndex)) {
HXLINE(2559)				this->_hx___selectionIndex = this->_hx___text.length;
            			}
HXLINE(2561)			if ((this->_hx___text.length < this->_hx___caretIndex)) {
HXLINE(2563)				this->_hx___caretIndex = this->_hx___text.length;
            			}
            		}
            		else {
HXLINE(2570)			if (this->_hx___isHTML) {
HXLINE(2572)				this->_hx___selectionIndex = (this->_hx___caretIndex = this->_hx___text.length);
            			}
            			else {
HXLINE(2576)				this->_hx___selectionIndex = 0;
HXLINE(2577)				this->_hx___caretIndex = 0;
            			}
            		}
HXLINE(2581)		if (!(this->_hx___displayAsPassword)) {
HXLINE(2583)			this->_hx___textEngine->set_text(this->_hx___text);
            		}
            		else {
HXLINE(2587)			int length = this->get_text().length;
HXLINE(2588)			::String mask = HX_("",00,00,00,00);
HXLINE(2590)			{
HXLINE(2590)				int _g = 0;
HXDLIN(2590)				int _g1 = length;
HXDLIN(2590)				while((_g < _g1)){
HXLINE(2590)					_g = (_g + 1);
HXDLIN(2590)					int i = (_g - 1);
HXLINE(2592)					mask = (mask + HX_("*",2a,00,00,00));
            				}
            			}
HXLINE(2595)			this->_hx___textEngine->set_text(mask);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,_hx___updateText,(void))

void TextField_obj::_hx___updateTransforms( ::openfl::geom::Matrix overrideTransform){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2600___updateTransforms)
HXLINE(2601)		this->super::_hx___updateTransforms(overrideTransform);
HXLINE(2602)		{
HXLINE(2602)			 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(2602)			Float px = this->_hx___offsetX;
HXDLIN(2602)			Float py = this->_hx___offsetY;
HXDLIN(2602)			_this->tx = (((px * _this->a) + (py * _this->c)) + _this->tx);
HXDLIN(2602)			_this->ty = (((px * _this->b) + (py * _this->d)) + _this->ty);
            		}
            	}


 ::Dynamic TextField_obj::get_antiAliasType(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2608_get_antiAliasType)
HXDLIN(2608)		return this->_hx___textEngine->antiAliasType;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_antiAliasType,return )

 ::Dynamic TextField_obj::set_antiAliasType( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2612_set_antiAliasType)
HXLINE(2613)		bool _hx_tmp = ::hx::IsNotEq( value,this->_hx___textEngine->antiAliasType );
HXLINE(2618)		return (this->_hx___textEngine->antiAliasType = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_antiAliasType,return )

 ::Dynamic TextField_obj::get_autoSize(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2623_get_autoSize)
HXDLIN(2623)		return this->_hx___textEngine->autoSize;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_autoSize,return )

 ::Dynamic TextField_obj::set_autoSize( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2627_set_autoSize)
HXLINE(2628)		if (::hx::IsNotEq( value,this->_hx___textEngine->autoSize )) {
HXLINE(2630)			this->_hx___dirty = true;
HXLINE(2631)			this->_hx___layoutDirty = true;
HXLINE(2632)			if (!(this->_hx___renderDirty)) {
HXLINE(2632)				this->_hx___renderDirty = true;
HXDLIN(2632)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2635)		return (this->_hx___textEngine->autoSize = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_autoSize,return )

bool TextField_obj::get_background(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2640_get_background)
HXDLIN(2640)		return this->_hx___textEngine->background;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_background,return )

bool TextField_obj::set_background(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2644_set_background)
HXLINE(2645)		if ((value != this->_hx___textEngine->background)) {
HXLINE(2647)			this->_hx___dirty = true;
HXLINE(2648)			if (!(this->_hx___renderDirty)) {
HXLINE(2648)				this->_hx___renderDirty = true;
HXDLIN(2648)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2651)		return (this->_hx___textEngine->background = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_background,return )

int TextField_obj::get_backgroundColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2656_get_backgroundColor)
HXDLIN(2656)		return this->_hx___textEngine->backgroundColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_backgroundColor,return )

int TextField_obj::set_backgroundColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2660_set_backgroundColor)
HXLINE(2661)		if ((value != this->_hx___textEngine->backgroundColor)) {
HXLINE(2663)			this->_hx___dirty = true;
HXLINE(2664)			if (!(this->_hx___renderDirty)) {
HXLINE(2664)				this->_hx___renderDirty = true;
HXDLIN(2664)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2667)		return (this->_hx___textEngine->backgroundColor = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_backgroundColor,return )

bool TextField_obj::get_border(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2672_get_border)
HXDLIN(2672)		return this->_hx___textEngine->border;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_border,return )

bool TextField_obj::set_border(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2676_set_border)
HXLINE(2677)		if ((value != this->_hx___textEngine->border)) {
HXLINE(2679)			this->_hx___dirty = true;
HXLINE(2680)			if (!(this->_hx___renderDirty)) {
HXLINE(2680)				this->_hx___renderDirty = true;
HXDLIN(2680)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2683)		return (this->_hx___textEngine->border = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_border,return )

int TextField_obj::get_borderColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2688_get_borderColor)
HXDLIN(2688)		return this->_hx___textEngine->borderColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_borderColor,return )

int TextField_obj::set_borderColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2692_set_borderColor)
HXLINE(2693)		if ((value != this->_hx___textEngine->borderColor)) {
HXLINE(2695)			this->_hx___dirty = true;
HXLINE(2696)			if (!(this->_hx___renderDirty)) {
HXLINE(2696)				this->_hx___renderDirty = true;
HXDLIN(2696)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2699)		return (this->_hx___textEngine->borderColor = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_borderColor,return )

int TextField_obj::get_bottomScrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2703_get_bottomScrollV)
HXLINE(2704)		this->_hx___updateLayout();
HXLINE(2706)		return this->_hx___textEngine->get_bottomScrollV();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_bottomScrollV,return )

int TextField_obj::get_caretIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2711_get_caretIndex)
HXDLIN(2711)		return this->_hx___caretIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_caretIndex,return )

 ::openfl::text::TextFormat TextField_obj::get_defaultTextFormat(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2716_get_defaultTextFormat)
HXDLIN(2716)		return this->_hx___textFormat->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_defaultTextFormat,return )

 ::openfl::text::TextFormat TextField_obj::set_defaultTextFormat( ::openfl::text::TextFormat value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2720_set_defaultTextFormat)
HXLINE(2721)		this->_hx___textFormat->_hx___merge(value);
HXLINE(2723)		this->_hx___layoutDirty = true;
HXLINE(2724)		this->_hx___dirty = true;
HXLINE(2725)		if (!(this->_hx___renderDirty)) {
HXLINE(2725)			this->_hx___renderDirty = true;
HXDLIN(2725)			this->_hx___setParentRenderDirty();
            		}
HXLINE(2727)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_defaultTextFormat,return )

bool TextField_obj::get_displayAsPassword(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2732_get_displayAsPassword)
HXDLIN(2732)		return this->_hx___displayAsPassword;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_displayAsPassword,return )

bool TextField_obj::set_displayAsPassword(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2736_set_displayAsPassword)
HXLINE(2737)		if ((value != this->_hx___displayAsPassword)) {
HXLINE(2739)			this->_hx___dirty = true;
HXLINE(2740)			this->_hx___layoutDirty = true;
HXLINE(2741)			if (!(this->_hx___renderDirty)) {
HXLINE(2741)				this->_hx___renderDirty = true;
HXDLIN(2741)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2743)			this->_hx___displayAsPassword = value;
HXLINE(2744)			this->_hx___updateText(this->_hx___text);
            		}
HXLINE(2747)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_displayAsPassword,return )

bool TextField_obj::get_embedFonts(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2752_get_embedFonts)
HXDLIN(2752)		return this->_hx___textEngine->embedFonts;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_embedFonts,return )

bool TextField_obj::set_embedFonts(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2764_set_embedFonts)
HXDLIN(2764)		return (this->_hx___textEngine->embedFonts = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_embedFonts,return )

 ::Dynamic TextField_obj::get_gridFitType(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2769_get_gridFitType)
HXDLIN(2769)		return this->_hx___textEngine->gridFitType;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_gridFitType,return )

 ::Dynamic TextField_obj::set_gridFitType( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2781_set_gridFitType)
HXDLIN(2781)		return (this->_hx___textEngine->gridFitType = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_gridFitType,return )

Float TextField_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2785_get_height)
HXLINE(2786)		this->_hx___updateLayout();
HXLINE(2787)		Float _hx_tmp = this->_hx___textEngine->height;
HXDLIN(2787)		return (_hx_tmp * ::Math_obj::abs(this->get_scaleY()));
            	}


Float TextField_obj::set_height(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2791_set_height)
HXLINE(2792)		if ((value != this->_hx___textEngine->height)) {
HXLINE(2794)			this->_hx___setTransformDirty();
HXLINE(2795)			this->_hx___dirty = true;
HXLINE(2796)			this->_hx___layoutDirty = true;
HXLINE(2797)			if (!(this->_hx___renderDirty)) {
HXLINE(2797)				this->_hx___renderDirty = true;
HXDLIN(2797)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2799)			this->_hx___textEngine->height = value;
            		}
HXLINE(2802)		Float _hx_tmp = this->_hx___textEngine->height;
HXDLIN(2802)		return (_hx_tmp * ::Math_obj::abs(this->get_scaleY()));
            	}


::String TextField_obj::get_htmlText(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2808_get_htmlText)
HXDLIN(2808)		if (this->_hx___isHTML) {
HXDLIN(2808)			return this->_hx___htmlText;
            		}
            		else {
HXDLIN(2808)			return this->_hx___text;
            		}
HXDLIN(2808)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_htmlText,return )

::String TextField_obj::set_htmlText(::String value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2815_set_htmlText)
HXLINE(2816)		if (::hx::IsNull( value )) {
HXLINE(2818)			 ::openfl::errors::TypeError error =  ::openfl::errors::TypeError_obj::__alloc( HX_CTX ,HX_("Error #2007: Parameter text must be non-null.",bb,5f,62,25));
HXLINE(2819)			error->errorID = 2007;
HXLINE(2820)			HX_STACK_DO_THROW(error);
            		}
HXLINE(2823)		bool _hx_tmp;
HXDLIN(2823)		if (this->_hx___isHTML) {
HXLINE(2823)			_hx_tmp = (this->_hx___text != value);
            		}
            		else {
HXLINE(2823)			_hx_tmp = true;
            		}
HXDLIN(2823)		if (_hx_tmp) {
HXLINE(2825)			this->_hx___dirty = true;
HXLINE(2826)			this->_hx___layoutDirty = true;
HXLINE(2827)			if (!(this->_hx___renderDirty)) {
HXLINE(2827)				this->_hx___renderDirty = true;
HXDLIN(2827)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2830)		this->_hx___isHTML = true;
HXLINE(2833)		if (this->condenseWhite) {
HXLINE(2835)			value =  ::EReg_obj::__alloc( HX_CTX ,HX_("\\s+",b4,33,46,00),HX_("g",67,00,00,00))->replace(value,HX_(" ",20,00,00,00));
            		}
HXLINE(2838)		this->_hx___htmlText = value;
HXLINE(2841)		bool value1 = this->get_multiline();
HXDLIN(2841)		value = ::openfl::text::_internal::HTMLParser_obj::parse(value,value1,this->_hx___styleSheet,this->_hx___textFormat,this->_hx___textEngine->textFormatRanges);
HXLINE(2873)		this->_hx___updateText(value);
HXLINE(2876)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_htmlText,return )

int TextField_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2880_get_length)
HXLINE(2881)		if (::hx::IsNotNull( this->_hx___text )) {
HXLINE(2883)			return this->_hx___text.length;
            		}
HXLINE(2886)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_length,return )

int TextField_obj::get_maxChars(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2891_get_maxChars)
HXDLIN(2891)		return this->_hx___textEngine->maxChars;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxChars,return )

int TextField_obj::set_maxChars(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2895_set_maxChars)
HXLINE(2896)		if ((value != this->_hx___textEngine->maxChars)) {
HXLINE(2898)			this->_hx___textEngine->maxChars = value;
HXLINE(2900)			this->_hx___dirty = true;
HXLINE(2901)			this->_hx___layoutDirty = true;
HXLINE(2902)			if (!(this->_hx___renderDirty)) {
HXLINE(2902)				this->_hx___renderDirty = true;
HXDLIN(2902)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2905)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_maxChars,return )

int TextField_obj::get_maxScrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2909_get_maxScrollH)
HXLINE(2910)		this->_hx___updateLayout();
HXLINE(2912)		return this->_hx___textEngine->maxScrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxScrollH,return )

int TextField_obj::get_maxScrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2916_get_maxScrollV)
HXLINE(2917)		this->_hx___updateLayout();
HXLINE(2919)		return this->_hx___textEngine->get_maxScrollV();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxScrollV,return )

bool TextField_obj::get_mouseWheelEnabled(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2924_get_mouseWheelEnabled)
HXDLIN(2924)		return this->_hx___mouseWheelEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_mouseWheelEnabled,return )

bool TextField_obj::set_mouseWheelEnabled(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2929_set_mouseWheelEnabled)
HXDLIN(2929)		return (this->_hx___mouseWheelEnabled = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_mouseWheelEnabled,return )

bool TextField_obj::get_multiline(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2934_get_multiline)
HXDLIN(2934)		return this->_hx___textEngine->multiline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_multiline,return )

bool TextField_obj::set_multiline(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2939_set_multiline)
HXDLIN(2939)		return (this->_hx___textEngine->multiline = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_multiline,return )

int TextField_obj::get_numLines(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2943_get_numLines)
HXLINE(2944)		this->_hx___updateLayout();
HXLINE(2946)		return this->_hx___textEngine->numLines;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_numLines,return )

::String TextField_obj::get_restrict(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2951_get_restrict)
HXDLIN(2951)		return this->_hx___textEngine->restrict;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_restrict,return )

::String TextField_obj::set_restrict(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2955_set_restrict)
HXLINE(2956)		if ((this->_hx___textEngine->restrict != value)) {
HXLINE(2958)			this->_hx___textEngine->set_restrict(value);
HXLINE(2959)			this->_hx___updateText(this->_hx___text);
            		}
HXLINE(2962)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_restrict,return )

int TextField_obj::get_scrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2967_get_scrollH)
HXDLIN(2967)		return this->_hx___textEngine->scrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_scrollH,return )

int TextField_obj::set_scrollH(int value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2971_set_scrollH)
HXLINE(2972)		this->_hx___updateLayout();
HXLINE(2974)		if ((value > this->_hx___textEngine->maxScrollH)) {
HXLINE(2974)			value = this->_hx___textEngine->maxScrollH;
            		}
HXLINE(2975)		if ((value < 0)) {
HXLINE(2975)			value = 0;
            		}
HXLINE(2977)		if ((value != this->_hx___textEngine->scrollH)) {
HXLINE(2979)			this->_hx___dirty = true;
HXLINE(2980)			if (!(this->_hx___renderDirty)) {
HXLINE(2980)				this->_hx___renderDirty = true;
HXDLIN(2980)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2981)			this->_hx___textEngine->scrollH = value;
HXLINE(2982)			this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("scroll",0d,d8,64,47),null(),null()));
            		}
HXLINE(2985)		return this->_hx___textEngine->scrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_scrollH,return )

int TextField_obj::get_scrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2990_get_scrollV)
HXDLIN(2990)		return this->_hx___textEngine->get_scrollV();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_scrollV,return )

int TextField_obj::set_scrollV(int value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2994_set_scrollV)
HXLINE(2995)		this->_hx___updateLayout();
HXLINE(2997)		if ((value > this->_hx___textEngine->get_maxScrollV())) {
HXLINE(2997)			value = this->_hx___textEngine->get_maxScrollV();
            		}
HXLINE(2998)		if ((value < 1)) {
HXLINE(2998)			value = 1;
            		}
HXLINE(3000)		bool _hx_tmp;
HXDLIN(3000)		if ((value == this->_hx___textEngine->get_scrollV())) {
HXLINE(3000)			_hx_tmp = (this->_hx___textEngine->get_scrollV() == 0);
            		}
            		else {
HXLINE(3000)			_hx_tmp = true;
            		}
HXDLIN(3000)		if (_hx_tmp) {
HXLINE(3002)			this->_hx___dirty = true;
HXLINE(3003)			if (!(this->_hx___renderDirty)) {
HXLINE(3003)				this->_hx___renderDirty = true;
HXDLIN(3003)				this->_hx___setParentRenderDirty();
            			}
HXLINE(3004)			this->_hx___textEngine->set_scrollV(value);
HXLINE(3005)			this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("scroll",0d,d8,64,47),null(),null()));
            		}
HXLINE(3008)		return this->_hx___textEngine->get_scrollV();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_scrollV,return )

bool TextField_obj::get_selectable(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3013_get_selectable)
HXDLIN(3013)		return this->_hx___textEngine->selectable;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectable,return )

bool TextField_obj::set_selectable(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3017_set_selectable)
HXLINE(3018)		bool _hx_tmp;
HXDLIN(3018)		if ((value != this->_hx___textEngine->selectable)) {
HXLINE(3018)			_hx_tmp = ::hx::IsEq( this->get_type(),1 );
            		}
            		else {
HXLINE(3018)			_hx_tmp = false;
            		}
HXDLIN(3018)		if (_hx_tmp) {
HXLINE(3020)			bool _hx_tmp1;
HXDLIN(3020)			if (::hx::IsNotNull( this->stage )) {
HXLINE(3020)				_hx_tmp1 = ::hx::IsInstanceEq( this->stage->get_focus(),::hx::ObjectPtr<OBJ_>(this) );
            			}
            			else {
HXLINE(3020)				_hx_tmp1 = false;
            			}
HXDLIN(3020)			if (_hx_tmp1) {
HXLINE(3022)				this->_hx___startTextInput();
            			}
            			else {
HXLINE(3024)				if (!(value)) {
HXLINE(3026)					this->_hx___stopTextInput();
            				}
            			}
            		}
HXLINE(3030)		return (this->_hx___textEngine->selectable = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_selectable,return )

int TextField_obj::get_selectionBeginIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3035_get_selectionBeginIndex)
HXDLIN(3035)		return ::Std_obj::_hx_int(::Math_obj::min(( (Float)(this->_hx___caretIndex) ),( (Float)(this->_hx___selectionIndex) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectionBeginIndex,return )

int TextField_obj::get_selectionEndIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3040_get_selectionEndIndex)
HXDLIN(3040)		return ::Std_obj::_hx_int(::Math_obj::max(( (Float)(this->_hx___caretIndex) ),( (Float)(this->_hx___selectionIndex) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectionEndIndex,return )

Float TextField_obj::get_sharpness(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3045_get_sharpness)
HXDLIN(3045)		return this->_hx___textEngine->sharpness;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_sharpness,return )

Float TextField_obj::set_sharpness(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3049_set_sharpness)
HXLINE(3050)		if ((value != this->_hx___textEngine->sharpness)) {
HXLINE(3052)			this->_hx___dirty = true;
HXLINE(3053)			if (!(this->_hx___renderDirty)) {
HXLINE(3053)				this->_hx___renderDirty = true;
HXDLIN(3053)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(3056)		return (this->_hx___textEngine->sharpness = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_sharpness,return )

 ::openfl::text::StyleSheet TextField_obj::get_styleSheet(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3061_get_styleSheet)
HXDLIN(3061)		return this->_hx___styleSheet;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_styleSheet,return )

 ::openfl::text::StyleSheet TextField_obj::set_styleSheet( ::openfl::text::StyleSheet value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3065_set_styleSheet)
HXLINE(3066)		bool _hx_tmp;
HXDLIN(3066)		if (::hx::IsNotNull( this->_hx___styleSheet )) {
HXLINE(3066)			_hx_tmp = ::hx::IsNull( value );
            		}
            		else {
HXLINE(3066)			_hx_tmp = false;
            		}
HXDLIN(3066)		if (!(_hx_tmp)) {
HXLINE(3071)			if (::hx::IsNotNull( value )) {
HXLINE(3075)				bool _hx_tmp1;
HXDLIN(3075)				if (this->_hx___isHTML) {
HXLINE(3075)					_hx_tmp1 = ::hx::IsInstanceNotEq( value,this->_hx___styleSheet );
            				}
            				else {
HXLINE(3075)					_hx_tmp1 = false;
            				}
HXDLIN(3075)				if (_hx_tmp1) {
HXLINE(3077)					this->_hx___dirty = true;
HXLINE(3078)					this->_hx___layoutDirty = true;
HXLINE(3079)					if (!(this->_hx___renderDirty)) {
HXLINE(3079)						this->_hx___renderDirty = true;
HXDLIN(3079)						this->_hx___setParentRenderDirty();
            					}
HXLINE(3080)					this->set_htmlText(this->_hx___htmlText);
            				}
HXLINE(3084)				this->set_type(0);
            			}
            		}
HXLINE(3086)		return (this->_hx___styleSheet = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_styleSheet,return )

bool TextField_obj::get_tabEnabled(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3091_get_tabEnabled)
HXDLIN(3091)		if (::hx::IsNull( this->_hx___tabEnabled )) {
HXDLIN(3091)			return ::hx::IsEq( this->_hx___textEngine->type,1 );
            		}
            		else {
HXDLIN(3091)			return ( (bool)(this->_hx___tabEnabled) );
            		}
HXDLIN(3091)		return false;
            	}


::String TextField_obj::get_text(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3096_get_text)
HXDLIN(3096)		return this->_hx___text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_text,return )

::String TextField_obj::set_text(::String value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_3100_set_text)
HXLINE(3101)		if (::hx::IsNull( value )) {
HXLINE(3103)			 ::openfl::errors::TypeError error =  ::openfl::errors::TypeError_obj::__alloc( HX_CTX ,HX_("Error #2007: Parameter text must be non-null.",bb,5f,62,25));
HXLINE(3104)			error->errorID = 2007;
HXLINE(3105)			HX_STACK_DO_THROW(error);
            		}
HXLINE(3108)		if (::hx::IsNotNull( this->_hx___styleSheet )) {
HXLINE(3110)			return this->set_htmlText(value);
            		}
HXLINE(3113)		bool _hx_tmp;
HXDLIN(3113)		if (!(this->_hx___isHTML)) {
HXLINE(3113)			_hx_tmp = (this->_hx___text != value);
            		}
            		else {
HXLINE(3113)			_hx_tmp = true;
            		}
HXDLIN(3113)		if (_hx_tmp) {
HXLINE(3115)			this->_hx___dirty = true;
HXLINE(3116)			this->_hx___layoutDirty = true;
HXLINE(3117)			if (!(this->_hx___renderDirty)) {
HXLINE(3117)				this->_hx___renderDirty = true;
HXDLIN(3117)				this->_hx___setParentRenderDirty();
            			}
            		}
            		else {
HXLINE(3121)			return value;
            		}
HXLINE(3124)		if ((this->_hx___textEngine->textFormatRanges->get_length() > 1)) {
HXLINE(3126)			::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(3126)			int deleteCount = (this->_hx___textEngine->textFormatRanges->get_length() - 1);
HXDLIN(3126)			this1->__SetField(HX_("__tempIndex",3e,e8,54,22),1,::hx::paccDynamic);
HXDLIN(3126)			{
HXLINE(3126)				int _g_current = 0;
HXDLIN(3126)				::cpp::VirtualArray _g_args = ::cpp::VirtualArray_obj::__new(0);
HXDLIN(3126)				while((_g_current < _g_args->get_length())){
HXLINE(3126)					_g_current = (_g_current + 1);
HXDLIN(3126)					 ::Dynamic item = _g_args->__get((_g_current - 1));
HXDLIN(3126)					( ( ::openfl::_Vector::ObjectVector)(this1) )->insertAt(( (int)(this1->__Field(HX_("__tempIndex",3e,e8,54,22),::hx::paccDynamic)) ),( ( ::openfl::text::_internal::TextFormatRange)(item) ));
HXDLIN(3126)					::hx::FieldRef((this1).mPtr,HX_("__tempIndex",3e,e8,54,22))++;
            				}
            			}
HXDLIN(3126)			( ( ::openfl::_Vector::ObjectVector)(this1) )->splice(( (int)(this1->__Field(HX_("__tempIndex",3e,e8,54,22),::hx::paccDynamic)) ),deleteCount);
            		}
HXLINE(3129)		::String utfValue = value;
HXLINE(3130)		 ::openfl::text::_internal::TextFormatRange range = this->_hx___textEngine->textFormatRanges->get(0).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXLINE(3131)		range->format = this->_hx___textFormat;
HXLINE(3132)		range->start = 0;
HXLINE(3133)		range->end = utfValue.length;
HXLINE(3135)		this->_hx___isHTML = false;
HXLINE(3137)		this->_hx___updateText(value);
HXLINE(3139)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_text,return )

int TextField_obj::get_textColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3144_get_textColor)
HXDLIN(3144)		return ( (int)(this->_hx___textFormat->color) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textColor,return )

int TextField_obj::set_textColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3148_set_textColor)
HXLINE(3149)		if (::hx::IsNotEq( value,this->_hx___textFormat->color )) {
HXLINE(3151)			this->_hx___dirty = true;
HXLINE(3152)			if (!(this->_hx___renderDirty)) {
HXLINE(3152)				this->_hx___renderDirty = true;
HXDLIN(3152)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(3155)		{
HXLINE(3155)			 ::Dynamic range = this->_hx___textEngine->textFormatRanges->iterator();
HXDLIN(3155)			while(( (bool)(range->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(3155)				 ::openfl::text::_internal::TextFormatRange range1 = ( ( ::openfl::text::_internal::TextFormatRange)(range->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(3157)				range1->format->color = value;
            			}
            		}
HXLINE(3160)		return ( (int)((this->_hx___textFormat->color = value)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_textColor,return )

Float TextField_obj::get_textWidth(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3164_get_textWidth)
HXLINE(3165)		this->_hx___updateLayout();
HXLINE(3166)		return this->_hx___textEngine->textWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textWidth,return )

Float TextField_obj::get_textHeight(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3170_get_textHeight)
HXLINE(3171)		this->_hx___updateLayout();
HXLINE(3172)		return this->_hx___textEngine->textHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textHeight,return )

 ::Dynamic TextField_obj::get_type(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3177_get_type)
HXDLIN(3177)		return this->_hx___textEngine->type;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_type,return )

 ::Dynamic TextField_obj::set_type( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3181_set_type)
HXLINE(3182)		if (::hx::IsNotNull( this->_hx___styleSheet )) {
HXLINE(3186)			value = 0;
            		}
HXLINE(3189)		if (::hx::IsNotEq( value,this->_hx___textEngine->type )) {
HXLINE(3193)			this->_hx___textEngine->type = value;
HXLINE(3194)			if (::hx::IsEq( value,1 )) {
HXLINE(3196)				this->addEventListener(HX_("addedToStage",63,22,55,0c),this->this_onAddedToStage_dyn(),null(),null(),null());
HXLINE(3198)				this->this_onFocusIn(null());
HXLINE(3199)				this->_hx___textEngine->_hx___useIntAdvances = true;
            			}
            			else {
HXLINE(3203)				this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->this_onAddedToStage_dyn(),null());
HXLINE(3205)				this->_hx___stopTextInput();
HXLINE(3206)				this->_hx___textEngine->_hx___useIntAdvances = null();
            			}
HXLINE(3209)			this->_hx___dirty = true;
HXLINE(3210)			this->_hx___layoutDirty = true;
HXLINE(3211)			if (!(this->_hx___renderDirty)) {
HXLINE(3211)				this->_hx___renderDirty = true;
HXDLIN(3211)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(3214)		return this->_hx___textEngine->type;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_type,return )

Float TextField_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3218_get_width)
HXLINE(3219)		this->_hx___updateLayout();
HXLINE(3220)		return (this->_hx___textEngine->width * ::Math_obj::abs(this->_hx___scaleX));
            	}


Float TextField_obj::set_width(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3224_set_width)
HXLINE(3225)		if ((value != this->_hx___textEngine->width)) {
HXLINE(3227)			this->_hx___setTransformDirty();
HXLINE(3228)			this->_hx___dirty = true;
HXLINE(3229)			this->_hx___layoutDirty = true;
HXLINE(3230)			if (!(this->_hx___renderDirty)) {
HXLINE(3230)				this->_hx___renderDirty = true;
HXDLIN(3230)				this->_hx___setParentRenderDirty();
            			}
HXLINE(3232)			this->_hx___textEngine->width = value;
            		}
HXLINE(3235)		return (this->_hx___textEngine->width * ::Math_obj::abs(this->_hx___scaleX));
            	}


bool TextField_obj::get_wordWrap(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3240_get_wordWrap)
HXDLIN(3240)		return this->_hx___textEngine->wordWrap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_wordWrap,return )

bool TextField_obj::set_wordWrap(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3244_set_wordWrap)
HXLINE(3245)		if ((value != this->_hx___textEngine->wordWrap)) {
HXLINE(3247)			this->_hx___dirty = true;
HXLINE(3248)			this->_hx___layoutDirty = true;
HXLINE(3249)			if (!(this->_hx___renderDirty)) {
HXLINE(3249)				this->_hx___renderDirty = true;
HXDLIN(3249)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(3252)		return (this->_hx___textEngine->wordWrap = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_wordWrap,return )

Float TextField_obj::get_x(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3257_get_x)
HXDLIN(3257)		return (this->_hx___transform->tx + this->_hx___offsetX);
            	}


Float TextField_obj::set_x(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3261_set_x)
HXLINE(3262)		if ((value != (this->_hx___transform->tx + this->_hx___offsetX))) {
HXLINE(3262)			this->_hx___setTransformDirty();
            		}
HXLINE(3263)		this->_hx___transform->tx = (value - this->_hx___offsetX);
HXLINE(3264)		return value;
            	}


Float TextField_obj::get_y(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3269_get_y)
HXDLIN(3269)		return (this->_hx___transform->ty + this->_hx___offsetY);
            	}


Float TextField_obj::set_y(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3273_set_y)
HXLINE(3274)		if ((value != (this->_hx___transform->ty + this->_hx___offsetY))) {
HXLINE(3274)			this->_hx___setTransformDirty();
            		}
HXLINE(3275)		this->_hx___transform->ty = (value - this->_hx___offsetY);
HXLINE(3276)		return value;
            	}


void TextField_obj::stage_onMouseMove( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3281_stage_onMouseMove)
HXLINE(3282)		if (::hx::IsNull( this->stage )) {
HXLINE(3282)			return;
            		}
HXLINE(3284)		bool _hx_tmp;
HXDLIN(3284)		if (this->get_selectable()) {
HXLINE(3284)			_hx_tmp = (this->_hx___selectionIndex >= 0);
            		}
            		else {
HXLINE(3284)			_hx_tmp = false;
            		}
HXDLIN(3284)		if (_hx_tmp) {
HXLINE(3286)			this->_hx___updateLayout();
HXLINE(3288)			int position;
HXDLIN(3288)			if (this->_hx___lineSelection) {
HXLINE(3288)				Float position1 = this->get_mouseX();
HXDLIN(3288)				Float position2 = (position1 + this->get_scrollH());
HXDLIN(3288)				position = this->_hx___getPositionByIdentifier(position2,this->get_mouseY(),true);
            			}
            			else {
HXLINE(3289)				if (this->_hx___wordSelection) {
HXLINE(3289)					Float position3 = this->get_mouseX();
HXDLIN(3289)					Float position4 = (position3 + this->get_scrollH());
HXLINE(3288)					position = this->_hx___getPositionByIdentifier(position4,this->get_mouseY(),false);
            				}
            				else {
HXLINE(3289)					Float position5 = this->get_mouseX();
HXDLIN(3289)					Float position6 = (position5 + this->get_scrollH());
HXLINE(3288)					position = this->_hx___getPosition(position6,this->get_mouseY());
            				}
            			}
HXLINE(3291)			if ((position != this->_hx___caretIndex)) {
HXLINE(3293)				this->_hx___caretIndex = position;
HXLINE(3294)				bool _hx_tmp1;
HXDLIN(3294)				if (!(this->_hx___wordSelection)) {
HXLINE(3294)					_hx_tmp1 = this->_hx___lineSelection;
            				}
            				else {
HXLINE(3294)					_hx_tmp1 = true;
            				}
HXDLIN(3294)				if (_hx_tmp1) {
HXLINE(3297)					this->_hx___selectionIndex = this->_hx___getOppositeIdentifierBound(this->_hx___specialSelectionInitialIndex,this->_hx___lineSelection);
            				}
HXLINE(3300)				bool setDirty = true;
HXLINE(3313)				if (setDirty) {
HXLINE(3315)					this->_hx___dirty = true;
HXLINE(3316)					if (!(this->_hx___renderDirty)) {
HXLINE(3316)						this->_hx___renderDirty = true;
HXDLIN(3316)						this->_hx___setParentRenderDirty();
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,stage_onMouseMove,(void))

void TextField_obj::stage_onMouseUp( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3323_stage_onMouseUp)
HXLINE(3324)		 ::openfl::display::Stage stage = ( ( ::openfl::display::Stage)(event->currentTarget) );
HXLINE(3326)		stage->removeEventListener(HX_("enterFrame",f5,03,50,02),this->this_onEnterFrame_dyn(),null());
HXLINE(3327)		stage->removeEventListener(HX_("mouseMove",d6,9b,b5,f4),this->stage_onMouseMove_dyn(),null());
HXLINE(3328)		stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->stage_onMouseUp_dyn(),null());
HXLINE(3330)		if (::hx::IsInstanceNotEq( this->stage,stage )) {
HXLINE(3330)			return;
            		}
HXLINE(3332)		if (::hx::IsInstanceEq( stage->get_focus(),::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(3334)			this->_hx___getWorldTransform();
HXLINE(3335)			this->_hx___updateLayout();
HXLINE(3337)			int upPos;
HXDLIN(3337)			if (this->_hx___lineSelection) {
HXLINE(3337)				Float upPos1 = this->get_mouseX();
HXDLIN(3337)				Float upPos2 = (upPos1 + this->get_scrollH());
HXDLIN(3337)				upPos = this->_hx___getPositionByIdentifier(upPos2,this->get_mouseY(),true);
            			}
            			else {
HXLINE(3338)				if (this->_hx___wordSelection) {
HXLINE(3338)					Float upPos3 = this->get_mouseX();
HXDLIN(3338)					Float upPos4 = (upPos3 + this->get_scrollH());
HXLINE(3337)					upPos = this->_hx___getPositionByIdentifier(upPos4,this->get_mouseY(),false);
            				}
            				else {
HXLINE(3338)					Float upPos5 = this->get_mouseX();
HXDLIN(3338)					Float upPos6 = (upPos5 + this->get_scrollH());
HXLINE(3337)					upPos = this->_hx___getPosition(upPos6,this->get_mouseY());
            				}
            			}
HXLINE(3339)			int leftPos = ::Std_obj::_hx_int(::Math_obj::min(( (Float)(this->_hx___selectionIndex) ),( (Float)(upPos) )));
HXLINE(3340)			int rightPos = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(this->_hx___selectionIndex) ),( (Float)(upPos) )));
HXLINE(3345)			this->_hx___selectionIndex = leftPos;
HXLINE(3346)			this->_hx___caretIndex = rightPos;
HXLINE(3348)			this->_hx___wordSelection = (this->_hx___lineSelection = false);
HXLINE(3350)			if (this->_hx___inputEnabled) {
HXLINE(3352)				this->this_onFocusIn(null());
HXLINE(3354)				this->_hx___stopCursorTimer();
HXLINE(3355)				this->_hx___startCursorTimer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,stage_onMouseUp,(void))

void TextField_obj::this_onAddedToStage( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3369_this_onAddedToStage)
HXDLIN(3369)		this->this_onFocusIn(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onAddedToStage,(void))

void TextField_obj::this_onEnterFrame( ::openfl::events::Event e){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3374_this_onEnterFrame)
HXDLIN(3374)		this->_hx___updateMouseDrag();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onEnterFrame,(void))

void TextField_obj::this_onFocusIn( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3380_this_onFocusIn)
HXDLIN(3380)		bool _hx_tmp;
HXDLIN(3380)		bool _hx_tmp1;
HXDLIN(3380)		if (::hx::IsEq( this->get_type(),1 )) {
HXDLIN(3380)			_hx_tmp1 = ::hx::IsNotNull( this->stage );
            		}
            		else {
HXDLIN(3380)			_hx_tmp1 = false;
            		}
HXDLIN(3380)		if (_hx_tmp1) {
HXDLIN(3380)			_hx_tmp = ::hx::IsInstanceEq( this->stage->get_focus(),::hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXDLIN(3380)			_hx_tmp = false;
            		}
HXDLIN(3380)		if (_hx_tmp) {
HXLINE(3382)			this->_hx___startTextInput();
            		}
            		else {
HXLINE(3384)			bool _hx_tmp2;
HXDLIN(3384)			bool _hx_tmp3;
HXDLIN(3384)			bool _hx_tmp4;
HXDLIN(3384)			if (::hx::IsNotEq( this->get_type(),1 )) {
HXLINE(3384)				_hx_tmp4 = this->get_selectable();
            			}
            			else {
HXLINE(3384)				_hx_tmp4 = false;
            			}
HXDLIN(3384)			if (_hx_tmp4) {
HXLINE(3384)				_hx_tmp3 = ::hx::IsNotNull( this->stage );
            			}
            			else {
HXLINE(3384)				_hx_tmp3 = false;
            			}
HXDLIN(3384)			if (_hx_tmp3) {
HXLINE(3384)				_hx_tmp2 = ::hx::IsInstanceEq( this->stage->get_focus(),::hx::ObjectPtr<OBJ_>(this) );
            			}
            			else {
HXLINE(3384)				_hx_tmp2 = false;
            			}
HXDLIN(3384)			if (_hx_tmp2) {
HXLINE(3386)				this->_hx___startCursorTimer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onFocusIn,(void))

void TextField_obj::this_onFocusOut( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3391_this_onFocusOut)
HXLINE(3392)		this->_hx___stopCursorTimer();
HXLINE(3396)		this->_hx___stopTextInput();
HXLINE(3398)		if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(3400)			this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(3401)			this->_hx___dirty = true;
HXLINE(3402)			if (!(this->_hx___renderDirty)) {
HXLINE(3402)				this->_hx___renderDirty = true;
HXDLIN(3402)				this->_hx___setParentRenderDirty();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onFocusOut,(void))

void TextField_obj::this_onKeyDown( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3409_this_onKeyDown)
HXDLIN(3409)		bool _hx_tmp;
HXDLIN(3409)		bool _hx_tmp1;
HXDLIN(3409)		bool _hx_tmp2;
HXDLIN(3409)		if (this->get_selectable()) {
HXDLIN(3409)			_hx_tmp2 = ::hx::IsNotEq( this->get_type(),1 );
            		}
            		else {
HXDLIN(3409)			_hx_tmp2 = false;
            		}
HXDLIN(3409)		if (_hx_tmp2) {
HXDLIN(3409)			_hx_tmp1 = (event->keyCode == 67);
            		}
            		else {
HXDLIN(3409)			_hx_tmp1 = false;
            		}
HXDLIN(3409)		if (_hx_tmp1) {
HXDLIN(3409)			if (!(event->commandKey)) {
HXDLIN(3409)				_hx_tmp = event->ctrlKey;
            			}
            			else {
HXDLIN(3409)				_hx_tmp = true;
            			}
            		}
            		else {
HXDLIN(3409)			_hx_tmp = false;
            		}
HXDLIN(3409)		if (_hx_tmp) {
HXLINE(3411)			bool _hx_tmp3;
HXDLIN(3411)			if ((this->_hx___caretIndex != this->_hx___selectionIndex)) {
HXLINE(3411)				_hx_tmp3 = !(this->get_displayAsPassword());
            			}
            			else {
HXLINE(3411)				_hx_tmp3 = false;
            			}
HXDLIN(3411)			if (_hx_tmp3) {
HXLINE(3413)				::lime::_hx_system::Clipboard_obj::set_text(this->_hx___text.substring(this->_hx___caretIndex,this->_hx___selectionIndex));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onKeyDown,(void))

void TextField_obj::this_onMouseDown( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3420_this_onMouseDown)
HXLINE(3421)		bool _hx_tmp;
HXDLIN(3421)		if (!(this->get_selectable())) {
HXLINE(3421)			_hx_tmp = ::hx::IsNotEq( this->get_type(),1 );
            		}
            		else {
HXLINE(3421)			_hx_tmp = false;
            		}
HXDLIN(3421)		if (_hx_tmp) {
HXLINE(3421)			return;
            		}
HXLINE(3424)		this->_hx___lineSelection = (event->clickCount == 3);
HXLINE(3425)		this->_hx___wordSelection = (event->clickCount == 2);
HXLINE(3427)		if (this->_hx___lineSelection) {
HXLINE(3429)			int prevCaretIndex = this->_hx___caretIndex;
HXLINE(3430)			Float _hx_tmp1 = this->get_mouseX();
HXDLIN(3430)			Float _hx_tmp2 = (_hx_tmp1 + this->get_scrollH());
HXDLIN(3430)			this->_hx___caretIndex = this->_hx___getPositionByIdentifier(_hx_tmp2,this->get_mouseY(),true);
HXLINE(3431)			this->_hx___selectionIndex = this->_hx___getOppositeIdentifierBound(prevCaretIndex,true);
HXLINE(3432)			this->setSelection(this->_hx___caretIndex,this->_hx___selectionIndex);
            		}
            		else {
HXLINE(3434)			if (this->_hx___wordSelection) {
HXLINE(3436)				int prevCaretIndex1 = this->_hx___caretIndex;
HXLINE(3437)				Float _hx_tmp3 = this->get_mouseX();
HXDLIN(3437)				Float _hx_tmp4 = (_hx_tmp3 + this->get_scrollH());
HXDLIN(3437)				this->_hx___caretIndex = this->_hx___getPositionByIdentifier(_hx_tmp4,this->get_mouseY(),false);
HXLINE(3438)				this->_hx___selectionIndex = this->_hx___getOppositeIdentifierBound(prevCaretIndex1,false);
HXLINE(3439)				this->_hx___specialSelectionInitialIndex = prevCaretIndex1;
HXLINE(3440)				this->setSelection(this->_hx___caretIndex,this->_hx___selectionIndex);
            			}
            			else {
HXLINE(3444)				Float _hx_tmp5 = this->get_mouseX();
HXDLIN(3444)				Float _hx_tmp6 = (_hx_tmp5 + this->get_scrollH());
HXDLIN(3444)				this->_hx___caretIndex = this->_hx___getPosition(_hx_tmp6,this->get_mouseY());
HXLINE(3445)				this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(3446)				this->setSelection(this->_hx___caretIndex,this->_hx___selectionIndex);
            			}
            		}
HXLINE(3449)		this->_hx___updateLayout();
HXLINE(3454)		{
HXLINE(3455)			this->_hx___dirty = true;
HXLINE(3456)			if (!(this->_hx___renderDirty)) {
HXLINE(3456)				this->_hx___renderDirty = true;
HXDLIN(3456)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(3461)		if (::hx::IsNull( this->stage )) {
HXLINE(3461)			return;
            		}
HXLINE(3464)		this->stage->addEventListener(HX_("enterFrame",f5,03,50,02),this->this_onEnterFrame_dyn(),null(),null(),null());
HXLINE(3466)		this->stage->addEventListener(HX_("mouseMove",d6,9b,b5,f4),this->stage_onMouseMove_dyn(),null(),null(),null());
HXLINE(3467)		this->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->stage_onMouseUp_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onMouseDown,(void))

void TextField_obj::this_onMouseWheel( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3472_this_onMouseWheel)
HXDLIN(3472)		if (this->get_mouseWheelEnabled()) {
HXLINE(3474)			int _hx_tmp = this->get_scrollV();
HXDLIN(3474)			int _hx_tmp1 = (_hx_tmp - event->delta);
HXDLIN(3474)			this->set_scrollV(::Std_obj::_hx_int(::Math_obj::min(( (Float)(_hx_tmp1) ),( (Float)(this->get_maxScrollV()) ))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onMouseWheel,(void))

void TextField_obj::window_onKeyDown(int key,int modifier){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_3484_window_onKeyDown)
HXDLIN(3484)		switch((int)(key)){
            			case (int)8: {
HXLINE(3507)				bool _hx_tmp;
HXDLIN(3507)				if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(3507)					_hx_tmp = (this->_hx___caretIndex > 0);
            				}
            				else {
HXLINE(3507)					_hx_tmp = false;
            				}
HXDLIN(3507)				if (_hx_tmp) {
HXLINE(3509)					this->_hx___selectionIndex = (this->_hx___caretIndex - 1);
            				}
HXLINE(3512)				if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(3514)					this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(3515)					this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(3517)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            				else {
HXLINE(3521)					this->_hx___stopCursorTimer();
HXLINE(3522)					this->_hx___startCursorTimer();
            				}
            			}
            			break;
            			case (int)97: {
HXLINE(3698)				if (this->get_selectable()) {
HXLINE(3699)					bool _hx_tmp1;
HXDLIN(3699)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3699)						_hx_tmp1 = !(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_altKey(modifier));
            					}
            					else {
HXLINE(3699)						_hx_tmp1 = false;
            					}
HXDLIN(3699)					if (_hx_tmp1) {
HXLINE(3701)						this->setSelection(0,this->_hx___text.length);
            					}
            				}
            			}
            			break;
            			case (int)99: {
HXLINE(3648)				bool _hx_tmp2;
HXDLIN(3648)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3648)					_hx_tmp2 = !(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_altKey(modifier));
            				}
            				else {
HXLINE(3648)					_hx_tmp2 = false;
            				}
HXDLIN(3648)				if (_hx_tmp2) {
HXLINE(3650)					bool _hx_tmp3;
HXDLIN(3650)					if ((this->_hx___caretIndex != this->_hx___selectionIndex)) {
HXLINE(3650)						_hx_tmp3 = !(this->get_displayAsPassword());
            					}
            					else {
HXLINE(3650)						_hx_tmp3 = false;
            					}
HXDLIN(3650)					if (_hx_tmp3) {
HXLINE(3652)						::lime::_hx_system::Clipboard_obj::set_text(this->_hx___text.substring(this->_hx___caretIndex,this->_hx___selectionIndex));
            					}
            				}
            			}
            			break;
            			case (int)118: {
HXLINE(3674)				bool _hx_tmp4;
HXDLIN(3674)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3674)					_hx_tmp4 = !(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_altKey(modifier));
            				}
            				else {
HXLINE(3674)					_hx_tmp4 = false;
            				}
HXDLIN(3674)				if (_hx_tmp4) {
HXLINE(3676)					if (::hx::IsNotNull( ::lime::_hx_system::Clipboard_obj::get_text() )) {
HXLINE(3678)						 ::openfl::events::TextEvent te =  ::openfl::events::TextEvent_obj::__alloc( HX_CTX ,HX_("textInput",1d,54,0b,57),true,true,::lime::_hx_system::Clipboard_obj::get_text());
HXLINE(3680)						this->dispatchEvent(te);
HXLINE(3682)						if (!(te->isDefaultPrevented())) {
HXLINE(3684)							this->_hx___replaceSelectedText(::lime::_hx_system::Clipboard_obj::get_text(),true);
HXLINE(3686)							this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            						}
            					}
            				}
            				else {
HXLINE(3693)					::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(3693)					( ( ::openfl::_Vector::ObjectVector)(this1) )->get((this->_hx___textEngine->textFormatRanges->get_length() - 1)).StaticCast<  ::openfl::text::_internal::TextFormatRange >()->end = this->_hx___text.length;
            				}
            			}
            			break;
            			case (int)120: {
HXLINE(3659)				bool _hx_tmp5;
HXDLIN(3659)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3659)					_hx_tmp5 = !(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_altKey(modifier));
            				}
            				else {
HXLINE(3659)					_hx_tmp5 = false;
            				}
HXDLIN(3659)				if (_hx_tmp5) {
HXLINE(3661)					bool _hx_tmp6;
HXDLIN(3661)					if ((this->_hx___caretIndex != this->_hx___selectionIndex)) {
HXLINE(3661)						_hx_tmp6 = !(this->get_displayAsPassword());
            					}
            					else {
HXLINE(3661)						_hx_tmp6 = false;
            					}
HXDLIN(3661)					if (_hx_tmp6) {
HXLINE(3663)						::lime::_hx_system::Clipboard_obj::set_text(this->_hx___text.substring(this->_hx___caretIndex,this->_hx___selectionIndex));
HXLINE(3665)						this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(3666)						this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            					}
            				}
            			}
            			break;
            			case (int)127: {
HXLINE(3526)				bool _hx_tmp7;
HXDLIN(3526)				if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(3526)					_hx_tmp7 = (this->_hx___caretIndex < this->_hx___text.length);
            				}
            				else {
HXLINE(3526)					_hx_tmp7 = false;
            				}
HXDLIN(3526)				if (_hx_tmp7) {
HXLINE(3528)					this->_hx___selectionIndex = (this->_hx___caretIndex + 1);
            				}
HXLINE(3531)				if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(3533)					this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(3534)					this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(3536)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            				else {
HXLINE(3540)					this->_hx___stopCursorTimer();
HXLINE(3541)					this->_hx___startCursorTimer();
            				}
            			}
            			break;
            			case (int)1073741898: {
HXLINE(3612)				if (this->get_selectable()) {
HXLINE(3613)					bool _hx_tmp8;
HXDLIN(3613)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3613)						_hx_tmp8 = !(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_altKey(modifier));
            					}
            					else {
HXLINE(3613)						_hx_tmp8 = false;
            					}
HXDLIN(3613)					if (_hx_tmp8) {
HXLINE(3615)						this->_hx___caretIndex = 0;
            					}
            					else {
HXLINE(3619)						this->_hx___caretBeginningOfLine();
            					}
HXLINE(3622)					if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(3624)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
HXLINE(3627)					this->setSelection(this->_hx___selectionIndex,this->_hx___caretIndex);
            				}
            			}
            			break;
            			case (int)1073741901: {
HXLINE(3629)				if (this->get_selectable()) {
HXLINE(3630)					bool _hx_tmp9;
HXDLIN(3630)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3630)						_hx_tmp9 = !(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_altKey(modifier));
            					}
            					else {
HXLINE(3630)						_hx_tmp9 = false;
            					}
HXDLIN(3630)					if (_hx_tmp9) {
HXLINE(3632)						this->_hx___caretIndex = this->_hx___text.length;
            					}
            					else {
HXLINE(3636)						this->_hx___caretEndOfLine();
            					}
HXLINE(3639)					if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(3641)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
HXLINE(3644)					this->setSelection(this->_hx___selectionIndex,this->_hx___caretIndex);
            				}
            			}
            			break;
            			case (int)1073741903: {
HXLINE(3561)				if (this->get_selectable()) {
HXLINE(3562)					bool _hx_tmp10;
HXDLIN(3562)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3562)						_hx_tmp10 = !(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_altKey(modifier));
            					}
            					else {
HXLINE(3562)						_hx_tmp10 = false;
            					}
HXDLIN(3562)					if (_hx_tmp10) {
HXLINE(3564)						this->_hx___caretBeginningOfNextLine();
            					}
            					else {
HXLINE(3568)						this->_hx___caretNextCharacter();
            					}
HXLINE(3571)					if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(3573)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
HXLINE(3576)					this->setSelection(this->_hx___selectionIndex,this->_hx___caretIndex);
            				}
            			}
            			break;
            			case (int)1073741904: {
HXLINE(3544)				if (this->get_selectable()) {
HXLINE(3545)					bool _hx_tmp11;
HXDLIN(3545)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3545)						_hx_tmp11 = !(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_altKey(modifier));
            					}
            					else {
HXLINE(3545)						_hx_tmp11 = false;
            					}
HXDLIN(3545)					if (_hx_tmp11) {
HXLINE(3547)						this->_hx___caretBeginningOfPreviousLine();
            					}
            					else {
HXLINE(3551)						this->_hx___caretPreviousCharacter();
            					}
HXLINE(3554)					if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(3556)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
HXLINE(3559)					this->setSelection(this->_hx___selectionIndex,this->_hx___caretIndex);
            				}
            			}
            			break;
            			case (int)1073741905: {
HXLINE(3578)				if (this->get_selectable()) {
HXLINE(3579)					bool _hx_tmp12;
HXDLIN(3579)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3579)						_hx_tmp12 = !(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_altKey(modifier));
            					}
            					else {
HXLINE(3579)						_hx_tmp12 = false;
            					}
HXDLIN(3579)					if (_hx_tmp12) {
HXLINE(3581)						this->_hx___caretIndex = this->_hx___text.length;
            					}
            					else {
HXLINE(3585)						this->_hx___caretNextLine();
            					}
HXLINE(3588)					if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(3590)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
HXLINE(3593)					this->setSelection(this->_hx___selectionIndex,this->_hx___caretIndex);
            				}
            			}
            			break;
            			case (int)1073741906: {
HXLINE(3595)				if (this->get_selectable()) {
HXLINE(3596)					bool _hx_tmp13;
HXDLIN(3596)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3596)						_hx_tmp13 = !(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_altKey(modifier));
            					}
            					else {
HXLINE(3596)						_hx_tmp13 = false;
            					}
HXDLIN(3596)					if (_hx_tmp13) {
HXLINE(3598)						this->_hx___caretIndex = 0;
            					}
            					else {
HXLINE(3602)						this->_hx___caretPreviousLine();
            					}
HXLINE(3605)					if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(3607)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
HXLINE(3610)					this->setSelection(this->_hx___selectionIndex,this->_hx___caretIndex);
            				}
            			}
            			break;
            			case (int)13: case (int)1073741912: {
HXLINE(3487)				if (this->_hx___textEngine->multiline) {
HXLINE(3489)					 ::openfl::events::TextEvent te1 =  ::openfl::events::TextEvent_obj::__alloc( HX_CTX ,HX_("textInput",1d,54,0b,57),true,true,HX_("\n",0a,00,00,00));
HXLINE(3491)					this->dispatchEvent(te1);
HXLINE(3493)					if (!(te1->isDefaultPrevented())) {
HXLINE(3495)						this->_hx___replaceSelectedText(HX_("\n",0a,00,00,00),true);
HXLINE(3497)						this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            					}
            				}
            				else {
HXLINE(3502)					this->_hx___stopCursorTimer();
HXLINE(3503)					this->_hx___startCursorTimer();
            				}
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,window_onKeyDown,(void))

void TextField_obj::window_onTextInput(::String value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_3710_window_onTextInput)
HXLINE(3711)		this->_hx___replaceSelectedText(value,true);
HXLINE(3714)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,window_onTextInput,(void))

 ::openfl::text::TextFormat TextField_obj::_hx___defaultTextFormat;

 ::haxe::ds::StringMap TextField_obj::_hx___missingFontWarning;


::hx::ObjectPtr< TextField_obj > TextField_obj::__new() {
	::hx::ObjectPtr< TextField_obj > __this = new TextField_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< TextField_obj > TextField_obj::__alloc(::hx::Ctx *_hx_ctx) {
	TextField_obj *__this = (TextField_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TextField_obj), true, "openfl.text.TextField"));
	*(void **)__this = TextField_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TextField_obj::TextField_obj()
{
}

void TextField_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextField);
	HX_MARK_MEMBER_NAME(condenseWhite,"condenseWhite");
	HX_MARK_MEMBER_NAME(_hx___wordSelection,"__wordSelection");
	HX_MARK_MEMBER_NAME(_hx___lineSelection,"__lineSelection");
	HX_MARK_MEMBER_NAME(_hx___specialSelectionInitialIndex,"__specialSelectionInitialIndex");
	HX_MARK_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_MARK_MEMBER_NAME(_hx___caretIndex,"__caretIndex");
	HX_MARK_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_MARK_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_MARK_MEMBER_NAME(_hx___displayAsPassword,"__displayAsPassword");
	HX_MARK_MEMBER_NAME(_hx___domRender,"__domRender");
	HX_MARK_MEMBER_NAME(_hx___inputEnabled,"__inputEnabled");
	HX_MARK_MEMBER_NAME(_hx___isHTML,"__isHTML");
	HX_MARK_MEMBER_NAME(_hx___layoutDirty,"__layoutDirty");
	HX_MARK_MEMBER_NAME(_hx___mouseScrollVCounter,"__mouseScrollVCounter");
	HX_MARK_MEMBER_NAME(_hx___mouseWheelEnabled,"__mouseWheelEnabled");
	HX_MARK_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_MARK_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_MARK_MEMBER_NAME(_hx___selectionIndex,"__selectionIndex");
	HX_MARK_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_MARK_MEMBER_NAME(_hx___styleSheet,"__styleSheet");
	HX_MARK_MEMBER_NAME(_hx___text,"__text");
	HX_MARK_MEMBER_NAME(_hx___htmlText,"__htmlText");
	HX_MARK_MEMBER_NAME(_hx___textEngine,"__textEngine");
	HX_MARK_MEMBER_NAME(_hx___textFormat,"__textFormat");
	 ::openfl::display::InteractiveObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TextField_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(condenseWhite,"condenseWhite");
	HX_VISIT_MEMBER_NAME(_hx___wordSelection,"__wordSelection");
	HX_VISIT_MEMBER_NAME(_hx___lineSelection,"__lineSelection");
	HX_VISIT_MEMBER_NAME(_hx___specialSelectionInitialIndex,"__specialSelectionInitialIndex");
	HX_VISIT_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_VISIT_MEMBER_NAME(_hx___caretIndex,"__caretIndex");
	HX_VISIT_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_VISIT_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_VISIT_MEMBER_NAME(_hx___displayAsPassword,"__displayAsPassword");
	HX_VISIT_MEMBER_NAME(_hx___domRender,"__domRender");
	HX_VISIT_MEMBER_NAME(_hx___inputEnabled,"__inputEnabled");
	HX_VISIT_MEMBER_NAME(_hx___isHTML,"__isHTML");
	HX_VISIT_MEMBER_NAME(_hx___layoutDirty,"__layoutDirty");
	HX_VISIT_MEMBER_NAME(_hx___mouseScrollVCounter,"__mouseScrollVCounter");
	HX_VISIT_MEMBER_NAME(_hx___mouseWheelEnabled,"__mouseWheelEnabled");
	HX_VISIT_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_VISIT_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_VISIT_MEMBER_NAME(_hx___selectionIndex,"__selectionIndex");
	HX_VISIT_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_VISIT_MEMBER_NAME(_hx___styleSheet,"__styleSheet");
	HX_VISIT_MEMBER_NAME(_hx___text,"__text");
	HX_VISIT_MEMBER_NAME(_hx___htmlText,"__htmlText");
	HX_VISIT_MEMBER_NAME(_hx___textEngine,"__textEngine");
	HX_VISIT_MEMBER_NAME(_hx___textFormat,"__textFormat");
	 ::openfl::display::InteractiveObject_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TextField_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_text() ); }
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_type() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"get_x") ) { return ::hx::Val( get_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return ::hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_y") ) { return ::hx::Val( get_y_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return ::hx::Val( set_y_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_border() ); }
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_length() ); }
		if (HX_FIELD_EQ(inName,"__text") ) { return ::hx::Val( _hx___text ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_scrollH() ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_scrollV() ); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { return ::hx::Val( _hx___dirty ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_autoSize() ); }
		if (HX_FIELD_EQ(inName,"htmlText") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_htmlText() ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_maxChars() ); }
		if (HX_FIELD_EQ(inName,"numLines") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_numLines() ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_restrict() ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_wordWrap() ); }
		if (HX_FIELD_EQ(inName,"__bounds") ) { return ::hx::Val( _hx___bounds ); }
		if (HX_FIELD_EQ(inName,"__isHTML") ) { return ::hx::Val( _hx___isHTML ); }
		if (HX_FIELD_EQ(inName,"get_text") ) { return ::hx::Val( get_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return ::hx::Val( set_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_type") ) { return ::hx::Val( get_type_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_type") ) { return ::hx::Val( set_type_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_multiline() ); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_sharpness() ); }
		if (HX_FIELD_EQ(inName,"textColor") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_textColor() ); }
		if (HX_FIELD_EQ(inName,"textWidth") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_textWidth() ); }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { return ::hx::Val( _hx___offsetX ); }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { return ::hx::Val( _hx___offsetY ); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return ::hx::Val( _hx___hitTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return ::hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return ::hx::Val( set_width_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_background() ); }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_caretIndex() ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_embedFonts() ); }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_maxScrollH() ); }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_maxScrollV() ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_selectable() ); }
		if (HX_FIELD_EQ(inName,"styleSheet") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_styleSheet() ); }
		if (HX_FIELD_EQ(inName,"textHeight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_textHeight() ); }
		if (HX_FIELD_EQ(inName,"__htmlText") ) { return ::hx::Val( _hx___htmlText ); }
		if (HX_FIELD_EQ(inName,"appendText") ) { return ::hx::Val( appendText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__dispatch") ) { return ::hx::Val( _hx___dispatch_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getGroup") ) { return ::hx::Val( _hx___getGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_border") ) { return ::hx::Val( get_border_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_border") ) { return ::hx::Val( set_border_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return ::hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return ::hx::Val( set_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return ::hx::Val( get_length_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_borderColor() ); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_gridFitType() ); }
		if (HX_FIELD_EQ(inName,"__domRender") ) { return ::hx::Val( _hx___domRender ); }
		if (HX_FIELD_EQ(inName,"getLineText") ) { return ::hx::Val( getLineText_dyn() ); }
		if (HX_FIELD_EQ(inName,"replaceText") ) { return ::hx::Val( replaceText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return ::hx::Val( _hx___getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getCursor") ) { return ::hx::Val( _hx___getCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scrollH") ) { return ::hx::Val( get_scrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollH") ) { return ::hx::Val( set_scrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scrollV") ) { return ::hx::Val( get_scrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollV") ) { return ::hx::Val( set_scrollV_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__caretIndex") ) { return ::hx::Val( _hx___caretIndex ); }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { return ::hx::Val( _hx___showCursor ); }
		if (HX_FIELD_EQ(inName,"__styleSheet") ) { return ::hx::Val( _hx___styleSheet ); }
		if (HX_FIELD_EQ(inName,"__textEngine") ) { return ::hx::Val( _hx___textEngine ); }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { return ::hx::Val( _hx___textFormat ); }
		if (HX_FIELD_EQ(inName,"setSelection") ) { return ::hx::Val( setSelection_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getAdvance") ) { return ::hx::Val( _hx___getAdvance_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateText") ) { return ::hx::Val( _hx___updateText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_autoSize") ) { return ::hx::Val( get_autoSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_autoSize") ) { return ::hx::Val( set_autoSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_htmlText") ) { return ::hx::Val( get_htmlText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_htmlText") ) { return ::hx::Val( set_htmlText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxChars") ) { return ::hx::Val( get_maxChars_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_maxChars") ) { return ::hx::Val( set_maxChars_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_numLines") ) { return ::hx::Val( get_numLines_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_restrict") ) { return ::hx::Val( get_restrict_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_restrict") ) { return ::hx::Val( set_restrict_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_wordWrap") ) { return ::hx::Val( get_wordWrap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_wordWrap") ) { return ::hx::Val( set_wordWrap_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_antiAliasType() ); }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_bottomScrollV() ); }
		if (HX_FIELD_EQ(inName,"condenseWhite") ) { return ::hx::Val( condenseWhite ); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { return ::hx::Val( _hx___cursorTimer ); }
		if (HX_FIELD_EQ(inName,"__layoutDirty") ) { return ::hx::Val( _hx___layoutDirty ); }
		if (HX_FIELD_EQ(inName,"getLineLength") ) { return ::hx::Val( getLineLength_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLineOffset") ) { return ::hx::Val( getLineOffset_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTextFormat") ) { return ::hx::Val( getTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTextFormat") ) { return ::hx::Val( setTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"__enableInput") ) { return ::hx::Val( _hx___enableInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getPosition") ) { return ::hx::Val( _hx___getPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return ::hx::Val( _hx___hitTestMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__replaceText") ) { return ::hx::Val( _hx___replaceText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_multiline") ) { return ::hx::Val( get_multiline_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_multiline") ) { return ::hx::Val( set_multiline_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_sharpness") ) { return ::hx::Val( get_sharpness_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_sharpness") ) { return ::hx::Val( set_sharpness_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textColor") ) { return ::hx::Val( get_textColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_textColor") ) { return ::hx::Val( set_textColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textWidth") ) { return ::hx::Val( get_textWidth_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__inputEnabled") ) { return ::hx::Val( _hx___inputEnabled ); }
		if (HX_FIELD_EQ(inName,"getLineMetrics") ) { return ::hx::Val( getLineMetrics_dyn() ); }
		if (HX_FIELD_EQ(inName,"__disableInput") ) { return ::hx::Val( _hx___disableInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateLayout") ) { return ::hx::Val( _hx___updateLayout_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_background") ) { return ::hx::Val( get_background_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_background") ) { return ::hx::Val( set_background_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_caretIndex") ) { return ::hx::Val( get_caretIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_embedFonts") ) { return ::hx::Val( get_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_embedFonts") ) { return ::hx::Val( set_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxScrollH") ) { return ::hx::Val( get_maxScrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxScrollV") ) { return ::hx::Val( get_maxScrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectable") ) { return ::hx::Val( get_selectable_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_selectable") ) { return ::hx::Val( set_selectable_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_styleSheet") ) { return ::hx::Val( get_styleSheet_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_styleSheet") ) { return ::hx::Val( set_styleSheet_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_tabEnabled") ) { return ::hx::Val( get_tabEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textHeight") ) { return ::hx::Val( get_textHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onFocusIn") ) { return ::hx::Val( this_onFocusIn_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onKeyDown") ) { return ::hx::Val( this_onKeyDown_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_backgroundColor() ); }
		if (HX_FIELD_EQ(inName,"__wordSelection") ) { return ::hx::Val( _hx___wordSelection ); }
		if (HX_FIELD_EQ(inName,"__lineSelection") ) { return ::hx::Val( _hx___lineSelection ); }
		if (HX_FIELD_EQ(inName,"__caretNextLine") ) { return ::hx::Val( _hx___caretNextLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopTextInput") ) { return ::hx::Val( _hx___stopTextInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateScrollH") ) { return ::hx::Val( _hx___updateScrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateScrollV") ) { return ::hx::Val( _hx___updateScrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_borderColor") ) { return ::hx::Val( get_borderColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_borderColor") ) { return ::hx::Val( set_borderColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_gridFitType") ) { return ::hx::Val( get_gridFitType_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_gridFitType") ) { return ::hx::Val( set_gridFitType_dyn() ); }
		if (HX_FIELD_EQ(inName,"stage_onMouseUp") ) { return ::hx::Val( stage_onMouseUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onFocusOut") ) { return ::hx::Val( this_onFocusOut_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__selectionIndex") ) { return ::hx::Val( _hx___selectionIndex ); }
		if (HX_FIELD_EQ(inName,"__caretEndOfLine") ) { return ::hx::Val( _hx___caretEndOfLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"__startTextInput") ) { return ::hx::Val( _hx___startTextInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onMouseDown") ) { return ::hx::Val( this_onMouseDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"window_onKeyDown") ) { return ::hx::Val( window_onKeyDown_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultTextFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_defaultTextFormat() ); }
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_displayAsPassword() ); }
		if (HX_FIELD_EQ(inName,"mouseWheelEnabled") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_mouseWheelEnabled() ); }
		if (HX_FIELD_EQ(inName,"selectionEndIndex") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_selectionEndIndex() ); }
		if (HX_FIELD_EQ(inName,"getCharBoundaries") ) { return ::hx::Val( getCharBoundaries_dyn() ); }
		if (HX_FIELD_EQ(inName,"__allowMouseFocus") ) { return ::hx::Val( _hx___allowMouseFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopCursorTimer") ) { return ::hx::Val( _hx___stopCursorTimer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateMouseDrag") ) { return ::hx::Val( _hx___updateMouseDrag_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_antiAliasType") ) { return ::hx::Val( get_antiAliasType_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_antiAliasType") ) { return ::hx::Val( set_antiAliasType_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bottomScrollV") ) { return ::hx::Val( get_bottomScrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"stage_onMouseMove") ) { return ::hx::Val( stage_onMouseMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onEnterFrame") ) { return ::hx::Val( this_onEnterFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onMouseWheel") ) { return ::hx::Val( this_onMouseWheel_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getLineIndexOfChar") ) { return ::hx::Val( getLineIndexOfChar_dyn() ); }
		if (HX_FIELD_EQ(inName,"getParagraphLength") ) { return ::hx::Val( getParagraphLength_dyn() ); }
		if (HX_FIELD_EQ(inName,"__startCursorTimer") ) { return ::hx::Val( _hx___startCursorTimer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateTransforms") ) { return ::hx::Val( _hx___updateTransforms_dyn() ); }
		if (HX_FIELD_EQ(inName,"window_onTextInput") ) { return ::hx::Val( window_onTextInput_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"selectionBeginIndex") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_selectionBeginIndex() ); }
		if (HX_FIELD_EQ(inName,"__displayAsPassword") ) { return ::hx::Val( _hx___displayAsPassword ); }
		if (HX_FIELD_EQ(inName,"__mouseWheelEnabled") ) { return ::hx::Val( _hx___mouseWheelEnabled ); }
		if (HX_FIELD_EQ(inName,"getCharIndexAtPoint") ) { return ::hx::Val( getCharIndexAtPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLineIndexAtPoint") ) { return ::hx::Val( getLineIndexAtPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"replaceSelectedText") ) { return ::hx::Val( replaceSelectedText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setStageReference") ) { return ::hx::Val( _hx___setStageReference_dyn() ); }
		if (HX_FIELD_EQ(inName,"__caretPreviousLine") ) { return ::hx::Val( _hx___caretPreviousLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getCharBoundaries") ) { return ::hx::Val( _hx___getCharBoundaries_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_backgroundColor") ) { return ::hx::Val( get_backgroundColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_backgroundColor") ) { return ::hx::Val( set_backgroundColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onAddedToStage") ) { return ::hx::Val( this_onAddedToStage_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__caretNextCharacter") ) { return ::hx::Val( _hx___caretNextCharacter_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__mouseScrollVCounter") ) { return ::hx::Val( _hx___mouseScrollVCounter ); }
		if (HX_FIELD_EQ(inName,"__replaceSelectedText") ) { return ::hx::Val( _hx___replaceSelectedText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_defaultTextFormat") ) { return ::hx::Val( get_defaultTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_defaultTextFormat") ) { return ::hx::Val( set_defaultTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_displayAsPassword") ) { return ::hx::Val( get_displayAsPassword_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_displayAsPassword") ) { return ::hx::Val( set_displayAsPassword_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mouseWheelEnabled") ) { return ::hx::Val( get_mouseWheelEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_mouseWheelEnabled") ) { return ::hx::Val( set_mouseWheelEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectionEndIndex") ) { return ::hx::Val( get_selectionEndIndex_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__caretBeginningOfLine") ) { return ::hx::Val( _hx___caretBeginningOfLine_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"getFirstCharInParagraph") ) { return ::hx::Val( getFirstCharInParagraph_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectionBeginIndex") ) { return ::hx::Val( get_selectionBeginIndex_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__caretPreviousCharacter") ) { return ::hx::Val( _hx___caretPreviousCharacter_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"__getPositionByIdentifier") ) { return ::hx::Val( _hx___getPositionByIdentifier_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__caretBeginningOfNextLine") ) { return ::hx::Val( _hx___caretBeginningOfNextLine_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"__getOppositeIdentifierBound") ) { return ::hx::Val( _hx___getOppositeIdentifierBound_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"__getCharIndexOnDifferentLine") ) { return ::hx::Val( _hx___getCharIndexOnDifferentLine_dyn() ); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"__specialSelectionInitialIndex") ) { return ::hx::Val( _hx___specialSelectionInitialIndex ); }
		if (HX_FIELD_EQ(inName,"__caretBeginningOfPreviousLine") ) { return ::hx::Val( _hx___caretBeginningOfPreviousLine_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextField_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"__defaultTextFormat") ) { outValue = ( _hx___defaultTextFormat ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__missingFontWarning") ) { outValue = ( _hx___missingFontWarning ); return true; }
	}
	return false;
}

::hx::Val TextField_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_text(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_type(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_border(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__text") ) { _hx___text=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollH(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollV(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { _hx___dirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_autoSize(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"htmlText") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_htmlText(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_maxChars(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_restrict(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_wordWrap(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__bounds") ) { _hx___bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isHTML") ) { _hx___isHTML=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_multiline(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_sharpness(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"textColor") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_textColor(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { _hx___offsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { _hx___offsetY=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_background(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_embedFonts(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_selectable(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"styleSheet") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_styleSheet(inValue.Cast<  ::openfl::text::StyleSheet >()) ); }
		if (HX_FIELD_EQ(inName,"__htmlText") ) { _hx___htmlText=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_borderColor(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_gridFitType(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"__domRender") ) { _hx___domRender=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__caretIndex") ) { _hx___caretIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { _hx___showCursor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__styleSheet") ) { _hx___styleSheet=inValue.Cast<  ::openfl::text::StyleSheet >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textEngine") ) { _hx___textEngine=inValue.Cast<  ::openfl::text::_internal::TextEngine >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { _hx___textFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_antiAliasType(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"condenseWhite") ) { condenseWhite=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { _hx___cursorTimer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__layoutDirty") ) { _hx___layoutDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__inputEnabled") ) { _hx___inputEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_backgroundColor(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"__wordSelection") ) { _hx___wordSelection=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__lineSelection") ) { _hx___lineSelection=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__selectionIndex") ) { _hx___selectionIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultTextFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_defaultTextFormat(inValue.Cast<  ::openfl::text::TextFormat >()) ); }
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_displayAsPassword(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"mouseWheelEnabled") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_mouseWheelEnabled(inValue.Cast< bool >()) ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__displayAsPassword") ) { _hx___displayAsPassword=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseWheelEnabled") ) { _hx___mouseWheelEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__mouseScrollVCounter") ) { _hx___mouseScrollVCounter=inValue.Cast< int >(); return inValue; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"__specialSelectionInitialIndex") ) { _hx___specialSelectionInitialIndex=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextField_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"__defaultTextFormat") ) { _hx___defaultTextFormat=ioValue.Cast<  ::openfl::text::TextFormat >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__missingFontWarning") ) { _hx___missingFontWarning=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void TextField_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("antiAliasType",68,c4,fa,e7));
	outFields->push(HX_("autoSize",d0,8f,79,2f));
	outFields->push(HX_("background",ee,93,1d,26));
	outFields->push(HX_("backgroundColor",95,4e,47,0d));
	outFields->push(HX_("border",ec,4c,1a,64));
	outFields->push(HX_("borderColor",d7,3c,d5,d6));
	outFields->push(HX_("bottomScrollV",fe,f7,87,8b));
	outFields->push(HX_("caretIndex",8f,b6,5b,dd));
	outFields->push(HX_("condenseWhite",4c,f5,1f,32));
	outFields->push(HX_("defaultTextFormat",e5,c7,e0,0a));
	outFields->push(HX_("displayAsPassword",0f,cb,96,ea));
	outFields->push(HX_("embedFonts",2b,c7,e1,8e));
	outFields->push(HX_("gridFitType",05,f3,13,b4));
	outFields->push(HX_("htmlText",b8,1f,38,10));
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("maxChars",99,ef,d0,ef));
	outFields->push(HX_("maxScrollH",57,ad,fc,9a));
	outFields->push(HX_("maxScrollV",65,ad,fc,9a));
	outFields->push(HX_("mouseWheelEnabled",eb,16,54,65));
	outFields->push(HX_("multiline",ed,d2,11,9e));
	outFields->push(HX_("numLines",d9,f1,11,32));
	outFields->push(HX_("restrict",3c,cb,9e,f1));
	outFields->push(HX_("scrollH",9b,33,d8,30));
	outFields->push(HX_("scrollV",a9,33,d8,30));
	outFields->push(HX_("selectable",96,b6,2a,c4));
	outFields->push(HX_("selectionBeginIndex",95,7f,17,d7));
	outFields->push(HX_("selectionEndIndex",a3,0d,42,4b));
	outFields->push(HX_("sharpness",81,22,25,1b));
	outFields->push(HX_("styleSheet",ae,3b,16,fc));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("textColor",76,01,4a,e3));
	outFields->push(HX_("textHeight",74,88,3c,39));
	outFields->push(HX_("textWidth",19,46,50,63));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("wordWrap",b4,14,db,00));
	outFields->push(HX_("__wordSelection",02,86,3d,26));
	outFields->push(HX_("__lineSelection",98,5a,4c,59));
	outFields->push(HX_("__specialSelectionInitialIndex",81,ea,b9,4b));
	outFields->push(HX_("__bounds",95,f1,4c,0e));
	outFields->push(HX_("__caretIndex",af,31,ef,15));
	outFields->push(HX_("__cursorTimer",ef,59,8f,e1));
	outFields->push(HX_("__dirty",f2,a8,2e,44));
	outFields->push(HX_("__displayAsPassword",ef,f3,86,9d));
	outFields->push(HX_("__domRender",58,38,ba,4f));
	outFields->push(HX_("__inputEnabled",b7,e0,1d,37));
	outFields->push(HX_("__isHTML",75,61,94,0a));
	outFields->push(HX_("__layoutDirty",e8,e9,31,d3));
	outFields->push(HX_("__mouseScrollVCounter",38,bc,63,27));
	outFields->push(HX_("__mouseWheelEnabled",cb,3f,44,18));
	outFields->push(HX_("__offsetX",45,5a,b3,58));
	outFields->push(HX_("__offsetY",46,5a,b3,58));
	outFields->push(HX_("__selectionIndex",46,0a,c3,7d));
	outFields->push(HX_("__showCursor",d3,ae,f0,e0));
	outFields->push(HX_("__styleSheet",ce,b6,a9,34));
	outFields->push(HX_("__text",cd,2f,f2,fb));
	outFields->push(HX_("__htmlText",d8,92,70,b3));
	outFields->push(HX_("__textEngine",6f,43,08,6c));
	outFields->push(HX_("__textFormat",e4,8a,12,6d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TextField_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(TextField_obj,condenseWhite),HX_("condenseWhite",4c,f5,1f,32)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___wordSelection),HX_("__wordSelection",02,86,3d,26)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___lineSelection),HX_("__lineSelection",98,5a,4c,59)},
	{::hx::fsInt,(int)offsetof(TextField_obj,_hx___specialSelectionInitialIndex),HX_("__specialSelectionInitialIndex",81,ea,b9,4b)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(TextField_obj,_hx___bounds),HX_("__bounds",95,f1,4c,0e)},
	{::hx::fsInt,(int)offsetof(TextField_obj,_hx___caretIndex),HX_("__caretIndex",af,31,ef,15)},
	{::hx::fsObject /*  ::haxe::Timer */ ,(int)offsetof(TextField_obj,_hx___cursorTimer),HX_("__cursorTimer",ef,59,8f,e1)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___dirty),HX_("__dirty",f2,a8,2e,44)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___displayAsPassword),HX_("__displayAsPassword",ef,f3,86,9d)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___domRender),HX_("__domRender",58,38,ba,4f)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___inputEnabled),HX_("__inputEnabled",b7,e0,1d,37)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___isHTML),HX_("__isHTML",75,61,94,0a)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___layoutDirty),HX_("__layoutDirty",e8,e9,31,d3)},
	{::hx::fsInt,(int)offsetof(TextField_obj,_hx___mouseScrollVCounter),HX_("__mouseScrollVCounter",38,bc,63,27)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___mouseWheelEnabled),HX_("__mouseWheelEnabled",cb,3f,44,18)},
	{::hx::fsFloat,(int)offsetof(TextField_obj,_hx___offsetX),HX_("__offsetX",45,5a,b3,58)},
	{::hx::fsFloat,(int)offsetof(TextField_obj,_hx___offsetY),HX_("__offsetY",46,5a,b3,58)},
	{::hx::fsInt,(int)offsetof(TextField_obj,_hx___selectionIndex),HX_("__selectionIndex",46,0a,c3,7d)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___showCursor),HX_("__showCursor",d3,ae,f0,e0)},
	{::hx::fsObject /*  ::openfl::text::StyleSheet */ ,(int)offsetof(TextField_obj,_hx___styleSheet),HX_("__styleSheet",ce,b6,a9,34)},
	{::hx::fsString,(int)offsetof(TextField_obj,_hx___text),HX_("__text",cd,2f,f2,fb)},
	{::hx::fsString,(int)offsetof(TextField_obj,_hx___htmlText),HX_("__htmlText",d8,92,70,b3)},
	{::hx::fsObject /*  ::openfl::text::_internal::TextEngine */ ,(int)offsetof(TextField_obj,_hx___textEngine),HX_("__textEngine",6f,43,08,6c)},
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(int)offsetof(TextField_obj,_hx___textFormat),HX_("__textFormat",e4,8a,12,6d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo TextField_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(void *) &TextField_obj::_hx___defaultTextFormat,HX_("__defaultTextFormat",c5,f0,d0,bd)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &TextField_obj::_hx___missingFontWarning,HX_("__missingFontWarning",a7,0d,0e,1a)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String TextField_obj_sMemberFields[] = {
	HX_("condenseWhite",4c,f5,1f,32),
	HX_("__wordSelection",02,86,3d,26),
	HX_("__lineSelection",98,5a,4c,59),
	HX_("__specialSelectionInitialIndex",81,ea,b9,4b),
	HX_("__bounds",95,f1,4c,0e),
	HX_("__caretIndex",af,31,ef,15),
	HX_("__cursorTimer",ef,59,8f,e1),
	HX_("__dirty",f2,a8,2e,44),
	HX_("__displayAsPassword",ef,f3,86,9d),
	HX_("__domRender",58,38,ba,4f),
	HX_("__inputEnabled",b7,e0,1d,37),
	HX_("__isHTML",75,61,94,0a),
	HX_("__layoutDirty",e8,e9,31,d3),
	HX_("__mouseScrollVCounter",38,bc,63,27),
	HX_("__mouseWheelEnabled",cb,3f,44,18),
	HX_("__offsetX",45,5a,b3,58),
	HX_("__offsetY",46,5a,b3,58),
	HX_("__selectionIndex",46,0a,c3,7d),
	HX_("__showCursor",d3,ae,f0,e0),
	HX_("__styleSheet",ce,b6,a9,34),
	HX_("__text",cd,2f,f2,fb),
	HX_("__htmlText",d8,92,70,b3),
	HX_("__textEngine",6f,43,08,6c),
	HX_("__textFormat",e4,8a,12,6d),
	HX_("appendText",a7,cf,05,5b),
	HX_("getCharBoundaries",74,85,a1,8b),
	HX_("getCharIndexAtPoint",17,ee,9c,aa),
	HX_("getFirstCharInParagraph",f9,5c,3d,08),
	HX_("getLineIndexAtPoint",35,dc,50,98),
	HX_("getLineIndexOfChar",b5,68,99,a1),
	HX_("getLineLength",30,ec,21,d0),
	HX_("getLineMetrics",b9,ab,c6,f2),
	HX_("getLineOffset",dd,ee,59,91),
	HX_("getLineText",77,dd,16,b0),
	HX_("getParagraphLength",fe,0e,4e,c4),
	HX_("getTextFormat",fa,6b,f1,90),
	HX_("replaceSelectedText",fc,fe,33,bb),
	HX_("replaceText",01,6b,95,61),
	HX_("setSelection",4a,b8,6a,b2),
	HX_("setTextFormat",06,4e,f7,d5),
	HX_("__setStageReference",4f,e5,e5,f4),
	HX_("__allowMouseFocus",3c,92,71,07),
	HX_("__caretBeginningOfLine",45,c9,47,fd),
	HX_("__caretBeginningOfNextLine",58,ec,35,93),
	HX_("__caretBeginningOfPreviousLine",1c,d2,e4,ff),
	HX_("__caretEndOfLine",03,74,b1,5c),
	HX_("__caretNextCharacter",d3,7b,4f,ea),
	HX_("__caretNextLine",0a,68,ad,0d),
	HX_("__caretPreviousCharacter",8f,ce,6c,11),
	HX_("__caretPreviousLine",ce,0e,89,48),
	HX_("__disableInput",22,64,62,1d),
	HX_("__dispatch",da,41,9c,c1),
	HX_("__enableInput",67,4b,65,d1),
	HX_("__getAdvance",ac,09,01,77),
	HX_("__getBounds",8b,58,a0,10),
	HX_("__getCharBoundaries",54,ae,91,3e),
	HX_("__getCharIndexOnDifferentLine",08,76,0f,0a),
	HX_("__getCursor",ec,60,6b,e9),
	HX_("__getGroup",e9,35,04,9d),
	HX_("__getPosition",3f,a4,66,39),
	HX_("__getPositionByIdentifier",ff,47,84,d6),
	HX_("__getOppositeIdentifierBound",18,fb,b2,9f),
	HX_("__hitTest",25,b1,cd,63),
	HX_("__hitTestMask",b1,14,fd,3b),
	HX_("__replaceSelectedText",dc,1f,28,29),
	HX_("__replaceText",e1,ab,0d,aa),
	HX_("__startCursorTimer",ed,46,a3,83),
	HX_("__startTextInput",7b,ae,85,aa),
	HX_("__stopCursorTimer",0d,cd,6c,26),
	HX_("__stopTextInput",9b,6c,cb,a1),
	HX_("__updateLayout",b3,d8,3c,79),
	HX_("__updateMouseDrag",50,e6,a9,c1),
	HX_("__updateScrollH",72,d1,f8,83),
	HX_("__updateScrollV",80,d1,f8,83),
	HX_("__updateText",76,32,42,3e),
	HX_("__updateTransforms",10,f4,b0,50),
	HX_("get_antiAliasType",bf,cf,6a,ee),
	HX_("set_antiAliasType",cb,a7,d8,11),
	HX_("get_autoSize",d9,43,93,e4),
	HX_("set_autoSize",4d,67,8c,f9),
	HX_("get_background",37,1c,13,9c),
	HX_("set_background",ab,04,33,bc),
	HX_("get_backgroundColor",ac,1d,52,98),
	HX_("set_backgroundColor",b8,10,ef,d4),
	HX_("get_border",b5,bc,a1,54),
	HX_("set_border",29,5b,1f,58),
	HX_("get_borderColor",6e,f4,b6,97),
	HX_("set_borderColor",7a,71,82,93),
	HX_("get_bottomScrollV",55,03,f8,91),
	HX_("get_caretIndex",d8,3e,51,53),
	HX_("get_defaultTextFormat",bc,ca,8e,89),
	HX_("set_defaultTextFormat",c8,98,97,dd),
	HX_("get_displayAsPassword",e6,cd,44,69),
	HX_("set_displayAsPassword",f2,9b,4d,bd),
	HX_("get_embedFonts",74,4f,d7,04),
	HX_("set_embedFonts",e8,37,f7,24),
	HX_("get_gridFitType",9c,aa,f5,74),
	HX_("set_gridFitType",a8,27,c1,70),
	HX_("get_height",b0,77,d3,f2),
	HX_("set_height",24,16,51,f6),
	HX_("get_htmlText",c1,d3,51,c5),
	HX_("set_htmlText",35,f7,4a,da),
	HX_("get_length",af,04,8f,8f),
	HX_("get_maxChars",a2,a3,ea,a4),
	HX_("set_maxChars",16,c7,e3,b9),
	HX_("get_maxScrollH",a0,35,f2,10),
	HX_("get_maxScrollV",ae,35,f2,10),
	HX_("get_mouseWheelEnabled",c2,19,02,e4),
	HX_("set_mouseWheelEnabled",ce,e7,0a,38),
	HX_("get_multiline",c4,a6,75,5f),
	HX_("set_multiline",d0,88,7b,a4),
	HX_("get_numLines",e2,a5,2b,e7),
	HX_("get_restrict",45,7f,b8,a6),
	HX_("set_restrict",b9,a2,b1,bb),
	HX_("get_scrollH",b2,93,d2,b6),
	HX_("set_scrollH",be,9a,3f,c1),
	HX_("get_scrollV",c0,93,d2,b6),
	HX_("set_scrollV",cc,9a,3f,c1),
	HX_("get_selectable",df,3e,20,3a),
	HX_("set_selectable",53,27,40,5a),
	HX_("get_selectionBeginIndex",2c,26,6d,df),
	HX_("get_selectionEndIndex",7a,10,f0,c9),
	HX_("get_sharpness",58,f6,88,dc),
	HX_("set_sharpness",64,d8,8e,21),
	HX_("get_styleSheet",f7,c3,0b,72),
	HX_("set_styleSheet",6b,ac,2b,92),
	HX_("get_tabEnabled",f5,7e,fe,b5),
	HX_("get_text",36,88,b4,cc),
	HX_("set_text",aa,e1,11,7b),
	HX_("get_textColor",4d,d5,ad,a4),
	HX_("set_textColor",59,b7,b3,e9),
	HX_("get_textWidth",f0,19,b4,24),
	HX_("get_textHeight",bd,10,32,af),
	HX_("get_type",43,ae,c3,cc),
	HX_("set_type",b7,07,21,7b),
	HX_("get_width",5d,12,0c,0e),
	HX_("set_width",69,fe,5c,f1),
	HX_("get_wordWrap",bd,c8,f4,b5),
	HX_("set_wordWrap",31,ec,ed,ca),
	HX_("get_x",4f,a5,60,91),
	HX_("set_x",5b,9b,2f,7a),
	HX_("get_y",50,a5,60,91),
	HX_("set_y",5c,9b,2f,7a),
	HX_("stage_onMouseMove",76,bc,61,de),
	HX_("stage_onMouseUp",80,ac,07,d1),
	HX_("this_onAddedToStage",23,9e,ce,72),
	HX_("this_onEnterFrame",b5,0f,1f,8e),
	HX_("this_onFocusIn",1d,62,fb,dc),
	HX_("this_onFocusOut",56,0b,ff,7e),
	HX_("this_onKeyDown",e1,85,bf,37),
	HX_("this_onMouseDown",67,5d,aa,6d),
	HX_("this_onMouseWheel",f6,33,56,73),
	HX_("window_onKeyDown",f3,7d,3b,d1),
	HX_("window_onTextInput",ef,a0,6a,c0),
	::String(null()) };

static void TextField_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___defaultTextFormat,"__defaultTextFormat");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___missingFontWarning,"__missingFontWarning");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextField_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___defaultTextFormat,"__defaultTextFormat");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___missingFontWarning,"__missingFontWarning");
};

#endif

::hx::Class TextField_obj::__mClass;

static ::String TextField_obj_sStaticFields[] = {
	HX_("__defaultTextFormat",c5,f0,d0,bd),
	HX_("__missingFontWarning",a7,0d,0e,1a),
	::String(null())
};

void TextField_obj::__register()
{
	TextField_obj _hx_dummy;
	TextField_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.text.TextField",ca,a8,d5,ef);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextField_obj::__GetStatic;
	__mClass->mSetStaticField = &TextField_obj::__SetStatic;
	__mClass->mMarkFunc = TextField_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(TextField_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TextField_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TextField_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextField_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextField_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextField_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextField_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_138_boot)
HXDLIN( 138)		_hx___missingFontWarning =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace openfl
} // end namespace text
